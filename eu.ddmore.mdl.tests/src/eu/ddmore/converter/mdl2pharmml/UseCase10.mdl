# 2 Compartment PK model for warfarin
# Central + Peripheral compartments
#
# Covariate already transformed.
# Multiple dosing using an oral bolus and IV Infusion using PK Macros
#

warfarin_PK_Compartments_dat = dataObj {
	DECLARED_VARIABLES{INPUT_KA CC_obs}

	DATA_INPUT_VARIABLES {
		ID : { use is id }
		TIME : { use is idv }
		WT : { use is covariate }
		AMT : { use is amt, define = {1 in CMT as INPUT_KA} }
		CMT : { use is cmt }
		DVID : { use is dvid}
		DV : { use is dv, variable = CC_obs }
		MDV : { use is mdv }
		logtWT:{ use is covariate }  
	} # end DATA_INPUT_VARIABLES
	
	SOURCE {
	    srcfile : {file = "warfarin_conc_cmt.csv", 
            inputFormat is nonmemFormat }
	} # end SOURCE
} # end data object

warfarin_PK_2Compartments_par = parObj{

   DECLARED_VARIABLES{eta_PPV_CL eta_PPV_VC }

   STRUCTURAL{
      POP_CL: {value=0.1, lo=0.001}
      POP_VC: {value=8, lo=0.001}
      POP_Q: {value=0.2, lo=0.001}
      POP_VP: {value=20, lo=0.001}
      POP_KA: {value=0.362, lo=0.001}
      POP_TLAG: {value=1, lo=0.001}
      POP_BETA_CL_WT: {value=0.75 ,fix=true}
      POP_BETA_V_WT: {value=1 ,fix=true}
      RUV_PROP: {value=0.1, lo=0}
      RUV_ADD: {value=0.1, lo=0}
   }# end STRUCTURAL

   VARIABILITY{
      PPV_CL: {value=0.1, type is sd}
      PPV_VC: {value=0.1, type is sd}
      PPV_Q: {value=0.1, type is sd}
      PPV_VP: {value=0.1, type is sd}
      PPV_KA: {value=0.1, type is sd}
      PPV_TLAG: {value=0.1, type is sd}
      RUV_EPS1: {value=1, type is sd, fix=true}

# Matrix off-diagonal values
      MATRIX_1: {
		type is corr,
		parameter=[eta_PPV_CL,eta_PPV_VC],
		value=[0.01]
      }

   }# end VARIABILITY

} # end of parameter object

warfarin_PK_2Compartments_mdl = mdlObj{
   IDV{ TIME }

   COVARIATES{
      WT
      logtWT
   }# end COVARIATES

   VARIABILITY_LEVELS{
      ID: {type is parameter, level=2 }
      DV: {type is observation, level=1 }
   }# end VARIABILITY_LEVELS

   STRUCTURAL_PARAMETERS{
      POP_CL
      POP_VC
      POP_Q
      POP_VP
      POP_KA
      POP_TLAG
      POP_BETA_CL_WT
      POP_BETA_V_WT
      RUV_PROP
      RUV_ADD
   }# end STRUCTURAL_PARAMETERS

   VARIABILITY_PARAMETERS{
      PPV_CL
      PPV_VC
      PPV_Q
      PPV_VP
      PPV_KA
      PPV_TLAG
      RUV_EPS1
   }# end VARIABILITY_PARAMETERS

   GROUP_VARIABLES{
   }# end GROUP_VARIABLES

   RANDOM_VARIABLE_DEFINITION (level=ID) {
      eta_PPV_CL ~ Normal(mean=0, sd=PPV_CL)
      eta_PPV_VC ~ Normal(mean=0, sd=PPV_VC)
      eta_PPV_Q ~ Normal(mean=0, sd=PPV_Q)
      eta_PPV_VP ~ Normal(mean=0, sd=PPV_VP)
      eta_PPV_KA ~ Normal(mean=0, sd=PPV_KA)
      eta_PPV_TLAG ~ Normal(mean=0, sd=PPV_TLAG)
   }# end RANDOM_VARIABLE_DEFINITION (level=ID)

   RANDOM_VARIABLE_DEFINITION (level=DV) {
      eps_RUV_EPS1 ~ Normal(mean=0, sd=RUV_EPS1)
   }# end RANDOM_VARIABLE_DEFINITION (level=DV)

   INDIVIDUAL_VARIABLES{
     ln(CL) = linear(pop = POP_CL, trans is ln, fixEff = [{coeff=POP_BETA_CL_WT, cov=logtWT}] , ranEff = [eta_PPV_CL] )
     ln(VC) = linear(pop = POP_VC, trans is ln, fixEff = [{coeff=POP_BETA_V_WT, cov=logtWT}] , ranEff = [eta_PPV_VC] )
     ln(Q) = linear(pop = POP_Q, trans is ln,  ranEff = [eta_PPV_Q] )
     ln(VP) = linear(pop = POP_VP, trans is ln,  ranEff = [eta_PPV_VP] )
     ln(KA) = linear(pop = POP_KA, trans is ln, ranEff = [eta_PPV_KA] )
     ln(TLAG) = linear(pop = POP_TLAG, trans is ln, ranEff = [eta_PPV_TLAG] ) 
      ALAG1=TLAG
      V2=VC
      V3=VP
      S2=VC

   }# end INDIVIDUAL_VARIABLES

   MODEL_PREDICTION{

   COMPARTMENT{
      ##  Parameters = CL,V2,Q,V3,KA,S2,ALAG1
      INPUT_KA : {type is depot, modelCmt=1, to=CENTRAL, ka=KA, tlag=ALAG1}
      CENTRAL : {type is compartment, modelCmt=2}
      		:: {type is elimination, modelCmt=2, from=CENTRAL, v=V2, cl=CL}
      PERIPHERAL: {type is distribution, modelCmt=3, from=CENTRAL, kin=Q/V2, kout=Q/V3}
   }# end COMPARTMENT

      F=CENTRAL/S2

#    LIBRARY
#       F=PK(ndist=2, depot=true, par=v_cl)
#    }# end LIBRARY
# 
   
      CC=F
   
   }# end MODEL_PREDICTION

   OBSERVATION{
         CC_obs = combinedError1(additive = RUV_ADD, proportional = RUV_PROP, eps = eps_RUV_EPS1, prediction = CC ) 
   }# end OBSERVATION


} # end of model object

warfarin_PK_ODE_task = taskObj {
	ESTIMATE{ 
		set algo is saem 
	}
} # end of task object




warfarin_PK_ODE_mog = mogObj {
	OBJECTS{
		warfarin_PK_Compartments_dat : { type is dataObj }
		warfarin_PK_2Compartments_par : { type is parObj }
		warfarin_PK_2Compartments_mdl : { type is mdlObj }
		warfarin_PK_ODE_task : { type is taskObj }
	}
}
