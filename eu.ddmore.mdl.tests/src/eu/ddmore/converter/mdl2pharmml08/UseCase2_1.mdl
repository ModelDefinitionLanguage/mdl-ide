# Warfarin model. Analytic solution and bolus dosing.
#
# Model uses an analytic solution. Requires a dosing variable,
#

warfarin_PK_analytic_DerivedDT_dat = dataObj {
	DECLARED_VARIABLES{D Y}

	DATA_INPUT_VARIABLES {
		ID : { use is id }
		TIME : { use is idv }
		WT : { use is covariate }
		AMT : { use is amt, variable = D }
		DVID : { use is dvid}
		DV : { use is dv, variable = Y }
		MDV : { use is mdv }
		logtWT:{ use is covariate }  
	} # end DATA_INPUT_VARIABLES
	

	DATA_DERIVED_VARIABLES{
		# This is an idea of how to solve the dose time problem.  Like 'use is amt' we assume that the DT variable is
		# only assigned when AMT > 0.  The typing ensured that the attributes reference a column with the correct 'use'.
		DT : { use is doseTime, idvColumn=TIME, amtColumn=AMT }
	}

	SOURCE {
	    srcfile : {file = "warfarin_conc.csv", 
            inputFormat is nonmemFormat } 
	} # end SOURCE
} # end data object

warfarin_PK_ODE_par = parObj {
	DECLARED_VARIABLES{ETA_CL ETA_V}

	# By default a parameter is to be estimated if fix is omitted
 	STRUCTURAL {
		POP_CL : { value = 0.1, lo = 0.001 }
		POP_V : { value = 8, lo = 0.001 } 
		POP_KA : { value = 0.362, lo = 0.001 }
		POP_TLAG : { value=1, lo=0.001, hi=10 }
		BETA_CL_WT : { value = 0.75, fix = true }
		BETA_V_WT : { value = 1, fix = true } 
		RUV_PROP : { value = 0.1, lo = 0 }
		RUV_ADD : { value = 0.1, lo = 0} 
		} # end STRUCTURAL
	VARIABILITY {
		PPV_CL : { value = 0.1, type is sd }
		PPV_V : { value = 0.1, type is sd }
		PPV_KA : { value = 0.1, type is sd }
		PPV_TLAG : { value = 0.1, type is sd } 
		OMEGA : { parameter = [ETA_CL, ETA_V], value = [0.01], type is corr }
	} # end VARIABILITY
} # end of parameter object 

warfarin_PK_ANALYTIC_mdl = mdlObj {
	IDV { T }

	VARIABILITY_LEVELS{
		ID : { level=2, type is parameter }
		DV : { level=1, type is observation }
   }

	COVARIATES{
		WT
		logtWT = ln(WT/70)
	}

	STRUCTURAL_PARAMETERS {
		POP_CL
		POP_V
		POP_KA
		POP_TLAG
		BETA_CL_WT
		BETA_V_WT
		RUV_PROP
		RUV_ADD
	} # end STRUCTURAL_PARAMETERS
	
	VARIABILITY_PARAMETERS {
		PPV_CL
		PPV_V
		PPV_KA
		PPV_TLAG
	} # end VARIABILITY_PARAMETERS 
	
	RANDOM_VARIABLE_DEFINITION(level=ID) {
		ETA_CL ~ Normal(mean = 0, sd = PPV_CL)
		ETA_V ~ Normal(mean = 0, sd = PPV_V)
		ETA_KA ~ Normal(mean = 0, sd = PPV_KA)
		ETA_TLAG ~ Normal(mean = 0, sd = PPV_TLAG)
	} # end RANDOM_VARIABLE_DEFINITION 
	
	INDIVIDUAL_VARIABLES { # This maps to the "Type 3" individual parameter definition in PharmML
	    ln(CL) = linear( pop = POP_CL, trans is ln, fixEff = [{ coeff=BETA_CL_WT , cov = logtWT }], ranEff = [ETA_CL] )
	    ln(V) = linear( pop = POP_V, trans is ln, fixEff =  [{coeff=BETA_V_WT , cov = logtWT }] , ranEff = [ETA_V] )
	    ln(KA) = linear( pop = POP_KA, trans is ln, ranEff = [ETA_KA] )
	    ln(TLAG) = linear( pop = POP_TLAG, trans is ln, ranEff = [ETA_TLAG] ) 
	} # end INDIVIDUAL_VARIABLES
	
	MODEL_PREDICTION {
	    D # dosing variable
	    DT # dose time variable
	    k = CL/V
	    CC = if ( T - DT < TLAG) then 0
	         else (D/V) * KA/(KA-k) * (exp(-k * (T -DT-TLAG))- exp(-KA*(T-DT-TLAG)) )
	} # end MODEL_PREDICTION

	RANDOM_VARIABLE_DEFINITION(level=DV){
		EPS_Y ~ Normal(mean = 0, var = 1) # This maps the standard error model in PharmML. The error model is predefined. 
	}

	OBSERVATION {
	    Y = combinedError1(additive = RUV_ADD, proportional = RUV_PROP, eps = EPS_Y, prediction = CC ) 
	} # end OBSERVATION
} # end of model object

warfarin_PK_ODE_task = taskObj {
	ESTIMATE{ 
		set algo is saem
}
} # end of task object

warfarin_PK_ODE_mog = mogObj {
	OBJECTS{
		warfarin_PK_analytic_DerivedDT_dat : { type is dataObj }
		warfarin_PK_ODE_par : { type is parObj }
		warfarin_PK_ANALYTIC_mdl : { type is mdlObj }
		warfarin_PK_ODE_task : { type is taskObj }
	}
}