package eu.ddmore.converter.mdl2pharmml

import eu.ddmore.converter.mdlprinting.MdlPrinter
import org.ddmore.mdl.mdl.MOGObject

import static eu.ddmore.converter.mdl2pharmml.Constants.*
import java.io.File

class Mdl2PharmML{

	//Convert one MOG to PharmML
  	def convertToPharmML(MOGObject mog, String filePath) {
  	    val fileName = new File(filePath).getName();
  		val mdlPrinter = MdlPrinter::getInstance();
		val ReferenceResolver resolver = new ReferenceResolver(mog); 
		val MathPrinter mathPrinter = new MathPrinter(resolver);
		val functPrinter = new FunctionDefinitionPrinter(); 
		val mdPrinter = new ModelDefinitionPrinter(mathPrinter, resolver);  		
		val msPrinter = new ModellingStepsPrinter(mathPrinter, resolver);  		
//		val tdPrinter = new TrialDesignPrinter(mathPrinter, resolver);
		
		'''
		<?xml version="1.0" encoding="UTF-8"?>
		<PharmML 
			«print_PharmML_NameSpaces»
			writtenVersion="«writtenVersion»">
			<ct:Name>"«fileName» - generated by MDL2PharmML v.«mdlPrinter.mdlVersion»"</ct:Name>
			<IndependentVariable symbId="«resolver.independentVar»"/>
			«functPrinter.print_FunctionDefinitions(mog)»	
			«mdPrinter.print_mdef_ModelDefinition(mog)»
«««			«tdPrinter.print_design_TrialDesign(mog)»
			«msPrinter.print_msteps_ModellingSteps(mog)»
		</PharmML>
		'''			
	}
	
//	def extractTargetCode(MOGObject mog){
//		var objects = Utils::getMOGObjects(mog);
//		var res = "";
//		for (o: objects){
//			var tcbIterator = o.eAllContents;
//		   	while (tcbIterator.hasNext) {
//				var container = tcbIterator.next;
//				if (container instanceof TargetBlock) {
//					var s = container as TargetBlock;
//					res  = res + s.extractExternalCode;
//				}
//			}
//		}
//		return res;
//	}
//	
//	def extractTargetCode(MclObject obj){
//		var tcbIterator = obj.eAllContents;
//		var res = "";
//	   	while (tcbIterator.hasNext) {
//			var container = tcbIterator.next;
//			if (container instanceof TargetBlock) {
//				var s = container as TargetBlock;
//				res  = res + s.extractExternalCode;
//			}
//		}
//		return res;
//	}
	
//	protected def extractExternalCode(TargetBlock s){
//		val mdlPrinter = MdlPrinter::getInstance();
//    	'''
//			<targetBlock>
//				«FOR a: s.statements»
//					<«a.propertyName.name»>
//						«mdlPrinter.toStr(a.expression)»
//					</«a.propertyName.name»>
//			   	«ENDFOR»
//				<code>
//					«mdlPrinter.toStr(s)»
//				</code>
//			</targetBlock>	
//    	'''
//	}
	
	//+ Print PharmML namespaces
	protected def print_PharmML_NameSpaces()
		'''
		xmlns:xsi="«xsi»" 
		xmlns="«xmlns_pharmML»"
		xsi:schemaLocation="«xsi_schemaLocation»"
		xmlns:math="«xmlns_math»"
		xmlns:ct="«xmlns_ct»"
		xmlns:ds="«xmlns_ds»"
		xmlns:mdef="«xmlns_mdef»"
		xmlns:mstep="«xmlns_mstep»"
		xmlns:design="«xmlns_design»"
		'''
}