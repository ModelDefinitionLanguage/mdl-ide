package eu.ddmore.converter.mdl2pharmml

import eu.ddmore.mdl.mdl.MclObject
import eu.ddmore.mdl.utils.MclUtils
import eu.ddmore.mdl.validation.MogValidator

import static eu.ddmore.converter.mdl2pharmml.Constants.*

class Mdl2Pharmml {
	static val mdlVersion = "6.0"
	
	extension MogValidator mv = new MogValidator
	extension MclUtils mu = new MclUtils
	extension ModelDefinitionPrinter mdp = new ModelDefinitionPrinter
	extension ModellingStepsPrinter msp = new ModellingStepsPrinter
	extension FunctionDefinitionPrinter fdp = new FunctionDefinitionPrinter

  	def convertToPharmML(MclObject mog) {
  		mog.buildMog
//  	    val fileName = new File(filePath).getName();
//		val functPrinter = new FunctionDefinitionPrinter(); 
//		val mdPrinter = new ModelDefinitionPrinter(mdlObj);  		
//		val msPrinter = new ModellingStepsPrinter(mathPrinter, resolver);  		
//		val tdPrinter = new TrialDesignPrinter(mathPrinter, resolver);
		
		'''
		<?xml version="1.0" encoding="UTF-8"?>
		<PharmML 
			«print_PharmML_NameSpaces»
			writtenVersion="«writtenVersion»">
			<ct:Name>"generated by MDL2PharmML v.«mdlVersion»"</ct:Name>
			<IndependentVariable symbId="«mdlObj.mdlIdv.name»"/>
			«mv.mdlObj.print_FunctionDefinitions»	
			«mv.mdlObj.print_mdef_ModelDefinition»
«««			«tdPrinter.print_design_TrialDesign(mog)»
			«mv.print_msteps_ModellingSteps»
		</PharmML>
		'''			
	}

	//+ Print PharmML namespaces
	protected def print_PharmML_NameSpaces()
		'''
		xmlns:xsi="«xsi»" 
		xmlns="«xmlns_pharmML»"
		xsi:schemaLocation="«xsi_schemaLocation»"
		xmlns:math="«xmlns_math»"
		xmlns:ct="«xmlns_ct»"
		xmlns:ds="«xmlns_ds»"
		xmlns:mdef="«xmlns_mdef»"
		xmlns:mstep="«xmlns_mstep»"
		xmlns:design="«xmlns_design»"
		'''
}