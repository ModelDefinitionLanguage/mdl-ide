grammar eu.ddmore.mdl.Mdl with org.eclipse.xtext.common.Terminals
generate mdl "http://www.ddmore.eu/mdl/Mdl"

Mcl hidden(WS, ML_COMMENT, SL_COMMENT):
	objects+=MclObject*;

MclObject returns MclObject:
	name=ID '=' mdlObjType=ID blkArgs=BlockArguments BEGIN blocks += BlockStatement* END;


BlockStatement:
	identifier = ID blkArgs=BlockArguments body=(BlockStatementBody|BlockTextBody)
;

BlockStatementBody returns BlockBody:
	{BlockStatementBody}BEGIN
		statements+=Statement*
	END
;

BlockTextBody returns BlockBody:
	{BlockTextBody}text=TEXT_BLOCK
;

BlockArguments:
	{BlockArguments} ('(' args+=BlockArgument (',' args+=BlockArgument)* ')')?
;

BlockArgument:
	ValuePair|ForwardDeclaration
;


ForwardDeclaration:
	{ForwardDeclaration}declType=ID name=ID
;

Statement:
	EquationDefinition|TransformedDefinition|ListDefinition|
	RandomVariableDefinition|BlockStatement|PropertyStatement|
	AnonymousListStatement|EnumerationDefinition
;


EstimateRange returns Expression:
	{EstimateRange}initial=Number limit=LimitDefn? fixed?=FIXED |
	{EstimateRange}initial=Number limit=LimitDefn
;

LimitDefn:
	{LimitDefn}LIMIT '(' low=Number? ','  high=Number? ')'	
;

SymbolDefinition:
	EquationDefinition | ListDefinition| ForwardDeclaration | RandomVariableDefinition | TransformedDefinition|
	  EnumerationDefinition
;

EquationDefinition:
	name = ID ("=" expression = Expression)? ';'?
;

EnumerationDefinition:
	name = ID  catDefn=CategoricalDefinitionExpr ';'?
;

TransformedDefinition:
	transform = ID '(' name=ID (',' idv=[SymbolDefinition|ID] )? ')' '=' expression=Expression ';'?
;

RandomVariableDefinition:
	name = ID "~" distn = BuiltinFunctionCall ';'?
;

ListDefinition:
	name = ID ":" list = AttributeList ';'?
;

AnonymousListStatement:
	':' ':' list = AttributeList ';'?
;


PropertyStatement:
	 SET properties+=ValuePair (',' properties+=ValuePair)* ';'?
;

CategoricalDefinitionExpr returns Expression:
	{CategoricalDefinitionExpr} WITH BEGIN categories += CategoryDefinition (=>',' categories += CategoryDefinition)* END  
;

CategoryDefinition:
	name = ID (WHEN whenValue=Expression)?
;

AttributeList:
	BEGIN attributes += Attribute (=> ',' attributes += Attribute)*  END
;

Attribute:
	ValuePair
;

ValuePair:
	{ValuePair}argumentName = AttributeName ("=" expression = Expression
								| IS expression = EnumExpression (catDefn=CategoricalDefinitionExpr)?
								| expression=CategoricalDefinitionExpr )
//								| '=' expression = MappingExpression)
;

AttributeName:
	ID
;

EnumExpression returns Expression:
	{EnumExpression}enumValue=ID
;

MappingExpression returns Expression:
	{MappingExpression}(BEGIN
		(attLists+=MappingList (',' attLists+=MappingList)* |
			attList+=MappingPair (',' attLists+=MappingPair)*
		)
	END)
;

CategoryMappingExpression returns Expression:
	{CategoryMappingExpression}(BEGIN
		attLists+=CategoryMapping (',' attLists+=CategoryMapping)*
	END)
;

CategoryMapping:
	CategoryReference WHEN whenValue=Expression
;

MappingPair:
	leftOperand=OrExpression (FROM srcColumn=SymbolReference)?  AS rightOperand=OrExpression
;

MappingList:
	BEGIN attributes += ValuePair (=> ',' attributes += ValuePair)*  END
;

Expression:
	OrExpression
;

OrExpression returns Expression:
	AndExpression (=>({OrExpression.leftOperand=current} feature=OpOr) rightOperand=AndExpression)*;

OpOr:
	'||';

AndExpression returns Expression:
	EqualityExpression (=>({AndExpression.leftOperand=current} feature=OpAnd) rightOperand=EqualityExpression)*;

OpAnd:
	'&&';

EqualityExpression returns Expression:
	RelationalExpression (=>({EqualityExpression.leftOperand=current} feature=OpEquality)
	rightOperand=RelationalExpression)*;

OpEquality:
	'==' | '!=' ;

RelationalExpression returns Expression:
	AdditiveExpression
	(
	 =>({RelationalExpression.leftOperand=current} feature=OpCompare) rightOperand=AdditiveExpression)*;

OpCompare:
	'>=' | '<=' | '>' | '<' ;

AdditiveExpression returns Expression:
	MultiplicativeExpression (=>({AdditiveExpression.leftOperand=current} feature=OpAdd)
	rightOperand=MultiplicativeExpression)*;

OpAdd:
	'+' | '-';

MultiplicativeExpression returns Expression:
	UnaryExpression (=>({MultiplicativeExpression.leftOperand=current} feature=OpMulti) rightOperand=UnaryExpression)*;

OpMulti:
	'*' | '^' | '/' | '%';

UnaryExpression returns Expression:
	{UnaryExpression} feature=OpUnary operand=PrimaryExpression
	| PrimaryExpression
	;

OpUnary:
	"!" | "-" | "+";

PrimaryExpression returns Expression:
	Literal
	| SymbolReference 
	| CategoryReference
	| CategoryMappingExpression
	| MappingExpression
	| BuiltinFunctionCall
	| WhenExpression
	| EstimateRange
	| ParExpression
	;


ParExpression returns Expression:
	{ParExpression} '(' expr=Expression ')'
;

WhenExpression returns Expression:
	 {WhenExpression}
	 	when+=WhenClause
	 	(=> when+=ElifClause)*
		(=>ELSE other=Expression)?
	;

WhenClause:
	IF '(' cond=Expression ')' => THEN value=Expression
;

ElifClause:
	ELSEIF '(' cond=Expression ')' => THEN value=Expression
;

Literal returns Expression:
	NumberLiteral |
	StringLiteral |
	BooleanLiteral |
	VectorLiteral
;

SymbolReference:
	{SymbolReference} ref=[SymbolDefinition|ID]
;


CategoryReference:
	{CategoryReference} ref=[CategoryDefinition|QualifiedName]
;


BuiltinFunctionCall returns Expression:
	{BuiltinFunctionCall} func=ID '(' argList=(UnnamedFuncArguments	| NamedFuncArguments)? ')'
;

NamedFuncArguments returns FuncAgument:
	{NamedFuncArguments} arguments += ValuePair (=> ',' arguments += ValuePair)* 
;

UnnamedFuncArguments returns FuncAgument:
	{UnnamedFuncArguments} args+=Expression (=>',' args+=Expression)* 
;

BooleanLiteral returns Expression :
	{BooleanLiteral} ('false' | isTrue?='true');

NumberLiteral returns Expression :
	{NumberLiteral} value=(Number|CONSTANT);

StringLiteral returns Expression:
	{StringLiteral} value=STRING;

Number hidden():
	(INTEGER | FLOAT) 
	;
	

VectorLiteral returns Expression:
	{VectorLiteral} '[' expression = VectorContent ']'
;	

VectorContent:
		expressions += Expression (=> ',' expressions += Expression)*
;

QualifiedName:
	ID ('.' ID)
;


terminal CONSTANT:
	'INF'
;

//terminal BLOCKID:
//	'MODEL_PREDICTION'|'DEQ'|'MODEL_INPUT_VARIABLES'|'RANDOM_VARIABLES'|'DECLARED_VARIABLES'|
//	'INDIVIDUAL_VARIABLES'|'COVARIATES'|'ESTIMATE'|'SIMULATE'|'OPTIMISATION'|'DATA_INPUT_VARIABLES'|
//	'DATA_DERIVED_VARIABLES'|'SOURCE'|'VARIABILITY'|'STRUCTURAL_PARAMETERS'|
//	'VARIABILITY_LEVELS'|'VARIABILITY_PARAMETERS'|'STRUCTURAL'|'OBJECTS'|
//	'GROUP_VARIABLES'|'RANDOM_VARIABLE_DEFINITION'|'COMPARTMENT'|'OBSERVATION'|
//	'IDV'|'OPTIMISE'
//;


terminal FROM: 'from';

terminal IS: 'is';

terminal AS: 'as';

terminal SET: 'set';

terminal IF: 'if';

terminal THEN: 'then';

terminal ELSEIF: 'elseif';

terminal ELSE: 'else';

terminal WITH: 'with';

terminal WHEN: 'when';

terminal LIMIT: 'limit';

terminal FIXED: 'fixed';

terminal STRING:
	'"' (ESCAPE_SEQUENCE | !('\\' | '"'))* '"';

terminal TEXT_BLOCK:
	'<<' -> '>>';

terminal INTEGER:
	SIGN?('0' | '1'..'9' '0'..'9'*);
	
terminal FLOAT: 
	SIGN?'0'..'9' + '.' '0'..'9'* EXPONENT?
    | SIGN?'.' '0'..'9'+ EXPONENT?
    | SIGN?'0'..'9'+ EXPONENT
    | SIGN?('0'..'9')
    ;

terminal fragment SIGN:
	('+'|'-')
;

terminal fragment ESCAPE_SEQUENCE:
	'\\' ('b' | 't' | 'n' | 'f' | 'r' | '\"' | '\'' | '\\')
	| UNICODE_ESCAPE
	| OCTAL_ESCAPE;

terminal fragment OCTAL_ESCAPE:
	  '\\' ('0'..'3') ('0'..'7') ('0'..'7')
	| '\\' ('0'..'7') ('0'..'7')
	| '\\' ('0'..'7');

terminal fragment UNICODE_ESCAPE:
	'\\' 'u' HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT;

terminal fragment HEXDIGIT:
	('0'..'9' | 'a'..'f' | 'A'..'F');

terminal fragment EXPONENT
	: ('e'|'E'|'d'|'D') ('+'|'-')?('0'..'9')+;

terminal SL_COMMENT : ('#') !('\n'|'\r')* ('\r'? '\n')? ;

terminal ML_COMMENT : '/#' -> '#/';

terminal BEGIN: '{';

terminal END: '}' ;

terminal ID: ('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'| '0'..'9')*;


