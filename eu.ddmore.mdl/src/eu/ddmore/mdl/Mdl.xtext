grammar eu.ddmore.mdl.Mdl
generate mdl "http://eu.ddmore.mdl/mdl/Mdl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://eu.ddmore.mdllib/mdllib/MdlLib" as lib

Mcl hidden(WS, ML_COMMENT, SL_COMMENT):
	objects+=MclObject*;

MclObject returns MclObject:
	name=ID ASSIGN objId=[lib::ObjectDefinition] blkArgs=BlockArguments BEGIN blocks += BlockStatement* END;


BlockStatement:
	blkId = [lib::BlockDefinition] blkArgs=BlockArguments body=(BlockStatementBody|BlockTextBody)
;

BlockStatementBody returns BlockBody:
	{BlockStatementBody}BEGIN
		statements+=Statement*
	END
;

BlockTextBody returns BlockBody:
	{BlockTextBody}text=TEXT_BLOCK
;

BlockArguments:
	{BlockArguments} ('(' args+=BlockArgument (',' args+=BlockArgument)* ')')?
;

BlockArgument:
	ValuePair
;


Statement:
	EquationTypeDefinition|ListDefinition|
	RandomVariableDefinition|BlockStatement|AnonymousListStatement|
	EnumerationDefinition|PropertyStatement //|
//	CategoricalProbabilityAssign//|UserFunctionDefinition
;


MdlSymbolDefinition returns lib::SymbolDefinition:
	EquationDefinition | ListDefinition | RandomVariableDefinition | TransformedDefinition|
	EnumerationDefinition
;


FuncUnnamedArgDefns returns lib::UnnamedFuncArgs:
	{lib::UnnamedFuncArgs} arguments+=FuncArgumentDefinition (',' arguments+=FuncArgumentDefinition)*
;

FuncArgumentDefinition returns lib::FuncArgumentDefinition:
	{lib::FuncArgumentDefinition} name=ID typeSpec=TypeSpec 
;

EquationTypeDefinition:
	EquationDefinition|TransformedDefinition
;

EquationDefinition returns EquationTypeDefinition:
	{EquationDefinition} name = ID typeSpec=TypeSpec? (ASSIGN expression = Expression)? ';'?
;

FunctionSpec returns lib::FunctionSpec:
	{lib::FunctionSpec}  '(' argument=FuncUnnamedArgDefns? ')' returnType=TypeSpec IS body=Expression
;


TransformedDefinition returns EquationTypeDefinition:
	{TransformedDefinition} transform = [lib::FunctionDefnBody] '(' name=ID ')' ASSIGN expression=Expression ';'?
;

RandomVariableDefinition:
	(name = ID|  transform = ID '(' name=ID ')') RANDOM_ASSIGN distn = Expression ';'?
//	(name = ID|  transform = ID '(' name=ID ')') 
//		(WITH BEGIN catDefns+=CategoryValueDefinitionNoMapping (',' catDefns+=CategoryValueDefinitionNoMapping)* END)? RANDOM_ASSIGN distn = Expression ';'?
;

TypeSpec returns lib::TypeSpec:
	{lib::TypeSpec} ANONYMOUS_PREFIX =>typeName = [lib::TypeDefinition|ID] ('[' elementType=TypeSpec ']'|'[[' cellType=TypeSpec ']]'| functionSpec=FunctionSpec)?
;

EnumerationDefinition:
	name = ID  catDefn=CategoricalDefinitionExpr (RANDOM_ASSIGN distn = Expression)? ';'?
;

//CategoricalProbabilityAssign:
//	(probFunc=ProbabilityFunction ASSIGN expression=Expression  |
//	transform = ID '(' probFunc=ProbabilityFunction ')' ASSIGN expression=Expression) ';'?
//;

//ProbabilityFunction:
//	probFunc = 'P' '(' catRef=SymbolReference relOp=('=='|'<='|'>='|'<'|'>') catValRef=CategoryValueReference ')'
//;


ListDefinition:
	name = ID LIST_ASSIGN list = (AttributeList|ListPiecewiseExpression|ListIfExpression) ';'?
;

AbstractAttributeList:
	AttributeList|ListPiecewiseExpression|ListIfExpression
;

ListPiecewiseExpression:
	{ListPiecewiseExpression} 'piecewise' BEGIN BEGIN when+=ListPWClause (=>';' when+=ListPWClause)* (';' 'otherwise' otherwise=AttributeList )?  END END
;

ListPWClause:
	{ListPWClause} value=AttributeList WHEN cond=Expression
;

ListIfExpression:
	 {ListIfExpression}
	 	ifelseClause+=ListIfClause
	 	(=> ifelseClause+=ListElifClause)*
		(=>elseClause=ListElseClause)?
	;

ListIfExprPart:
	ListIfClause | ListElifClause
;

ListIfClause returns ListIfExprPart:
	{ListIfClause} IF '(' cond=Expression ')' => THEN value=AttributeList
;

ListElifClause returns ListIfExprPart:
	{ListElifClause} ELSEIF '(' cond=Expression ')' => THEN value=AttributeList
;

ListElseClause:
	{ListElseClause} ELSE value=AttributeList
;



AnonymousListStatement:
	ANONYMOUS_PREFIX list = AttributeList ';'?
;

PropertyStatement:
	SET properties += ValuePair (=> ',' properties += ValuePair)* ';'?
;


CategoricalDefinitionExpr:
	{CategoricalDefinitionExpr} WITH BEGIN categories += CategoryValueDefinition (=>',' categories += CategoryValueDefinition)* END
//		(ASSIGN expression = Expression)?
;


//CategoryValueDefinition:
//	CategoryValueDefinitionNoMapping | CategoryValueDefinitionWithMapping
//;

//CategoryValueDefinitionNoMapping:
//	{CategoryValueDefinitionNoMapping}name = ID
//;


//CategoryValueDefinitionWithMapping:
CategoryValueDefinition:
	{CategoryValueDefinition}name = ID (WHEN mappedTo=Expression)?
//	{CategoryValueDefinitionWithMapping}name = ID (WHEN mappedTo=Expression)?
;

AttributeList:
	{AttributeList} BEGIN attributes += ValuePair (=> ',' attributes += ValuePair)*  END
;

ValuePair:
	(AssignPair|EnumPair)
;

AssignPair:
	argumentName = AttributeName ASSIGN expression = Expression
	
;

EnumPair:
	argumentName = AttributeName IS expression = EnumExpression
	
;

AttributeName:
	ID
;

EnumExpression returns lib::Expression:
	{EnumExpression}enumValue=ID  (catDefn=CategoricalDefinitionExpr)?
;

MappingExpression returns lib::Expression:
	{MappingExpression} (BEGIN
		(
			attList+=MappingPair (',' attList+=MappingPair)*
		)
	END)
;

SubListExpression returns lib::Expression:
	{SubListExpression} BEGIN attributes += ValuePair (=> ',' attributes += ValuePair)*  END 
;

CatValRefMappingExpression returns lib::Expression:
	{CatValRefMappingExpression}(BEGIN
		attLists+=CatValRefMapping (',' attLists+=CatValRefMapping)*
	END)
;

CatValRefMapping:
	catRef=CategoryValueReference WHEN mappedTo=Expression
;

MappingPair:
	leftOperand=OrExpression IN srcColumn=SymbolReference  AS rightOperand=OrExpression
;

Expression returns lib::Expression:
	OrExpression
;

OrExpression returns lib::Expression:
	AndExpression (=>({OrExpression.leftOperand=current} feature=OpOr) rightOperand=AndExpression)*;

OpOr:
	'||';

AndExpression returns lib::Expression:
	EqualityExpression (=>({AndExpression.leftOperand=current} feature=OpAnd) rightOperand=EqualityExpression)*;

OpAnd:
	'&&';

EqualityExpression returns lib::Expression:
	RelationalExpression (=>({EqualityExpression.leftOperand=current} feature=OpEquality)
	rightOperand=RelationalExpression)*;

OpEquality:
	'==' | '!=' ;

RelationalExpression returns lib::Expression:
	AdditiveExpression
	(
	 =>({RelationalExpression.leftOperand=current} feature=OpCompare) rightOperand=AdditiveExpression)*;

OpCompare:
	'>=' | '<=' | '>' | '<' ;

AdditiveExpression returns lib::Expression:
	MultiplicativeExpression (=>({AdditiveExpression.leftOperand=current} feature=OpAdd)
	rightOperand=MultiplicativeExpression)*;

OpAdd:
	'+' | '-';

MultiplicativeExpression returns lib::Expression:
	PowerExpression (=>({MultiplicativeExpression.leftOperand=current} feature=OpMulti) rightOperand=PowerExpression)*;

OpMulti:
	'*' | '/' | '%';

PowerExpression returns lib::Expression:
	UnaryExpression (=>({PowerExpression.leftOperand=current} feature=OpPow) rightOperand=UnaryExpression)*;

OpPow:
	'^';

UnaryExpression returns lib::Expression:
	{UnaryExpression} feature=OpUnary operand=PrimaryExpression
	| PrimaryExpression
	;

OpUnary:
	"!" | "-" | "+";

PrimaryExpression returns lib::Expression:
	Literal
	| SymbolReference
	| FunctionReference
	| CategoryValueReference
	| CatValRefMappingExpression
	| MappingExpression
	| IfExpression
	| PiecewiseExpression
	| ParExpression
	| SubListExpression
	;


ParExpression returns lib::Expression:
	{ParExpression} '(' expr=Expression ')'
;

IfExpression returns lib::Expression:
	 {IfExpression}
	 	ifelseClause+=IfClause
	 	(=> ifelseClause+=ElifClause)*
		(=>elseClause=ElseClause)?
	;

PiecewiseExpression returns lib::Expression:
	{PiecewiseExpression} 'piecewise' BEGIN BEGIN when+=PWClause (=>';' when+=PWClause)* (';' 'otherwise' otherwise=Expression )?  END END
;

PWClause:
	value=Expression WHEN cond=Expression
;

IfExprPart:
	IfClause | ElifClause
;

IfClause returns IfExprPart:
	{IfClause} IF '(' cond=Expression ')' => THEN value=Expression
;

ElifClause returns IfExprPart:
	{ElifClause} ELSEIF '(' cond=Expression ')' => THEN value=Expression
;

ElseClause:
	{ElseClause} ELSE value=Expression
;

Literal returns lib::Expression:
	RealLiteral |
	ConstantLiteral|
	IntegerLiteral |
	StringLiteral |
	BooleanLiteral |
	VectorLiteral |
	MatrixLiteral
;

SymbolReference:
	{SymbolReference} ref=[lib::SymbolDefinition|ID] ('[' indexExpr = IndexSpec ']'|'(' argList=(UnnamedFuncArguments	| NamedFuncArguments)? ')')?
;

FunctionReference:
	{FunctionReference} '&'ref=[lib::SymbolDefinition]
;

IndexSpec:
		{IndexSpec} rowIdx = IndexRange? (',' colIdx = IndexRange?)? 
			;

IndexRange:
		{IndexRange} (
			begin=Expression (LIST_ASSIGN end=Expression)?
		)
		;

CategoryValueReference:
	{CategoryValueReference} ref=[CategoryValueDefinition|QualifiedName]
;


NamedFuncArguments returns FuncArguments:
	{NamedFuncArguments} arguments += ValuePair (=> ',' arguments += ValuePair)* 
;

UnnamedFuncArguments returns FuncArguments:
	{UnnamedFuncArguments} args+=UnnamedArgument (=>',' args+=UnnamedArgument)* 
;

UnnamedArgument:
	{UnnamedArgument} argument=Expression
;


BooleanLiteral returns lib::Expression:
	{BooleanLiteral} (FALSE | isTrue?=TRUE);


RealLiteral returns lib::Expression:
	{RealLiteral} value=FLOAT;

ConstantLiteral returns lib::Expression:
	{ConstantLiteral} value=CONSTANT;

IntegerLiteral returns lib::Expression:
	{IntegerLiteral} value=INTEGER;

StringLiteral returns lib::Expression:
	{StringLiteral} value=STRING;


MatrixLiteral returns lib::Expression:
	{MatrixLiteral} '[[' (rows += MatrixRow (=> ';' rows += MatrixRow)*)? ']]'
;	

MatrixRow returns lib::Expression:
	{MatrixRow} cells += MatrixElement (=> ',' cells += MatrixElement)*
;

MatrixElement returns lib::Expression:
	{MatrixElement} cell=Expression
;

VectorLiteral returns lib::Expression:
	{VectorLiteral} '[' (expressions += VectorElement (=> ',' expressions += VectorElement)*)? ']'
;	

VectorElement returns lib::Expression:
	{VectorElement} element=Expression
;

QualifiedName:
	ID ('.' ID)
;


terminal CONSTANT:
	'inf'|'pi'|'exponentiale'
;

//terminal TYPE_NAME:
//	'::' + ('A'..'Z')('a'..'z'|'A'..'Z'| '0'..'9')+
//;

terminal SET: 'set';

terminal IN: 'in';

terminal IS: 'is';

terminal ASSIGN: '=';

terminal RANDOM_ASSIGN : '~';

terminal LIST_ASSIGN : ':';

terminal ANONYMOUS_PREFIX : '::';

terminal AS: 'as';

terminal IF: 'if';

terminal THEN: 'then';

terminal ELSEIF: 'elseif';

terminal ELSE: 'else';

terminal WITH: 'withCategories';

terminal WHEN: 'when';

terminal TRUE: 'true';

terminal FALSE: 'false';

terminal ORDERED: 'ordered';

terminal STRING:
	'"' (ESCAPE_SEQUENCE | !('\\' | '"'))* '"';

terminal TEXT_BLOCK:
	'<<' -> '>>';

terminal INTEGER returns ecore::EInt:
	('0' | '1'..'9' '0'..'9'*);
	
terminal FLOAT returns ecore::EDouble: 
	'0'..'9' + '.' '0'..'9'* EXPONENT?
    | '.' '0'..'9'+ EXPONENT?
    | '0'..'9'+ EXPONENT
    | ('0'..'9')
    ;

terminal fragment SIGN:
	('+'|'-')
;

terminal fragment ESCAPE_SEQUENCE:
	'\\' ('b' | 't' | 'n' | 'f' | 'r' | '\"' | '\'' | '\\')
	| UNICODE_ESCAPE
	| OCTAL_ESCAPE;

terminal fragment OCTAL_ESCAPE:
	  '\\' ('0'..'3') ('0'..'7') ('0'..'7')
	| '\\' ('0'..'7') ('0'..'7')
	| '\\' ('0'..'7');

terminal fragment UNICODE_ESCAPE:
	'\\' 'u' HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT;

terminal fragment HEXDIGIT:
	('0'..'9' | 'a'..'f' | 'A'..'F');

terminal fragment EXPONENT
	: ('e'|'E'|'d'|'D') ('+'|'-')?('0'..'9')+;

terminal SL_COMMENT : ('#') !('\n'|'\r')* ('\r'? '\n')? ;

terminal ML_COMMENT : '/#' -> '#/';

terminal BEGIN: '{';

terminal END: '}' ;

terminal ID: ('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'| '0'..'9')*;

terminal WS: (' '|'\t'|'\r'|'\n')+; 
