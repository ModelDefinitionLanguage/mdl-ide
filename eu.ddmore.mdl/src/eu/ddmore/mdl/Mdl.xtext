grammar eu.ddmore.mdl.Mdl with org.eclipse.xtext.common.Terminals
generate mdl "http://www.ddmore.eu/mdl/Mdl"

Mcl hidden(WS, ML_COMMENT, SL_COMMENT):
	objects+=MclObject*;

MclObject returns MclObject:
	ModelObject | 
	ParameterObject | 
	DataObject | 
	TaskObject |
	MOGObject;
	
ModelObject returns MclObject: 
	{ModelObject} (name=ID '=' 'mdlobj' '(' type=ID idv=ReferenceDeclaration ')' BEGIN blocks += ModelObjectBlock* END);

ParameterObject returns MclObject:
	{ParameterObject} (name=ID '=' 'parobj' BEGIN blocks += ParameterObjectBlock* END);
	
DataObject returns MclObject:
	{DataObject} (name=ID '=' 'dataobj' BEGIN blocks += DataObjectBlock* END);

TaskObject returns MclObject:
	{TaskObject} (name=ID '=' 'taskobj' BEGIN blocks += TaskObjectBlock* END);
	
MOGObject returns MclObject:
	{MOGObject} (name=ID '=' 'mogobj' BEGIN blocks += MOGObjectBlock* END);
	
//////////////////////////////////////////////////////////
//Model Object
//////////////////////////////////////////////////////////

ObjectBlock:
	ModelObjectBlock|
	DataObjectBlock |
	ParameterObjectBlock |
	TaskObjectBlock
;

ModelObjectBlock returns ObjectBlock: 
	IndividualVariablesBlock | 
	ModelPredictionBlock | 
	RandomVariableDefinitionBlock |
	VariabilityDefinitionBlock |
	CovariateDefinitionBlock |
	StructuralParametersBlock |
	VariabilityParametersBlock |
	GroupVariablesBlock | 
	ObservationBlock 
;

IndividualVariablesBlock returns ModelObjectBlock:
	identifier = 'INDIVIDUAL_VARIABLES'
	BEGIN statements += (EquationDeclaration|TransformedDeclaration)* END  
;

ModelPredictionBlock returns ModelObjectBlock:
	identifier = 'MODEL_PREDICTION' 
	BEGIN statements += ModelPredictionBlockStatement* END
;

RandomVariableDefinitionBlock returns ModelObjectBlock:
	identifier = 'RANDOM_VARIABLE_DEFINITION' '(' argument = Argument ')'
	BEGIN statements += RandomVariableDeclaration* END 
;

VariabilityDefinitionBlock returns ModelObjectBlock:
  	identifier = 'VARIABILITY_LEVELS' 
  	BEGIN statements += ListDeclaration* END 
;

CovariateDefinitionBlock returns ModelObjectBlock:
  	identifier = 'COVARIATES' 
  	BEGIN statements += (EquationDeclaration|ListDeclaration)* END 
;


StructuralParametersBlock returns ModelObjectBlock:
  identifier = 'STRUCTURAL_PARAMETERS'
  BEGIN statements += EquationDeclaration* END 
; 

VariabilityParametersBlock returns ModelObjectBlock:
  identifier = 'VARIABILITY_PARAMETERS'
  BEGIN statements += EquationDeclaration* END 
;

GroupVariablesBlock returns ModelObjectBlock:
	identifier = 'GROUP_VARIABLES' 
	BEGIN statements += EquationDeclaration* END
;

ObservationBlock returns ModelObjectBlock:
	identifier = 'OBSERVATION'
	BEGIN statements += (EquationDeclaration|TransformedDeclaration)* END  
;

//////////////////////////////////////////////////////////
//Parameter Object
//////////////////////////////////////////////////////////

ParameterObjectBlock returns ObjectBlock:
	DeclaredVariablesBlock |
	StructuralBlock |
	VariabilityBlock
;

StructuralBlock returns ParameterObjectBlock:
	identifier='STRUCTURAL'   
	BEGIN statements += ParameterDeclaration* END 
;

ParameterDeclaration returns ParameterObjectBlock:
	{ParameterDeclaration} name=ID '=' rhs=(EstimateRange|FixedValue)
;

EstimateRange returns Estimate:
	(exclusiveLow ?= '(' | '[') low=Number? ',' initial=Number (',' high=Number)? (exclusiveHigh ?= ')' | ']')
;

FixedValue returns Estimate:
	{FixedValue}Number
;


VariabilityBlock returns ParameterObjectBlock:
	identifier='VARIABILITY' '(' levelArg=Argument ')'
	BEGIN statements += (ParameterDeclaration|ListDeclaration)* END
;

//////////////////////////////////////////////////////////
//Data Object
//////////////////////////////////////////////////////////

DataObjectBlock returns ObjectBlock:
	DataInputBlock |
	DataDerivedBlock |
	DeclaredVariablesBlock |
	SourceBlock
;

DataInputBlock returns DataObjectBlock:
 	identifier='DATA_INPUT_VARIABLES' 
 	BEGIN statements += ListDeclaration* END  
;

DataDerivedBlock returns DataObjectBlock:
 	identifier='DATA_DERIVED_VARIABLES' 
 	BEGIN statements += ListDeclaration* END  	
;

DeclaredVariablesBlock returns ObjectBlock:
 	identifier='DECLARED_VARIABLES' 
 	BEGIN statements += ReferenceDeclaration* END  	
;
 
SourceBlock returns DataObjectBlock:
	identifier='SOURCE' 	
	BEGIN 
		statements += PropertyStatement* 
	END
;

//////////////////////////////////////////////////////////
//Task Object
//////////////////////////////////////////////////////////
 
TaskObjectBlock returns ObjectBlock: 
	EstimateTask |
	SimulateTask 	
;


EstimateTask returns TaskObjectBlock: 
	identifier = 'ESTIMATE' 
	BEGIN statements+=PropertyStatement* END 
;

SimulateTask returns TaskObjectBlock:
	identifier = 'SIMULATE' 
	BEGIN statements += PropertyStatement* END  
;

ModelPredictionBlockStatement: 
	statememts = EquationDeclaration | 
	odeBlock = OdeBlock | 
	pkMacroBlock = PkMacroBlock 
;

PkMacroBlock:
	identifier = 'COMPARTMENT'
	BEGIN statements += PkMacroStatement* END 
;

PkMacroStatement:
	EquationDeclaration | 
	ListDeclaration|
	List
;

OdeBlock:
	identifier = 'DEQ'
	BEGIN variables += (EquationDeclaration|ListDeclaration)* END 
;

//////////////////////////////////////////////////////////
//MOG
//////////////////////////////////////////////////////////
MOGObjectBlock returns ObjectBlock:
	ImportObjectBlock
;

 ImportObjectBlock:
 	identifier = 'OBJECTS'
 	BEGIN objects += ImportObjectStatement* END
 ;
 
 ImportObjectStatement:
 	mdlObjRef = [SymbolDeclaration|ID]
 ;
 

SymbolDeclaration:
	EquationDeclaration | ListDeclaration| ReferenceDeclaration | CategoryDefn | RandomVariableDeclaration | TransformedDeclaration
;

EquationDeclaration:
	name = ID ("=" expression = Expression)? ';'?
;

TransformedDeclaration:
	transfrom = ID '(' name=ID ')' '=' expression=Expression ';'?
;

RandomVariableDeclaration:
	name = ID "~" distn = BuiltinFunction ';'?
;

ListDeclaration:
	name = ID ":" list = List ';'?
;

ReferenceDeclaration:
		name = ID ';'?
;

PropertyStatement returns Argument:
	Argument ';'?
;

VarType:
	categorical = CATEGORICAL '(' categories += CategoryDefn (=> ',' categories += CategoryDefn)* ')' 
;

CategoryDefn:
	name = ID
;

List:
	BEGIN arguments=Arguments END
;

Arguments:
	{Arguments} arguments += Argument (=> ',' arguments += Argument)* 
;

Argument:
	argumentName = AttributeName ("=" (expression = Expression
									|	expression=List
									|	expression=Vector
									|   expression=VarType) 
								| IS expression = EnumExpression)
;

AttributeName:
	ID
;

EnumExpression returns Expression:
	{EnumExpression}ID
;

Expression:
	OrExpression
;

OrExpression returns Expression:
	AndExpression (=>({BinaryOperation.leftOperand=current} feature=OpOr) rightOperand=AndExpression)*;

OpOr:
	'||';

AndExpression returns Expression:
	EqualityExpression (=>({BinaryOperation.leftOperand=current} feature=OpAnd) rightOperand=EqualityExpression)*;

OpAnd:
	'&&';

EqualityExpression returns Expression:
	RelationalExpression (=>({BinaryOperation.leftOperand=current} feature=OpEquality)
	rightOperand=RelationalExpression)*;

OpEquality:
	'==' | '!=' ;

RelationalExpression returns Expression:
	AdditiveExpression
	(
	 =>({BinaryOperation.leftOperand=current} feature=OpCompare) rightOperand=AdditiveExpression)*;

OpCompare:
	'>=' | '<=' | '>' | '<' ;

AdditiveExpression returns Expression:
	MultiplicativeExpression (=>({BinaryOperation.leftOperand=current} feature=OpAdd)
	rightOperand=MultiplicativeExpression)*;

OpAdd:
	'+' | '-';

MultiplicativeExpression returns Expression:
	UnaryOperation (=>({BinaryOperation.leftOperand=current} feature=OpMulti) rightOperand=UnaryOperation)*;

OpMulti:
	'*' | '^' | '/' | '%';

UnaryOperation returns Expression:
	{XUnaryOperation} feature=OpUnary operand=UnaryOperation
	| PrimaryExpression
	;

OpUnary:
	"!" | "-" | "+";

PrimaryExpression returns Expression:
	Literal
	| SymbolReference 
	| UserFunctionCall
	| BuiltinFunction
	| WhenExpression
	| ParExpression
	;


ParExpression returns Expression:
	'(' Expression ')'
;

WhenExpression returns Expression:
	 {XIfExpression}
	 	'when' '(' if+=Expression ')' then+=Expression
	 	(=>',' 'when' '(' if+=Expression ')' then+=Expression)*
		(=>'otherwise' else=Expression)?
	;

Literal returns Expression:
	NumberLiteral |
	StringLiteral |
	BooleanLiteral
;

SymbolReference:
	{SymbolReference} ref=[SymbolDeclaration|ID]
;


UserFunctionCall returns Expression:
	{UserFunctionCall} '&' ref=[SymbolDeclaration|ID] ( =>'(' (args+=Expression (=>',' args+=Expression)*)? ')')
; 

BuiltinFunction returns Expression:
	{BuiltinFunction} func=ID '(' funcArgs+=( UnnamedFuncArguments
							| Arguments)? ')'
;

UnnamedFuncArguments:
	args+=Expression (=>',' args+=Expression)* 
;

BooleanLiteral returns Expression :
	{BooleanLiteral} ('false' | isTrue?='true');

NumberLiteral returns Expression :
	{NumberLiteral} value=(Number|CONSTANT);

StringLiteral returns Expression:
	{StringLiteral} value=STRING;

Number hidden():
	(INTEGER | FLOAT) 
	;
	

Vector:
	'[' expression = VectorExpression ']'
;	

VectorExpression:
		expressions += Expression (=> ',' expressions += Expression)* |
		lists += List (=> ',' lists += List)*
;

terminal CATEGORICAL: 'categorical';

terminal CONSTANT:
	'INF'
;

terminal IS: 'is';


terminal STRING:
	'"' (ESCAPE_SEQUENCE | !('\\' | '"'))* '"';

terminal INTEGER:
	('0' | '1'..'9' '0'..'9'*);
	
terminal FLOAT: 
	'0'..'9' + '.' '0'..'9'* EXPONENT?
    | '.' '0'..'9'+ EXPONENT?
    | '0'..'9'+ EXPONENT
    | ('0'..'9')
    ;

terminal fragment ESCAPE_SEQUENCE:
	'\\' ('b' | 't' | 'n' | 'f' | 'r' | '\"' | '\'' | '\\')
	| UNICODE_ESCAPE
	| OCTAL_ESCAPE;

terminal fragment OCTAL_ESCAPE:
	  '\\' ('0'..'3') ('0'..'7') ('0'..'7')
	| '\\' ('0'..'7') ('0'..'7')
	| '\\' ('0'..'7');

terminal fragment UNICODE_ESCAPE:
	'\\' 'u' HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT;

terminal fragment HEXDIGIT:
	('0'..'9' | 'a'..'f' | 'A'..'F');

terminal fragment EXPONENT
	: ('e'|'E'|'d'|'D') ('+'|'-')?('0'..'9')+;

terminal SL_COMMENT : ('#') !('\n'|'\r')* ('\r'? '\n')? ;

terminal ML_COMMENT : '/#' -> '#/';

terminal BEGIN: '{';

terminal END: '}' ;

terminal ID: ('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'| '0'..'9')*;


