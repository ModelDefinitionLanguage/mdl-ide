/*
 * generated by Xtext
 */
package eu.ddmore.mdl.validation

import eu.ddmore.mdl.mdl.MclObject
import eu.ddmore.mdl.mdl.MdlPackage
import org.eclipse.xtext.validation.Check
import java.util.HashSet

//import org.eclipse.xtext.validation.Check

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class MdlValidator extends AbstractMdlValidator {
	val static MDLOBJ = 'mdlobj'
	val static DATAOBJ = 'dataobj'
	val static TASKOBJ = 'taskobj'
	val static PARAMOBJ = 'paramobj'

	public static val UNKNOWN_BLOCK = "eu.ddmore.mdl.validation.UnknownBlock"
	public static val MANDATORY_BLOCK_MISSING = "eu.ddmore.mdl.validation.MandatoryBlockMissing"


	val static BlkData = #{
		"COVARIATES" -> false, "VARIABILITY_LEVELS" -> true, "STRUCTURAL_PARAMETERS" -> false,
		"VARIABILITY_PARAMETERS" -> false, "RANDOM_VARIABLE_DEFINITION" -> false,
		"INDIVIDUAL_VARIABLES" -> false, "MODEL_PREDICTION" -> false,
		"OBSERVATION" -> false, "GROUP_VARIABLES" -> false
	}

	@Check
	def validateMdlObjects(MclObject mclObject){
		switch(mclObject.mdlObjType){
			case MDLOBJ: mclObject.validateMdlObject
		}
	}
	
	def validateMdlObject(MclObject it){
		validateMdlObjBlocks
	}
	
	
//	def validateMdlObjArguments(MclObject it){
//		blkArgs.args.forEach[  ]
//	}
	

	def validateMdlObjBlocks(MclObject it){
		// map of just the mandatory blocks
		val mandatoryBlock = new HashSet<String>(BlkData.filter[blk, mand|mand == true].keySet)
		// check if expected blocks present
		for(blk : blocks){
			if(!BlkData.containsKey(blk.identifier)){
				error("unrecognised block in mdlobj '" + name + "'",
					MdlPackage.eINSTANCE.mclObject_Blocks, UNKNOWN_BLOCK, blk.identifier)
			}
			else{
				// remove mandatory block if it exists
				mandatoryBlock.remove(blk.identifier)
			}
		}
		// check if mandatory blocks missing
		mandatoryBlock.forEach[blk, mand| error("mandatory block '" + blk + "' is missing in mdlobj '" + name + "'",
					MdlPackage.eINSTANCE.mclObject_Blocks, MANDATORY_BLOCK_MISSING, blk) ]
	}

}
