module eu.ddmore.mdl.GenerateMdl

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "src/eu/ddmore/mdl/Mdl.xtext"
//var grammarURI = "classpath:/eu/ddmore/mdl/Mdl.xtext"
var file.extensions = "mdl"
var projectName = "eu.ddmore.mdl"
var runtimeProject = "../${projectName}"
var generateXtendStub = true
var generateStub = true
var encoding = "UTF-8"

Workflow {
    bean = StandaloneSetup {
//            scanClassPath = true

    		resourceSet = org.eclipse.xtext.resource.XtextResourceSet:theResourceSet {}

            platformUri = "${runtimeProject}/.."
    	
    		// add mappings from platform:/resource to classpath:/
	    	uriMap = {
	    		from = "platform:/resource/eu.ddmore.mdllib/"
	    		to = "classpath:/"
//	    		to = "../../../../../mdllib_mvnbuild/eu.ddmore.mdllib/"
	    	}
    		
	    	registerGeneratedEPackage = "eu.ddmore.mdllib.mdllib.MdlLibPackage"
    		registerGenModelFile = "platform:/resource/eu.ddmore.mdllib/model/custom/MdlLib.genmodel"
        }
    
        component = DirectoryCleaner {
            directory = "${runtimeProject}/src-gen"
        }
    
	    component = DirectoryCleaner {
    		directory = "${runtimeProject}/model/generated"
    	}
    
        component = DirectoryCleaner {
            directory = "${runtimeProject}.ui/src-gen"
        }
    
	    component = DirectoryCleaner {
    		directory = "${runtimeProject}.tests/src-gen"
    	}
    
        component = Generator {
            pathRtProject = runtimeProject
            pathUiProject = "${runtimeProject}.ui"
            pathTestProject = "${runtimeProject}.tests"
            projectNameRt = projectName
            projectNameUi = "${projectName}.ui"
	    	encoding = encoding
            //mergeManifest = false
            language = auto-inject {
                forcedResourceSet = theResourceSet
    
                uri = grammarURI
                fileExtensions = file.extensions
                
                // Java API to access grammar elements (required by several other fragments)
                fragment = grammarAccess.GrammarAccessFragment auto-inject {}
    
                // generates Java API for the generated EPackages
                fragment = ecore.EMFGeneratorFragment auto-inject {
                // referencedGenModels = "
                //  platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel,
                //  platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel
                // "
                }
    
                // Serializer 2.0
                fragment = serializer.SerializerFragment auto-inject {
                	generateStub = false
                }
                
                // the serialization component (1.0)
                // fragment = parseTreeConstructor.ParseTreeConstructorFragment {}
    
                // a custom ResourceFactory for use with EMF
                fragment = resourceFactory.ResourceFactoryFragment auto-inject {
                }
    
                    // generator API
                fragment = generator.GeneratorFragment auto-inject {
                	generateJavaMain = true
                }
    
                // The antlr parser generator fragment.
                fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {
                //  options = {
                //      backtrack = true
                //  }
                }
    
    			// Xtend-based API for validation
    			fragment = validation.ValidatorFragment auto-inject {
		   		//    composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
    			    composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
    			}
    			
                // java-based API for validation
//                fragment = validation.JavaValidatorFragment auto-inject {
//                    composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
//                    composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
//                }
                
                // scoping and exporting API
//                 fragment = scoping.ImportURIScopingFragment {}
//                fragment = exporting.SimpleNamesFragment {}
    
                // scoping and exporting API
                fragment = scoping.ImportNamespacesScopingFragment auto-inject {}
                fragment = exporting.QualifiedNamesFragment auto-inject {}
                fragment = builder.BuilderIntegrationFragment auto-inject {}
    
                // formatter API
                fragment = formatting.FormatterFragment auto-inject {}
    
                // labeling API
                fragment = labeling.LabelProviderFragment auto-inject {}
    
                // outline API
                fragment = outline.OutlineTreeProviderFragment auto-inject {}
                fragment = outline.QuickOutlineFragment auto-inject {}
    
                // quickfix API
                fragment = quickfix.QuickfixProviderFragment auto-inject {}
    
                // content assist API
//                fragment = contentAssist.JavaBasedContentAssistFragment auto-inject {}
                fragment = contentAssist.ContentAssistFragment auto-inject {}
    
                // generates a more lightweight Antlr parser and lexer tailored for content assist
                fragment = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {}
    
                // generates junit test support classes into Generator#pathTestProject
                fragment = junit.Junit4Fragment auto-inject {}
    
                // project wizard (optional)
                 fragment = projectWizard.SimpleProjectWizardFragment {
                      generatorProjectName = "${projectName}.generator"
                      fileExtension = file.extensions
                 }
    
                // rename refactoring
                fragment = refactoring.RefactorElementNameFragment auto-inject {}
    
//                // provides the necessary bindings for java types integration
//                fragment = types.TypesGeneratorFragment auto-inject {}
    
//                // generates the required bindings only if the grammar inherits from Xbase
//                fragment = xbase.XbaseGeneratorFragment auto-inject {}
    
                // provides a preference page for template proposals
                fragment = templates.CodetemplatesGeneratorFragment auto-inject {}
    
                // provides a compare view
                fragment = compare.CompareFragment auto-inject {
                     fileExtensions = file.extensions
                }
    
            }
        }
}

