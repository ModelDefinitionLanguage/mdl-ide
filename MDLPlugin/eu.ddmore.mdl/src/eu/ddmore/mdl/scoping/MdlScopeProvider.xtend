/*
 * generated by Xtext
 */
package eu.ddmore.mdl.scoping

import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#scoping
 * on how and when to use it 
 *
 */
class MdlScopeProvider extends AbstractDeclarativeScopeProvider {

	// Problem is that need to make catRef the same as a symbol ref. Cuurently they are treated differently. 
	// Solution is to revise grammar to have only one type of symbol ref and to allow qualified var refs.
	// This allows enum references but will also need to be careful to exclude references to other mdl objects

//	def scope_SymbolReference_ref(Expression context, EReference reference){
//		val parentScope = context.eContainer.findDeclarationsInContext(context)
//		val listDefn = EcoreUtil2.getContainerOfType(context.eContainer, ListDefinition)
//		if(listDefn != null){
//			val catDefn = EcoreUtil2.getAllContentsOfType(listDefn, CategoricalDefinitionExpr)?.head
//			if(catDefn != null){
//				return Scopes::scopeFor(catDefn.categories, parentScope)
//			}
//		}
//		
//		parentScope
//	}

//	def scope_CategoryValueReference_ref(Expression context, EReference reference){
//		// get list defn
//		val retVal = context.eContainer.findCatDeclarationsInContext(context)
//		retVal
////		val parentScope = context.eContainer.getScope(reference)
////		val listDefn = EcoreUtil2.getContainerOfType(context.eContainer, ListDefinition)
////		if(listDefn != null){
////			val catDefn = EcoreUtil2.getAllContentsOfType(listDefn, CategoricalDefinitionExpr)?.head
////			if(catDefn != null){
////				return Scopes::scopeFor(catDefn.categories, parentScope)
//////				return Scopes::scopeFor(EcoreUtil2.getAllContentsOfType(listDefn, CategoricalDefinitionExpr))
////			}
////		}
////		parentScope
//	}
//
//	def dispatch IScope findCatDeclarationsInContext(EObject container, EObject o) {
//		container.eContainer.findCatDeclarationsInContext(o.eContainer)
//	}
//
//	def dispatch IScope findCatDeclarationsInContext(MclObject m, EObject o) {
//		val retVal = Scopes::scopeFor(EcoreUtil2.getAllContentsOfType(m, CategoryValueDefinition))
//		retVal
//	}

//	def dispatch IScope findDeclarationsInContext(EObject container, EObject o) {
//		container.eContainer.findDeclarationsInContext(o.eContainer)
//	}
//
//	def dispatch IScope findDeclarationsInContext(MclObject m, EObject o) {
//		val retVal = Scopes::scopeFor(EcoreUtil2.getAllContentsOfType(m, SymbolDefinition))
//		retVal
//	}

}
