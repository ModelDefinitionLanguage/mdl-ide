# Basic MDL template
#
# Customise as required
#

# Define the dataset to be used by the model
dataObjectName = dataObj {
	DECLARED_VARIABLES{
		# Variables referenced in the model are declared here.
		Y
	}

	DATA_INPUT_VARIABLES {
		# Data column definitions and mapping go here
		ID : { use is id }
		TIME : { use is idv }
		WT : { use is covariate }
		DV : { use is dv, variable = Y }
	}
	
	SOURCE {
		# Define data file here
		srcfile : {file = "nonmemDataFile.csv", 
            inputFormat is nonmemFormat } 
	}
}

# Provide a set of initial parameters values for a model 
parameterObjectName = parObj {
	DECLARED_VARIABLES{
		# Variables referenced in the model are declared here.
		ETA_CL ETA_V
	}

	# By default a parameter is to be estimated if fix is omitted
 	STRUCTURAL {
 		# structural parameters
		POP_CL : { value = 1, lo = 0, hi= 2}
		BETA_CL_WT : { value = 0.75, fix = true }
		} # end STRUCTURAL
	VARIABILITY {
		# variability parameters
		PPV_CL : { value = 1, type is sd }
		PPV_V : { value = 1, type is sd }
		# Define correlation or covariance here
		OMEGA : { parameter=[ETA_CL, ETA_V], value = [0.01], type is corr }
	} # end VARIABILITY
} # end of parameter object 

# Define the model in a model object
modelObjectName = mdlObj {
	# Independent variable of model
	IDV{ T }

	# Covariates are defined here
	COVARIATES{
		# maps to data
		WT
		# transformed
		logtWT = ln(WT/70)
	}

	# Levels of random variability define here
	VARIABILITY_LEVELS{
		ID : { level=2, type is parameter }
		DV : { level=1, type is observation }
	}

	# Stuctural parameters
	STRUCTURAL_PARAMETERS { 
		POP_CL
		BETA_CL_WT
	}
	
	# Variability Parameters
	VARIABILITY_PARAMETERS {
		PPV_CL
	} 
	
	# Define etas here
	RANDOM_VARIABLE_DEFINITION(level=ID) {
		ETA_CL ~ Normal(mean = 0, sd = PPV_CL)
	} # end RANDOM_VARIABLE_DEFINITION 

	# Define group variables here
	GROUP_VARIABLES{
		# GRP_CL = POP_CL * WT ^ BETA_CL_WT
	}
	
	# Define individual parameters
	INDIVIDUAL_VARIABLES {
		# For maximum interoperability with a linear covariate model use this form.
	    ln(CL) = linear( trans is ln, pop = POP_CL, fixEff = [{coeff=BETA_CL_WT, cov=logtWT}] , ranEff = [ETA_CL] )
	    # More flexible styles are available
	    # CL = GRP_CL* exp(ETA_CL)
	    
	}

	# Define the model
	MODEL_PREDICTION {
		# ODEs can go in the DEQ block
		DEQ{
#			RATEIN = if(T >= TLAG) then GUT * KA  
#					 else 0
#			GUT : { deriv =(- RATEIN), init = 0, x0 = 0 }
#			CENTRAL : { deriv =(RATEIN - CL * CENTRAL / V), init = 0, x0 = 0 } 
		}
#	    CC = CENTRAL / V 
	}
	
	# Define epsilons like this
	RANDOM_VARIABLE_DEFINITION(level=DV){
	    EPS_Y ~ Normal(mean = 0, var = 1)
	}

	# Define observations here
	OBSERVATION {
		# This is a continuous observation with a combined additive and proportional error model
	    #Y = combinedError1(additive = RUV_ADD, proportional = RUV_PROP, eps = EPS_Y, prediction = CC ) 
	}
}

# Define the task
taskObjectName = taskObj {
	# This is an estimate task. 
	ESTIMATE{ 
		# Specify the algorithm
		set algo is saem 
	}
}

# Define the modelling object group
mogObjectName = mogObj {
	OBJECTS{
		# A MOG is composed of a data, model, parameter and task object
		dataObjectName : { type is dataObj }
		modelObjectName : { type is mdlObj }
		parameterObjectName : { type is parObj }
		taskObjectName : { type is taskObj }
	}
}
