// Production MDL definitions.


_type Int _int;
_type Real _real;
_type Boolean _bool;
_type String _str;
_type Pdf _pdf;
_type Pmf _pmf;
_type Deriv _deriv;
_type Vector _vector;
_type Matrix _matrix;
_type Function _function;
_type Reference _reference;
_type Mapping _mapping;
_type Undefined _undef;
_type GenericEnum _category;
_type GenericCategoryValue _categoryValue;
_type RandomVariable _rv;


// Custom Types
_type transType _enum (none, ln, logit, probit);
_sublist fixEffAtts _atts cov::Reference[::Real], catCov::Reference[::GenericCategoryValue], coeff::Reference[::Real]
					_sig (cov, coeff), (catCov, coeff);
					
_type priorElementType _enum(matrix, vector);					

_type divUse _enum (covariate, amt, dv, dvid, cmt, mdv, idv, id, rate, ignore, varLevel, catCov, ss, ii, addl);
_type ddvUse _enum (doseTime);
_type varLvlType _enum (parameter, observation);
_type input _enum (nonmemFormat);
_type priorInput _enum (RList, csv);
_type cmtType _enum (depot, compartment, elimination, transfer, distribution, direct, effect);
_type varType _enum (cov, corr, sd, var);
_type obstype _enum (combinedError1, combinedError2, additive, proportional, categorical, count, discrete, tte, continuous);
_type sampletype _enum (simple, combi);
_type sampleelement _enum (amount, duration, sampleTime, numberTimes, covariate, /*catCov, */ numberArms, armSize, parameter, doseTime);
_type objType _enum (mdlObj, dataObj, parObj, taskObj, designObj, priorObj);

// Data input variables
//_list Covariate _alt Real _atts use::divUse, interp::Reference[::Function(x::Real, x0::Real, x1::Real, y0::Real, y1::Real)::Real] _sig (use);  
_list Covariate _alt Real _atts use::divUse, interp::Reference[::Function(::Real, ::Real, ::Real, ::Real, ::Real)::Real]
							_sig (use, interp?);  
_list CatCovariate _atts use::divUse _cat use::Int _sig (use);  
_list Amt _atts use::divUse, define::Mapping, variable::Reference[::Real] _sig (use, define), (use, variable);
_list Dv _atts use::divUse, define::Mapping, variable::Reference[::Real] _sig (use, define), (use, variable);
_list Idv _atts use::divUse _sig(use);
_list Cmt _atts use::divUse _sig(use);
_list Id _atts use::divUse _sig(use);
_list DataVarLevel _atts use::divUse _sig(use);
_list Mdv _atts use::divUse _sig(use);
_list rate _atts use::divUse _sig(use);
_list ss _atts use::divUse _sig(use);
_list ii _atts use::divUse _sig(use);
_list addl _atts use::divUse _sig(use);
_list Dvid _atts use::divUse _sig(use);
_list ignore _atts use::divUse _sig(use);

// data derived variables
_list DoseTime _atts use::ddvUse, idvColumn::Reference[::Idv], amtColumn::Reference[::Amt]
	_sig (use, idvColumn, amtColumn);

// Source
_list Source _atts file::String, inputFormat::input _sig(file, inputFormat);


//_sublist CsvColsSublist _atts colNum::Vector[::Int], vector::Reference[::Vector], matrix::Reference[::Matrix]
//						_sig (colNum, vector), (colNum, matrix)
//						;
_sublist priorFormat _atts element::String, type::priorElementType
					_sig (element, type);

// Priors
_list PriorTabularSource _super;
_list PriorSourceRList _atts file::String, inputFormat::priorInput, format::Vector[::priorFormat]
		_sig(file, inputFormat, format);
_list PriorSourceCsv _extends PriorTabularSource _atts file::String, inputFormat::priorInput, column::Vector[::String]
		_sig(file, inputFormat, column);
		
// Individual Parameters
_type IndivTypeType _enum (linear, general);

_list IndivAbstractList _alt Real _super;

_sublist EtaFreeRanEffSublist _atts var::Real, sd::Real, varLvl::VarLevel _sig(var, varLvl), (sd, varLvl);

_list IndivParamLinear _alt Real _extends IndivAbstractList
		_atts type::IndivTypeType, trans::transType,
				pop::Real, fixEff::Vector[::fixEffAtts], ranEff::Vector[::RandomVariable], omega::Vector[::EtaFreeRanEffSublist]
		_sig(type, trans?, pop, fixEff?, ranEff), (type, trans?, pop, fixEff?, omega);
		
_list IndivParamGeneral _alt Real _extends IndivAbstractList
		_atts type::IndivTypeType, trans::transType, grp::Real,
				ranEff::Vector[::RandomVariable], omega::Vector[::EtaFreeRanEffSublist]
			_sig(type, trans?, grp, ranEff), (type, trans?, grp, omega); 


// Model
	
_list VarLevel _atts type::varLvlType, level::Int
	_sig(type, level);
_list DosingTarget _super;
_list DerivList _alt Deriv _extends DosingTarget _atts deriv::Real, init::Real, x0::Real, wrt::Reference[::Real]
	_sig(deriv, init?, x0?, wrt?);


// Compartments

_list CmtDirect _alt Real _atts type::cmtType, modelCmt::Int, to::Reference[::DosingTarget],
		modelDur::Real, tlag::Real, finput::Real
		_sig(type, modelCmt?, to, modelDur?, tlag?, finput?);

_list Effect _alt Real _atts type::cmtType, modelCmt::Int, from::Reference[::DosingTarget], keq::Real
			_sig (type, modelCmt?, from, keq);
			
_list Depot _alt Real _atts type::cmtType, modelCmt::Int, to::Reference[::DosingTarget], ka::Real,
						modelDur::Real, tlag::Real, finput::Real, ktr::Real, mtt::Real
			_sig (type, modelCmt?, to, ka, tlag?, finput?),
				 (type, modelCmt?, to, ktr, mtt),
				 (type, modelCmt?, to, modelDur, tlag?, finput?);

_list Transfer _anon _atts type::cmtType, modelCmt::Int, to::Reference[::DosingTarget], from::Reference[::DosingTarget], kt::Real
			_sig (type, modelCmt?, to, from, kt);

_list Compartment _alt Real _extends DosingTarget
		_atts  type::cmtType, modelCmt::Int
		_sig (type, modelCmt?);
		
_list Elimination _anon _atts type::cmtType, modelCmt::Int, from::Reference[::DosingTarget], v::Real,
								cl::Real, k::Real, vm::Real, km::Real
				_sig (type, modelCmt?, from, v?, k),
					 (type, modelCmt?, from, v?, cl),
					 (type, modelCmt?, from, vm, km);
					 
_list Distribution _atts type::cmtType, modelCmt::Int, from::Reference[::DosingTarget],
								kin::Real, kout::Real
				_sig(type, modelCmt?, kin, kout, from);

	 
// Observations
_list continuousErrorList _super;
_list combinedError1List _alt Real _extends continuousErrorList
	_atts type::obstype, trans::transType, additive::Real, proportional::Real, prediction::Real, eps::RandomVariable[::Real], varLvl::VarLevel
		_sig(type, trans?, additive, proportional, prediction, eps), (type, trans?, additive, proportional, prediction, varLvl)
	;
_list combinedError2List _alt Real _extends continuousErrorList
	_atts type::obstype, trans::transType, additive::Real, proportional::Real, prediction::Real, eps::RandomVariable[::Real], varLvl::VarLevel
		_sig(type, trans?, additive, proportional, prediction, eps), (type, trans?, additive, proportional, prediction, varLvl)
	;
_list additiveErrorList _alt Real _extends continuousErrorList
	_atts type::obstype, trans::transType, additive::Real, prediction::Real, eps::RandomVariable[::Real], varLvl::VarLevel
		_sig(type, trans?, additive, prediction, eps), (type, trans?, additive, prediction, varLvl)
	;
_list proportionalErrorList _extends continuousErrorList
	_atts type::obstype, trans::transType, proportional::Real, prediction::Real, eps::RandomVariable[::Real], varLvl::VarLevel
	_sig(type, trans?, proportional, prediction, eps), (type, trans?, proportional, prediction, varLvl)
	;
_list CatObs _anon _atts type::obstype, variable::RandomVariable[::GenericEnum] _sig(type, variable);
_list CountObs _anon _atts type::obstype, variable::RandomVariable[::Int] _sig(type, variable);
_list DiscreteObs _anon _atts type::obstype, variable::RandomVariable[::GenericEnum] _sig(type, variable);
_list TteObs _alt Real _atts type::obstype, hazard::Reference[::Real] _sig(type, hazard);
_list ContinuousObsList _anon _extends continuousErrorList _atts type::obstype, variable::RandomVariable[::Real] _sig(type, variable);


// Parameter obj variability & Structural
_list CovarMatrix _atts type::varType, parameter::Vector, value::Vector
					_sig(type, parameter, value);
_list CorrMatrix _atts type::varType, parameter::Vector, value::Vector
					_sig(type, parameter, value);
_list SDEstimate _alt Real _atts type::varType, value::Real, lo::Real, hi::Real, fix::Boolean
					_sig(type, value, lo?, hi?, fix?);
_list VarEstimate _alt Real  _atts type::varType, value::Real, lo::Real, hi::Real, fix::Boolean
					_sig(type, value, lo?, hi?, fix?);
_list StructuralEstimate _alt Real _atts value::Real, lo::Real, hi::Real, fix::Boolean
					_sig(value, lo?, hi?, fix?);

//MOG Objects
_list MdlObjInMog _atts type::objType _sig(type);

_type AdminTypeType _enum (simple, combi, resetAll, reset);

// Design Objects
_list AdminSuperList _super;
_list AdminSimpleList _extends AdminSuperList _atts type::AdminTypeType, input::Reference[::Real], amount::Real,
						rate::Vector, steadyState::Boolean, p::Real, doseTime::Vector, duration::Vector,
						dosingInterval::Real, nDoses::Int, start::Real, end::Real
						_sig (type, input, amount, p?, doseTime?, duration?, start?, end?, rate?, dosingInterval?, nDoses?),
							(type, input, amount, steadyState, dosingInterval?, nDoses?) ;
						
_list AdminComplexList _extends AdminSuperList _atts type::AdminTypeType, combination::Vector[::AdminSuperList], start::Vector, end::Vector
						_sig (type, combination, start?, end?) ;
_list AdminResetAllList _extends AdminSuperList _atts type::AdminTypeType, resetTime::Real, value::Real, start::Vector
						_sig (type, resetTime?, value?, start?) ;
_list AdminResetList _extends AdminSuperList _atts type::AdminTypeType, variable::Vector[::Reference[::Real]], resetTime::Real, value::Real, start::Vector
						_sig (type, variable, resetTime?, value?, start?) ;

_sublist intSeqAtts _atts admin::Vector[::Reference[::AdminSuperList]], start::Vector
					_sig (admin, start?);

_sublist sampSeqAtts _atts sample::Vector[::Reference[::SamplingSuper]], start::Vector
					_sig (sample, start?);
_sublist OccSeqSubList _atts occasion::Vector, level::Reference[::VarLevel], start::Vector
					_sig (occasion, level, start?);
_list StudyDesign _atts armSize::Int, sameTimes::Boolean, 
						occasionSequence::Vector[::OccSeqSubList], interventionSequence::intSeqAtts, samplingSequence::sampSeqAtts
		_sig (interventionSequence, samplingSequence?, occasionSequence?, armSize?, sameTimes?);

//_list DesignSpaceCatCov _atts objRef::GenericEnum, element::sampleelement, discrete::Vector, range::Vector
//						_sig (objRef, element, discrete),
//							(objRef, element, range);
_list DesignSpaceCov _atts objRef::Reference[::Real], element::sampleelement, discrete::Vector, range::Vector
						_sig (objRef, element, discrete),
							(objRef, element, range);
_list DesignSpaceAmt _atts objRef::Vector[::Reference[::AdminSimpleList]], element::sampleelement, discrete::Vector, range::Vector
						_sig (objRef, element, discrete),
							(objRef, element, range);
_list DesignSpaceDoseTime _atts objRef::Vector[::Reference[::AdminSimpleList]], element::sampleelement, discrete::Vector, range::Vector
						_sig (objRef, element, discrete),
							(objRef, element, range);
_list DesignSpaceDuration _atts objRef::Vector[::Reference[::AdminSimpleList]], element::sampleelement, discrete::Vector, range::Vector
						_sig (objRef, element, discrete),
							(objRef, element, range);
_list DesignSpaceNumTimes _atts objRef::Vector[::Reference[::SamplingSuper]], element::sampleelement, discrete::Vector, range::Vector
						_sig (objRef, element, discrete),
							(objRef, element, range);
_list DesignSpaceSampleTimes _atts objRef::Vector[::Reference[::SamplingSuper]], element::sampleelement, discrete::Vector, range::Vector
						_sig (objRef, element, discrete),
							(objRef, element, range);
_list DesignSpaceNumArms _atts objRef::Vector[::Reference[::StudyDesign]], element::sampleelement, discrete::Vector, range::Vector
						_sig (objRef, element, discrete),
							(objRef, element, range);
_list DesignSpaceArmSize _atts objRef::Vector[::Reference[::StudyDesign]], element::sampleelement, discrete::Vector, range::Vector
						_sig (objRef, element, discrete),
							(objRef, element, range);
_list DesignSpaceParam _atts objRef::Vector[::Reference[::Real]], element::sampleelement, discrete::Vector, range::Vector
						_sig (objRef, element, discrete),
							(objRef, element, range);

_list SamplingSuper _super;

_list SimpleSamplingList _extends SamplingSuper _atts type::sampletype, outcome::Reference[::Real], sampleTime::Vector,
								numberTimes::Int, deltaTime::Real, blq::Real, ulq::Real, numberSamples::Vector[::Int]
							_sig(type, outcome, sampleTime?, numberTimes?, numberSamples?, deltaTime?, blq?, ulq?);
//_list ComplexSamplingList _extends SamplingSuper _atts type::sampletype, combination::Vector[::sampSeqAtts], numberTimes::Int
//							_sig(type,combination, numberTimes?);
_list DerivedSamplingList _extends SamplingSuper _atts type::sampletype, combination::Vector[::Reference[::SamplingSuper]],
														numberTimes::Int, start::Vector[::Real], relative::Boolean
							_sig(type,combination, numberTimes?, start?, relative?);

_type covArgEnumType _enum(constant, idvDependent); //, occDependent); 

							
_type estAlgo _enum(saem, foce, fo, focei);
_type solverType _enum(stiff, nonStiff);							
_type OptAlgoType _enum(simplex, fw);

_prop algo::estAlgo, solver::solverType, armSize::Int, totalSize::Int, numberSamples::Int, totalCost::Real, numberArms::Int;

_prop optAlgo::OptAlgoType, fim::String, previousFim::String, graphOnly::Boolean, typeIError::Real, powerComparison::Boolean, 
		nSubjectsComparison::Boolean,
		equivalenceRange::Vector, powerEquivalence::Boolean, nSubjectsEquivalence::Boolean, typeIIError::Real,
		graphLogical::Boolean, logLogical::Boolean, namesDataX::Vector[::String], namesDataY::Vector[::String],
		graphInfA::Vector, graphSupA::Vector, subjectsOpt::Boolean, lowerA::Vector, upperA::Vector, iterPrint::Boolean,
		simplexParameter::Real, maxIter::Int, rcTol::Real,identicalTimes::Boolean, features::Vector[::sampleelement];
		
_prop amount::Real, duration::Real, sampleTime::Real, numberTimes::Int, doseTime::Real;

_object mdlObj;
_object dataObj;
_object priorObj;
_object taskObj;
_object designObj;
_object parObj;
_object mogObj;


_block COVARIATES (0,)
	_arguments  type::covArgEnumType?
	_statements (0,) _eqnDefn, _eqnDefn+, _enumDefn, _rvDefn;

_block VARIABILITY_LEVELS (0,) _statements (0,) _listDefn
	_list _key=type VarLevel;
	
_block STRUCTURAL_PARAMETERS (0,) _statements (0,) _eqnDefn, _eqnDefn+;

_block VARIABILITY_PARAMETERS (0,) _statements (0,) _eqnDefn, _eqnDefn+;

_block RANDOM_VARIABLE_DEFINITION (0,) _arguments level::VarLevel _statements (0,) _rvDefn, _enumDefn;

_block POPULATION_PARAMETERS (,) _statements(,) _eqnDefn+, _anonList _list _key=type
			 obstype.count->CountObs, obstype.categorical->CatObs, obstype.discrete->DiscreteObs,
			 obstype.continuous -> ContinuousObsList
			 ;

_block INDIVIDUAL_VARIABLES (0,) _statements (0,) _eqnDefn+, _transDefn, _listDefn
	_list _key=type IndivTypeType.linear->IndivParamLinear, IndivTypeType.general -> IndivParamGeneral;

_block MODEL_PREDICTION (0,) _statements (0,) _eqnDefn, _eqnDefn+, _listDefn
	_list _key=deriv DerivList;
	
_block OBSERVATION (0,) _statements (0,) _eqnDefn+, _transDefn, _listDefn, _anonList
		_list _key=type obstype.count->CountObs, obstype.categorical->CatObs, obstype.discrete->DiscreteObs, obstype.tte->TteObs,
						obstype.combinedError1->combinedError1List, obstype.combinedError2->combinedError2List,
						obstype.additive->additiveErrorList, obstype.proportional->proportionalErrorList,
						obstype.continuous -> ContinuousObsList
		;

_block GROUP_VARIABLES (0,) _statements (0,) _eqnDefn+, _eqnDefn;

_block IDV (1,1) _statements (1,1) _eqnDefn;

_block DATA_INPUT_VARIABLES (0,) _statements (1,) _listDefn
	_list _key=use divUse.covariate -> Covariate, divUse.catCov -> CatCovariate,
								divUse.cmt -> Cmt, divUse.cmt->Cmt, divUse.amt -> Amt, divUse.ii -> ii, divUse.addl -> addl,
								divUse.id -> Id, divUse.idv -> Idv, divUse.varLevel -> DataVarLevel, divUse.mdv -> Mdv,
								divUse.rate -> rate, divUse.ignore -> ignore, divUse.dvid -> Dvid, divUse.dv -> Dv,
								divUse.ss -> ss;
								
_block DECLARED_VARIABLES (0,) _statements (,) _eqnDefn, _enumDefn;

_block DATA_DERIVED_VARIABLES (0,) _statements (,) _listDefn
	_list _key=use ddvUse.doseTime->DoseTime;
_block SOURCE (1,1) _statements (1,1) _listDefn
		_list _key=file Source;
		
_block STRUCTURAL (,) _statements (,) _listDefn, _eqnDefn+
	_list _key=value StructuralEstimate;

_block VARIABILITY (,) _statements (,) _listDefn, _eqnDefn+
	_list _key=type varType.cov->CovarMatrix, varType.corr->CorrMatrix, varType.sd -> SDEstimate, varType.var -> VarEstimate;
	
_block ESTIMATE (,1) _statements (,) _propStmt
		_prop algo;
_block SIMULATE (,1) _statements (,) _propStmt
		_prop solver?;
_block EVALUATE (,1) _statements (,) _propStmt
		_prop graphOnly?, fim?, previousFim?, typeIError?, typeIIError?, powerEquivalence?, powerComparison?, nSubjectsComparison?, equivalenceRange?,
				nSubjectsEquivalence?, graphLogical?, logLogical?, namesDataX?, namesDataY?, graphInfA?, graphSupA?, subjectsOpt?, lowerA?, upperA?,
				iterPrint?, simplexParameter?, maxIter?, rcTol?, identicalTimes?, features?,
				armSize?, amount?, totalSize?, numberSamples?, totalCost?, numberArms?, duration?, sampleTime?,
				numberTimes?, numberArms?, armSize?, doseTime?;
				
_block OPTIMISE (,1) _statements (,) _propStmt
		_prop optAlgo?, graphOnly?, fim?, previousFim?, typeIError?, typeIIError?, powerEquivalence?, powerComparison?, nSubjectsComparison?, equivalenceRange?,
				nSubjectsEquivalence?, graphLogical?, logLogical?, namesDataX?, namesDataY?, graphInfA?, graphSupA?, subjectsOpt?, lowerA?, upperA?,
				iterPrint?, simplexParameter?, maxIter?, rcTol?, identicalTimes?, features?,
				armSize?, amount?, totalSize?, numberSamples?, totalCost?, numberArms?, duration?, sampleTime?,
				numberTimes?, numberArms?, armSize?, doseTime?;

_block TARGET_SETTINGS (,)  _arguments target::String, settingsFile::Vector[::String]? _statements (,) _propStmt _prop _free;

_block OBJECTS (1,1) _statements (4,5) _listDefn
		_list _key=type MdlObjInMog;
		
_block DEQ (,) _statements (,) _listDefn, _eqnDefn, _eqnDefn+
	_list _key=deriv DerivList;
	
_block COMPARTMENT (,) _statements (,) _listDefn, _anonList
	_list _key=type cmtType.depot->Depot, cmtType.direct->CmtDirect, cmtType.effect->Effect, 
				cmtType.transfer->Transfer, cmtType.compartment->Compartment, cmtType.elimination->Elimination,
				cmtType.distribution->Distribution;
				
_block FUNCTIONS (,) _statements (,) _eqnDefn;

_block ADMINISTRATION (1, ) _statements (,) _listDefn
	_list _key=type AdminTypeType.simple->AdminSimpleList, AdminTypeType.combi->AdminComplexList, AdminTypeType.resetAll->AdminResetAllList,
						AdminTypeType.reset->AdminResetList;

_block ACTION (, ) _statements (,) _listDefn
	_list _key=type AdminTypeType.resetAll->AdminResetAllList, AdminTypeType.reset->AdminResetList;
	
_block STUDY_DESIGN (,) _statements (,) _listDefn
		_prop armSize?, totalSize?, numberSamples?, totalCost?, numberArms?
		_list _key=interventionSequence StudyDesign;

_block SAMPLING (,) _statements (,) _listDefn
		_list _key=type sampletype.simple->SimpleSamplingList, sampletype.combi->DerivedSamplingList;

_block DESIGN_SPACES (,) _statements (,) _listDefn
		_list _key=element //sampleelement.catCov->DesignSpaceCatCov, 
							sampleelement.covariate->DesignSpaceCov, sampleelement.amount->DesignSpaceAmt,
								sampleelement.doseTime -> DesignSpaceDoseTime, sampleelement.duration->DesignSpaceDuration,
								sampleelement.numberTimes->DesignSpaceNumTimes, sampleelement.sampleTime->DesignSpaceSampleTimes,
								sampleelement.numberArms->DesignSpaceNumArms, sampleelement.armSize->DesignSpaceArmSize,
								sampleelement.parameter->DesignSpaceParam;

_block DESIGN_PARAMETERS (,) _statements (,) _eqnDefn, _eqnDefn+;
_block PRIOR_PARAMETERS (,) _statements (,) _eqnDefn, _eqnDefn+;
_block NON_CANONICAL_DISTRIBUTION (,) _statements (,) _eqnDefn, _eqnDefn+;
_block PRIOR_VARIABLE_DEFINITION (,) _statements (,) _eqnDefn, _eqnDefn+, _rvDefn;
_block INPUT_PRIOR_DATA (,) _statements (,) _eqnDefn, _eqnDefn+;
_block PRIOR_SOURCE (,) _statements (,) _listDefn
	_list _key=inputFormat  priorInput.RList->PriorSourceRList, priorInput.csv->PriorSourceCsv;


_container mdlObj _has COVARIATES, VARIABILITY_LEVELS, STRUCTURAL_PARAMETERS, VARIABILITY_PARAMETERS, RANDOM_VARIABLE_DEFINITION,
					INDIVIDUAL_VARIABLES, MODEL_PREDICTION, OBSERVATION, GROUP_VARIABLES, IDV, FUNCTIONS, POPULATION_PARAMETERS;
_container dataObj _has DATA_INPUT_VARIABLES, DECLARED_VARIABLES, DATA_DERIVED_VARIABLES, SOURCE, FUNCTIONS;
_container parObj _has VARIABILITY, DECLARED_VARIABLES, STRUCTURAL;
_container taskObj _has ESTIMATE, SIMULATE, OPTIMISE, EVALUATE;
_container mogObj _has OBJECTS;
_container designObj _has DECLARED_VARIABLES, ADMINISTRATION, ACTION, STUDY_DESIGN, SAMPLING, DESIGN_SPACES, COVARIATES, DESIGN_PARAMETERS;
_container priorObj _has PRIOR_PARAMETERS, NON_CANONICAL_DISTRIBUTION, PRIOR_VARIABLE_DEFINITION;
_container MODEL_PREDICTION _has DEQ, COMPARTMENT;
_container NON_CANONICAL_DISTRIBUTION _has PRIOR_SOURCE, INPUT_PRIOR_DATA;
_container ESTIMATE _has TARGET_SETTINGS;
_container SIMULATE _has TARGET_SETTINGS;
_container EVALUATE _has TARGET_SETTINGS;
_container OPTIMISE _has TARGET_SETTINGS;



_func log (x::Real, y::Real) _returns ::Real;
_func log2 (x::Real) _returns ::Real;
_func log10 (x::Real) _returns ::Real;
_func ln (x::Real) _returns ::Real;
_func probit (x::Real) _returns ::Real;
_func logit (x::Real) _returns ::Real;
_func invLogit (x::Real) _returns ::Real;
_func invProbit (x::Real) _returns ::Real;
_func factorial (x::Real) _returns ::Real;
_func lnFactorial (x::Real) _returns ::Real;
_func sin (x::Real) _returns ::Real;
_func cos (x::Real) _returns ::Real;
_func tan (x::Real) _returns ::Real;
_func sinh (x::Real) _returns ::Real;
_func cosh (x::Real) _returns ::Real;
_func tanh (x::Real) _returns ::Real;
_func floor (x::Real) _returns ::Real;
_func ceiling (x::Real) _returns ::Real;
_func min (x::Real, y::Real) _returns ::Real;
_func max (x::Real, y::Real) _returns ::Real;
_func abs (x::Real) _returns ::Real;
_func exp (x::Real) _returns ::Real;
_func seq (x::Real, y::Real, z::Real) _returns ::Vector;
_func dseq (x::Int, y::Int, z::Int) _returns ::Vector[::Int];
_func sqrt (x::Real) _returns ::Real;
_func sum (x::Vector) _returns ::Real;
_func mean (x::Vector) _returns ::Real;
_func median (x::Vector) _returns ::Real;
_func toInt (x::Real) _returns ::Int;
_func rep(x::Vector, times::Int) _returns ::Vector;

// Matrix functions
_func toMatrixByRow(rows::Vector[::Vector[::Real]]) _returns ::Matrix;
_func toMatrixByCol(cols::Vector[::Vector[::Real]]) _returns ::Matrix;
_func asVector(x::Matrix) _returns ::Vector;
_func inverse(x::Matrix) _returns ::Matrix;
_func transpose(x::Matrix) _returns ::Matrix;
_func diagonal(x::Vector) _returns ::Matrix;

// interpolation functions
_func linearInterp(x::Real, t0::Real, x0::Real, t1::Real, x1::Real) _returns ::Real;
_func constInterp(x::Real, t0::Real, x0::Real, t1::Real, x1::Real) _returns ::Real;
_func lastValueInterp(x::Real, t0::Real, x0::Real, t1::Real, x1::Real) _returns ::Real;
_func nearestInterp(x::Real, t0::Real, x0::Real, t1::Real, x1::Real) _returns ::Real;
_func cubicInterp(x::Real, t0::Real, x0::Real, t1::Real, x1::Real) _returns ::Real;
_func pchipInterp(x::Real, t0::Real, x0::Real, t1::Real, x1::Real) _returns ::Real;
_func splineInterp(x::Real, t0::Real, x0::Real, t1::Real, x1::Real) _returns ::Real;

// Named functions
_func Normal _named
				(mean::Real,
				sd::Real,
				var::Real
			)
			_sig (mean, sd),
				(mean, var)
			_returns ::Pdf
			;
_func LogNormal _named
		(
			mean::Real,
			sd::Real,
			var::Real
		)
		_sig(mean, sd),
			(mean, var)
		_returns ::Pdf;
_func Bernoulli _named
				(
					category::Reference[::GenericEnum], // need to require a reference here
					probability::Real
				)
				_sig (category?, probability)
				_returns ::Pmf
			;
_func	 Poisson _named
			(
				lambda::Real
			)
			_sig (lambda)
			_returns ::Pmf;
_func Binomial _named
			(
				successCategory ::Reference[::GenericEnum],
				probabilityOfSuccess::Real,
				numberOfTrials::Real
			)
			_sig(successCategory?, probabilityOfSuccess, numberOfTrials)
			_returns ::Pmf;
_func	 Gamma _named
			(
				shape::Real,
				scale::Real
			)
			_sig(shape, scale)
			_returns ::Pdf;
_func NonParametric _named
			(
				bins::Vector,
				probability::Vector
			)
			_sig (bins, probability)
			_returns ::Pdf;
_func MultiNonParametric _named
			(
				bins::Matrix,
				probability::Vector
			)
			_sig (bins, probability)
			_returns ::Vector[::Pdf];
_func Empirical _named
			(
				data::Vector,
				probability::Vector
			)
			_sig(data, probability?)
			_returns ::Pdf;
_func MultiEmpirical _named
			(
				data::Matrix,
				probability::Vector
			)	
			_sig (data, probability)
			_returns ::Vector[::Pdf];		
_func MultivariateNormal _named
			(
				mean::Vector,
				cov::Matrix
			)
			_sig (mean, cov)
			_returns ::Vector[::Pdf];
_func Wishart _named
			(
				scaleMatrix::Matrix,
				nu::Real
			)
			_sig (scaleMatrix, nu)
			_returns ::Matrix[[::Pdf]];
_func Categorical _named
			(
				probability::Vector[::Real]
			)
			_sig (probability)
			_returns ::Pmf;
_func matrix _named
		(
			vector::Vector,
			ncol::Real,
			byRow::Boolean
		)
		_sig (vector, ncol, byRow)
		_returns ::Matrix;
_func linear _named
		( 
			trans::transType,
			pop::Real,
			fixEff::Vector[::fixEffAtts],
			ranEff::Vector[::RandomVariable]
		)
		_sig(trans?, pop, fixEff?, ranEff) 
		_returns ::Real;
_func general _named (
				trans::transType,
				grp::Real,
				ranEff::Vector[::RandomVariable]
			)
			_sig(trans?, grp, ranEff) 
			_returns ::Real;
_func combinedError1 _named
		( 
			trans::transType,
			additive::Real,
			proportional::Real,
			prediction::Real,
			eps::RandomVariable[::Real]
		)
		_sig(trans?, additive, proportional, prediction, eps)
		_returns ::Real
;
_func combinedError2 _named
		( 
			trans::transType,
			additive::Real,
			proportional::Real,
			prediction::Real,
			eps::RandomVariable[::Real]
		)
		_sig(trans?, additive, proportional, prediction, eps)
		_returns ::Real
;
_func additiveError _named
		( 
			trans::transType,
			additive::Real,
			prediction::Real,
			eps::RandomVariable[::Real]
		)
		_sig(trans?, additive, prediction, eps)
		_returns ::Real
;
_func proportionalError _named
		( 
			trans::transType,
			proportional::Real,
			prediction::Real,
			eps::RandomVariable[::Real]
		)
		_sig(trans?, proportional, prediction, eps)
		_returns ::Real
;
_func readVector _named
			(
				src::PriorSourceRList,
				element::String
			)
			_sig(src, element)
			_returns ::Vector;
_func readMatrix _named
			(
				src::PriorSourceRList,
				element::String
			)
			_sig(src, element)
			_returns ::Matrix;
_func readVectorFromTable _named
			(
				src::PriorTabularSource,
				column::Vector[::String]
			)
			_sig(src, column)
			_returns ::Vector;
_func readMatrixFromTable _named
			(
				src::PriorTabularSource,
				column::Vector[::String]
			)
			_sig(src, column)
			_returns ::Matrix;
			