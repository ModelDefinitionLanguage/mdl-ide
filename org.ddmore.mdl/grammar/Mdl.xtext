grammar org.ddmore.mdl.Mdl with org.eclipse.xtext.common.Terminals
generate mdl "http://www.ddmore.org/mdl/Mdl"

Mcl hidden(WS, ML_COMMENT, SL_COMMENT):
	objects+=MclObject*;

MclObject:
	objectName=ObjectName '=' 
	(modelObject=ModelObject | 
	parameterObject=ParameterObject | 
	dataObject=DataObject | 
	taskObject=TaskObject |
	designObject=DesignObject |
	mogObject=MOGObject);
	
ModelObject: 
	identifier = 'mdlobj' BEGIN blocks += ModelObjectBlock* END;

ParameterObject:
	identifier = 'parobj' BEGIN blocks += ParameterObjectBlock* END;
	
DataObject:
	identifier = 'dataobj' BEGIN blocks += DataObjectBlock* END;

TaskObject:
	identifier = 'taskobj' BEGIN blocks += TaskObjectBlock* END;
	
DesignObject:
	identifier = 'designobj' BEGIN blocks += DesignObjectBlock* END;
	
MOGObject:
	identifier = 'mog' BEGIN objects += [ObjectName]* END;
	
//////////////////////////////////////////////////////////
//Model Object
//////////////////////////////////////////////////////////

ModelObjectBlock: 
	individualVariablesBlock = IndividualVariablesBlock | 
	modelPredictionBlock = ModelPredictionBlock |
	randomVariableDefinitionBlock = RandomVariableDefinitionBlock |
	inputVariablesBlock = InputVariablesBlock |
	structuralParametersBlock = StructuralParametersBlock |
	variabilityParametersBlock = VariabilityParametersBlock |
	outputVariablesBlock = OutputVariablesBlock |
	groupVariablesBlock = GroupVariablesBlock | 
	observationBlock = ObservationBlock |
	estimationBlock = EstimationBlock |
	simulationBlock = SimulationBlock |
	targetBlock = TargetBlock 
;

IndividualVariablesBlock:
	identifier = 'INDIVIDUAL_VARIABLES' 
	BEGIN statements += BlockStatement* END  
;

ModelPredictionBlock:
	identifier = 'MODEL_PREDICTION' 
	BEGIN statements += ModelPredictionBlockStatement* END
;

RandomVariableDefinitionBlock:
	identifier = 'RANDOM_VARIABLE_DEFINITION' 
	BEGIN variables += SymbolDeclaration* END 
;

InputVariablesBlock:
  	identifier = 'MODEL_INPUT_VARIABLES' 
  	BEGIN variables += SymbolDeclaration* END 
;

StructuralParametersBlock:
  identifier = 'STRUCTURAL_PARAMETERS' 
  BEGIN parameters += SymbolDeclaration* END 
; 

VariabilityParametersBlock:
  identifier = 'VARIABILITY_PARAMETERS' 
  BEGIN parameters += SymbolDeclaration* END 
;

OutputVariablesBlock:
	identifier = 'MODEL_OUTPUT_VARIABLES' 
	BEGIN variables += SymbolName* END 
; 

GroupVariablesBlock:
	identifier = 'GROUP_VARIABLES' 
	BEGIN statements += GroupVariablesBlockStatement* END
;

ObservationBlock:
	identifier = 'OBSERVATION'
	BEGIN statements += BlockStatement* END  
;

EstimationBlock:
	identifier = 'ESTIMATION' 
	BEGIN statements += BlockStatement* END 
;

SimulationBlock:
	identifier = 'SIMULATION' 
	BEGIN statements += BlockStatement* END  
;

//////////////////////////////////////////////////////////
//Parameter Object
//////////////////////////////////////////////////////////

ParameterObjectBlock:
	structuralBlock = StructuralBlock |
	variabilityBlock = VariabilityBlock |
	priorBlock = PriorParametersBlock |
	targetBlock = TargetBlock 
;

StructuralBlock:
	identifier='STRUCTURAL'   
	BEGIN parameters += SymbolDeclaration* END 
;

VariabilityBlock:
	identifier='VARIABILITY' 
	BEGIN statements += VariabilityBlockStatement* END
;

PriorParametersBlock:
	identifier='PRIOR_PARAMETERS' 
	BEGIN statements += BlockStatement* END  
;

//////////////////////////////////////////////////////////
//Data Object
//////////////////////////////////////////////////////////

DataObjectBlock:
	dataInputBlock = DataInputBlock |
	dataDerivedBlock = DataDerivedBlock |
	sourceBlock = SourceBlock |
	targetBlock = TargetBlock 
;
 
DataInputBlock:
 	identifier='DATA_INPUT_VARIABLES' 
 	BEGIN variables += SymbolDeclaration* END  
;
 
DataDerivedBlock:
 	identifier='DATA_DERIVED_VARIABLES' 
 	BEGIN statements += BlockStatement* END  
; 
 
SourceBlock:
	identifier='SOURCE' 	
	BEGIN 
		statements += SymbolDeclaration* 
		(inlineBlock = InlineBlock)
	END
;

//////////////////////////////////////////////////////////
//Task Object
//////////////////////////////////////////////////////////
 
TaskObjectBlock: 
	estimateBlock = EstimateTask |
	simulateBlock = SimulateTask |
	executeBlock = ExecuteTask |
	evaluateBlock = EvaluateTask |
	optimiseBlock = OptimiseTask |
	parameterBlock = ParameterBlock |
	dataBlock = DataBlock |
	modelBlock = ModelBlock | 
	targetBlock = TargetBlock 	
;

ParameterBlock:
	identifier = 'PARAMETER' 
	BEGIN parameters += SymbolDeclaration* END  
;

DataBlock:
	identifier = 'DATA' 
	BEGIN statements += SymbolDeclaration* END
;

ModelBlock:
	identifier = 'MODEL' 
	BEGIN statements += SymbolDeclaration* END
;

EstimateTask: 
	identifier = 'ESTIMATE' 
	BEGIN statements += SymbolDeclaration* END 
;

SimulateTask:
	identifier = 'SIMULATE' 
	BEGIN statements += SymbolDeclaration* END  
;

ExecuteTask:
	identifier = "EXECUTE"
	BEGIN statements += SymbolDeclaration* END  
;

EvaluateTask:
	identifier = "EVALUATE"
	BEGIN statements += SymbolDeclaration* END  
;

OptimiseTask:
	identifier = "OPTIMISE"
	BEGIN statements += SymbolDeclaration* END  
;

ModelPredictionBlockStatement: 
	statement = BlockStatement | 
	odeBlock = OdeBlock | 
	libraryBlock = LibraryBlock |
	compartmentBlock = CompartmentBlock |
	degBlock = DeqBlock
;

LibraryBlock: 
	identifier = 'LIBRARY' 
	BEGIN statements += FunctionCallStatement* END 
;

CompartmentBlock:
	identifier = 'COMPARTMENT'
	BEGIN variables += SymbolDeclaration* END 
;

DeqBlock:
	identifier = 'DEQ'
	BEGIN variables += SymbolDeclaration* END 
;

FunctionCallStatement:
	symbolName = SymbolName "=" expression = FunctionCall
;

OdeBlock:
	identifier = 'ODE' 
	BEGIN statements += BlockStatement* END 
;

GroupVariablesBlockStatement:
	statement = BlockStatement |  
	mixtureBlock = MixtureBlock 
;

MixtureBlock:
	identifier = 'MIXTURE' 
	BEGIN statements += BlockStatement* END 
;

VariabilityBlockStatement:
	parameter = SymbolDeclaration | 
	matrixBlock = MatrixBlock | 
	diagBlock = DiagBlock	|
	sameBlock = SameBlock
;

MatrixBlock:
	 identifier = 'matrix' '(' arguments = Arguments ')'
	 (BEGIN parameters = Symbols END)?  
;

DiagBlock:	  
	 identifier = 'diag' '(' arguments = Arguments ')'
	 (BEGIN parameters = Symbols END)?  
;

SameBlock:	  
	 identifier = 'same' '(' arguments = Arguments ')'
	 (BEGIN parameters = SymbolNames END)?  
;

Symbols:
	symbols += Symbol (=> ',' symbols += Symbol)*
;

Symbol:
	symbolName = SymbolName "=" expression = AnyExpression |
	expression = AnyExpression
;

SymbolNames:
	symbolNames += SymbolName (=> ',' symbolNames += SymbolName)*
;

//////////////////////////////////////////////////////////
//Data Object
//////////////////////////////////////////////////////////

InlineBlock:
	identifier = 'INLINE' 
	BEGIN (variables = VariableList)? (values = NumericList)? END 
;

NumericList:
	values += NumericValue (=> (',' | ';')? values += (NumericValue | '.'))* 
;

VariableList:
	identifiers += SymbolName (=> (',' | ';')? identifiers += SymbolName)* //Ref to VaraibleName +
;

//////////////////////////////////////////////////////////
//Design Object
//////////////////////////////////////////////////////////

DesignObjectBlock:
	studyDesignBlock = StudyDesignBlock |
	populationFeaturesBlock = PopulationFeaturesBlock |
	adminBlock = AdministrationBlock |
	actionBlock = ActionBlock |
	samplingBlock = SamplingBlock
;

StudyDesignBlock:
	identifier = 'STUDY_DESIGN'
	BEGIN variables += SymbolDeclaration* END 
;

PopulationFeaturesBlock:
	identifier = 'POPULATION_FEATURES'
	BEGIN variables += SymbolDeclaration* END
;

AdministrationBlock:
	identifier = 'ADMINISTRATION'
	BEGIN variables += SymbolDeclaration* END
;

ActionBlock:
	identifier = 'ACTION'
	BEGIN variables += SymbolDeclaration* END
;

SamplingBlock:
	identifier = 'SAMPLING'
	BEGIN variables += SymbolDeclaration* END
;

//////////////////////////////////////////////////////////
//Common
//////////////////////////////////////////////////////////

FormalArguments:
	arguments += ArgumentName (=> ',' arguments += ArgumentName)*
;

ArgumentName:
	name=ID
;

FunctionName:
	name=ID
;

FunctionCall:
	identifier = FunctionName '(' arguments = Arguments? ')' 
;

BlockStatement:
	symbol = SymbolDeclaration |
	functionCall = FunctionCall |
	statement = ConditionalStatement |
	targetBlock = TargetBlock
;

TargetBlock: 
	identifier = 'TARGET_CODE' ('(' arguments = Arguments ')' )? 
	BEGIN  externalCode = EXTERNAL_CODE END
;

TargetLanguage:
	identifier = ('NMTRAN_CODE' | 
	'MLXTRAN_CODE' | 
	'PML_CODE' | 
	'BUGS_CODE' | 
	'R_CODE' | 
	'MATLAB_CODE') 	
;

terminal EXTERNAL_CODE:
	'***' -> '***'
; 

SymbolName:
	name = ID
;

SymbolDeclaration:
	(symbolName = SymbolName | argumentName = FullyQualifiedArgumentName)
		("=" expression = AnyExpression | randomList = RandomList)? 
	| (functionName = FunctionName '(' (symbolName = SymbolName | argumentName = FullyQualifiedArgumentName) ')') 
		("=" expression = AnyExpression | randomList = RandomList)		
;

EnumType:
	type = VarType |
	use = UseType |       
	target = TargetLanguage |
	variability = VariabilityType |
	interpolation = InterpolationType |
	input = InputType |
	trial = TrialType
;

TrialType:
	identifier = ('simple' | 'combined' | 'sequential')
;

Constant:
	identifier = ('INF' | 'T' | 'NEWIND' | 'IREP' | 'ICALL' | 'MIXEST' | 'MIXNUM')
;

VarType:
	categorical = 'categorical' ('(' arguments = FormalArguments ')')? | 
	continuous = 'continuous' | 
	likelihood = 'likelihood' |
	M2LL = 'M2LL' 	
;

InputType:
	identifier = ('nonmemFormat' | 'eventFormat')
;

InterpolationType:
	identifier = (
		'constant' | 'linear' | 'nearest' | 'spline' | 'pchip' | 'cubic'
	)
;

UseType:
	identifier = ('id'| 
	'idv' |
	'amt' | 
	'dv' | 
	'dvid' | 
	'ytype' | 
	'itype' |
	'covariate' |
	'reg' | 
	'time' | 
	'dose'| 
	'cat' | 
	'occ' | 
	'occasion' | 
	'adm' | 
	'cens' | 
	'limit' | 
	'rate' | 
	'tinf' | 
	'ss' | 
	'addl' | 
	'ii' | 
	'tau' | 
	'mdv' | 
	'evid' | 
	'cmt')
;

VariabilityType:
	identifier = ('SD' | 'VAR')
;

Distribution: 
	identifier = ('bernoulli' |
	'betaDistribution' |
	'binomial' |
	'categorical' | 
	'cauchy' | 	
	'chiSquare' |
	'dirichlet' | 	
	'exponential' | 	
	'fDistribution' |
	'gamma' | 
	'geometric' | 
	'hypergeometric' |
	'inverseGamma' |	
	'laplace' |	
	'logistic' |
	'logNormal'	|
	'multinomial' |
	'multivariateNormal' | 	
	'multivariateStudentT' | 	
	'negativeBinomial' |
	'normal' |
	'normalInverseGamma' |
	'pareto' |
	'poisson' |
	'unif' |
	'studentT' |
	'uniform' |
	'weibull' |
	'wishart' |
	//mixtute models: mixtureModel left for compatibility
	'mixtureModel' |  	
	'discreteUnivariateMixtureModel' |
    'discreteMultivariateMixtureModel' |
    'categoricalUnivariateMixtureModel' |
	'categoricalMultivariateMixtureModel' |
	'continuousMultivariateMixtureModel' |
	'continuousUnivariateMixtureModel'
	)
;

AnyExpression:
	expression = Expression |
	list = List | 
	vector = Vector |
	type = EnumType 
;

//TODO replace number and value with expression
Primary:
	number = NumericValue |
	symbol = SymbolName | 
	string = STRING |
	vector = Vector 
;

List:
	identifier = BEGIN arguments = Arguments END
;

RandomList:
	identifier = '~' '(' arguments = DistributionArguments ')'
;

DistributionArguments:
	arguments += DistributionArgument (=> ',' arguments += DistributionArgument)*
;

DistributionArgument: 
	(argumentName = ArgumentName "=")? (distribution = Distribution | expression = AnyExpression | component = RandomList)
; 

Arguments: 
	arguments += Argument (=> ',' arguments += Argument)*
;

Argument:
	argumentName = ArgumentName "=" expression = AnyExpression |
	expression = AnyExpression
;

ConditionalStatement:
	'if' '('expression=OrExpression')' 
		(ifStatement = BlockStatement | ifBlock = Block)
	(=> 'else' 
		(elseStatement = BlockStatement | elseBlock = Block)
	)? 
;

Block: {Block}
	BEGIN statements += BlockStatement* END
;

ParExpression:
	'(' expression = Expression')';
	
Expression:
	conditionalExpression = ConditionalExpression 
;	
	
ConditionalExpression:
	expression = OrExpression ('?' expression1 = Expression ':' expression2 = Expression)?;

OrExpression:
	expression += AndExpression (operator += LogicalOrOperator expression += AndExpression)*;

AndExpression:
	expression += LogicalExpression (operator += LogicalAndOperator expression += LogicalExpression)*;	

LogicalExpression:
	(negation = "!")? (
		(boolean = BOOLEAN) | 
		(expression1 = AdditiveExpression (operator = LogicalOperator expression2 = AdditiveExpression)?)
	)
;

AdditiveExpression:
	expression += MultiplicativeExpression (operator += AdditiveOperator expression+=MultiplicativeExpression)* |
	string = STRING	 
;

MultiplicativeExpression:
	expression += PowerExpression (operator += MultiplicativeOperator expression += PowerExpression)*;

PowerExpression:
	expression += UnaryExpression (operator += PowerOperator expression += UnaryExpression)*;

UnaryExpression:
	operator = UnaryOperator expression = UnaryExpression |  
	parExpression = ParExpression |
	number = NumericValue |
	symbol = SymbolName |
	constant = Constant |
	attribute = FullyQualifiedArgumentName | 
	functionCall = FunctionCall 
;

Vector:
	'[' values += Primary (=> ',' values += Primary)* ']'
;	

FullyQualifiedArgumentName:
	parent = SymbolName selectors += Selector+  
;

Selector:
	('.' argumentName = ArgumentName ) | ('[' selector = INTEGER ']')
;

ObjectName:
	name = ID
;

LogicalAndOperator: '&&'
;		

LogicalOrOperator: '||'
;

LogicalOperator:
	'<' | 
	'>' | 
	"<=" | 
	">=" | 
	'==' | 
	'!=';

PowerOperator:
	'^'
;

MultiplicativeOperator:
	'*' | '/' | '%'  
;	

AdditiveOperator:
	'+' | '-'
;

UnaryOperator:
	'+' | '-' 
;

NumericValue:	
	INTEGER | FLOAT
; 
	
terminal STRING:
	'"' (ESCAPE_SEQUENCE | !('\\' | '"'))* '"';

terminal fragment ESCAPE_SEQUENCE:
	'\\' ('b' | 't' | 'n' | 'f' | 'r' | '\"' | '\'' | '\\')
	| UNICODE_ESCAPE
	| OCTAL_ESCAPE;

terminal fragment OCTAL_ESCAPE:
	  '\\' ('0'..'3') ('0'..'7') ('0'..'7')
	| '\\' ('0'..'7') ('0'..'7')
	| '\\' ('0'..'7');

terminal fragment UNICODE_ESCAPE:
	'\\' 'u' HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT;

terminal fragment HEXDIGIT:
	('0'..'9' | 'a'..'f' | 'A'..'F');
	
terminal BOOLEAN:
    'true' | 'false';		
	
terminal INTEGER:
	('0' | '1'..'9' '0'..'9'*);
	
terminal FLOAT
    : '0'..'9' + '.' '0'..'9'* EXPONENT?
    | '.' '0'..'9'+ EXPONENT?
    | '0'..'9'+ EXPONENT
    | ('0'..'9')
    ;

terminal fragment EXPONENT
	: ('e'|'E'|'d'|'D') ('+'|'-')?('0'..'9')+;

terminal SL_COMMENT : ('#') !('\n'|'\r')* ('\r'? '\n')? ;

terminal ML_COMMENT : '/#' -> '#/';

terminal BEGIN: '{';

terminal END: '}' ;

terminal ID: ('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'| '0'..'9')*;



