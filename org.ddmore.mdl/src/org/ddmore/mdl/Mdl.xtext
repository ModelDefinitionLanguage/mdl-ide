grammar org.ddmore.mdl.Mdl with org.eclipse.xtext.common.Terminals
generate mdl "http://www.ddmore.org/mdl/Mdl"


//An MDL specification may include any number of MDL objects
mcl hidden(WS, ML_COMMENT, SL_COMMENT):
	objects += mcl_obj* 
;

//Five MDL object types are supported
mcl_obj:
	model_obj = model_obj | 
	param_obj = param_obj | 
	data_obj = data_obj | 
	task_obj = task_obj | 
	tel_obj = tel_obj
;

//////////////////////////////////////////////////////////
//OBJECTS
//A model object consists of multiple model object blocks 
model_obj:   
	identifier = ID '=' 'mdlobj' BEGIN
		blocks += model_obj_block*
	END
;


//A parameter object consists of multiple parameter object blocks
param_obj:
	    identifier = ID '=' 'parobj' BEGIN 	
		blocks += param_obj_block* 
	END
;

//A data object consists of multiple data object blocks
data_obj:
	   identifier = ID '=' 'dataobj' BEGIN 
	   blocks += data_obj_block*
	END
;

//A task object may include several task blocks
task_obj:
	identifier = ID '=' 'taskobj' BEGIN 
		blocks += task_obj_block* 
	END
;

//TEL object syntactically consists of multiple function declarations
tel_obj:
	identifier = ID '=' 'telobj' BEGIN
		 blocks += block_statement* 
	END
;

//////////////////////////////////////////////////////////

//A model object block is either a general block or a block with specific structure
//In particular, INDIVIDUAL VARIABLES and MODEL PREDICTION blocks may include 
//sub-blocks or structures that are not allowed in other blocks;
model_obj_block: 
	individual_model_obj_block = individual_model_obj_block | 
	model_prediction_obj_block = model_prediction_obj_block |
	random_variable_definition_block = random_variable_definition_block |
	input_variables_block = input_variables_block |
	structural_parameters_block = structural_parameters_block |
	variability_parameters_block = variability_parameters_block |
	output_variables_block = output_variables_block |
	group_variables = group_variables | 
	observation_block = observation_block |
	estimation_block = estimation_block |
	simulation_block = simulation_block
;

individual_model_obj_block:
	identifier = 'INDIVIDUAL_VARIABLES' block = block
;

model_prediction_obj_block:
	identifier = 'MODEL_PREDICTION' block = model_block  
;

//A random variable definition is a special sub-block that starts with RANDOM VARIABLE DEFINITION keyword
random_variable_definition_block:
	identifier = 'RANDOM_VARIABLE_DEFINITION' block = block 
;

input_variables_block:
  indentifier = 'INPUT_VARIABLES' block = block 
;

structural_parameters_block:
  identifier = 'STRUCTURAL_PARAMETERS' block = block
; 

variability_parameters_block:
  identifier = 'VARIABILITY_PARAMETERS' block = block
;

output_variables_block:
	identifier = 'OUTPUT_VARIABLES' block = block
;

group_variables:
	identifier = 'GROUP_VARIABLES' block = block
;

observation_block:
	identifier = 'OBSERVATION' block = block	
;

estimation_block:
	identifier = 'ESTIMATION' block = block
;

simulation_block:
	identifier = 'SIMULATION' block = block
;

//Two types of parameter object blocks are supported, STRUCTURAL and VARIABILITY
param_obj_block:
	structural_block = structural_block |
	variability_block = variability_block
;

structural_block:
	identifier='STRUCTURAL' block = block 
;

variability_block:
	identifier='VARIABILITY' block = variability_block_content
;

//Two types of data object blocks are supported, HEADER and FILE
data_obj_block:
	header_block = header_block|
	file_block = file_block;
 
 header_block:
 	identifier='HEADER' block = block 
 ;
 
 file_block:
	identifier='FILE' block = file_block_content 
 ;
 
//A task block is either a function declaration or a sub-block, 
//two types of sub-blocks are allowed, PARAMETERS and DATA
task_obj_block: 
	function_declaration = function_declaration | 
	parameters_block = parameters_block |
	data_block = data_block;

parameters_block:
	identifier = 'PARAMETERS' block = block 
;

data_block:
	identifier = 'DATA' block = block 
;

//A MODEL PREDICTION blocks consists of multiples statements
model_block: {model_block}
	BEGIN statements += model_block_statement* 
	END
;

//A MODEL PREDICTION  block statement is either a general statement, ODE or LIBRARY sub-block 
model_block_statement: 
	statement = block_statement | 
	ode_block = ode_block | 
	library_block = library_block
;

//LIBRARY sub-block
library_block: 
	identifier = 'LIBRARY' block = block
;

//ODE (ORDINARY DIFFERENTIAL EQUATIONS) sub-block
ode_block:
	identifier = 'ODE' block = block
;

/////////////////////////////////////////////////////////
//Parameter object terms
//////////////////////////////////////////////////////////

variability_block_content: {variability_block_content}
	BEGIN blocks += variability_block_statement*
	END
;

variability_block_statement:
	block_statement = block_statement | 
	block_block = block_subblock | 
	diag_block = diag_subblock	
;

block_subblock:
	 identifier = 'block' block = variability_subblock
;

diag_subblock:	  
	 identifier = 'diag' block = variability_subblock
;

variability_subblock: 
	'(' arguments = arguments ')'
;

//////////////////////////////////////////////////////////
//Data object terms
//////////////////////////////////////////////////////////

file_block_content: {file_block_content} 
	BEGIN blocks += file_block_statement* END
;
file_block_statement:
	statement = block_statement | 
	inline_block = inline_block | 
	design_block = design_block | 
	rsscript_block = rsscript_block
;

inline_block:
	identifier = 'INLINE' block = inline_block_content ;

design_block:	 
	identifier = 'DESIGN' block = block;
	
rsscript_block:	
	identifier = 'RSSCRIPT' block = block  			
;

inline_block_content: {inline_block_content}
	BEGIN (identifiers += ID)* (values += (NUMBER | '.'))* END
;

//////////////////////////////////////////////////////////
//Function declaration and call
//////////////////////////////////////////////////////////

function_declaration:
	identifier = ID "=" 'function' 
	'(' formal_arguments = formal_arguments ')'
	function_body = function_body
;

function_body: {function_body}	
	BEGIN	(blocks += function_subblock)* END
;
function_subblock:
	identifier = 'ESTIMATE' estimate_defn = block | 
	identifier = 'SIMULATE' simulate_defn = block 
;

formal_arguments:
	identifiers += ID (=> ',' identifiers += ID)*
;

function_call:
	funct_name = ID '(' arguments = arguments ')'
;

//////////////////////////////////////////////////////////
//Common terms
//////////////////////////////////////////////////////////

block: {block} BEGIN statements += block_statement* END ;

block_statement:
	variable_declaration = variable_declaration | 
	function_call = function_call |
	statement = statement |
	verbatim_block = verbatim_block
;

verbatim_block: 
	identifier = 'VERBATIM' BEGIN (block = target_block | external_code = EXTERNAL_CODE) END
;

target_block:
	identifier = target_language BEGIN external_code = EXTERNAL_CODE END
;

target_language:
	'NMTRAN' | 'MLXTRAN' | 'PML' | 'BUGS' | 'RCODE' | 'MATLAB' 	
;

//TARGET
//MIXTURE 
//PRIOR

terminal EXTERNAL_CODE: 
	'***' -> '***'
; 

variable_declaration:
	identifier = variable_name ( 
		"=" expression = any_expression | 
		random_list = random_list
	)?	
;

any_expression:
	expression = expression | list = list | ode_list = ode_list | random_list = random_list
;

expression:
	conditional_expression = conditional_expression | string_expression += STRING ('+' string_expression += STRING)*	
;	

list:
	'list' '(' arguments = arguments ')'
;

//An ODE list
ode_list:
	 'ode' '(' arguments = arguments ')' 
;

 //A random list is identified by ~ symbol
random_list:
	 '~' '(' arguments = arguments ')'
;

arguments: 
	arguments += argument (=> ',' arguments += argument)*
;

argument:
	identifier = ID "=" expression = any_expression |
	expression = any_expression
;

statement:
	block = block
	| 'if' par_expression=par_expression if_statement = block_statement (=> 'else' else_statement = block_statement)? 
;

par_expression:
	'(' expression = expression')';
	
conditional_expression:
	conditional_or_expression = conditional_or_expression ('?' expression1 = expression ':' expression2 = expression)?;

conditional_or_expression:
	conditional_and_expression += conditional_and_expression (operator += or_op conditional_and_expression += conditional_and_expression)*;

conditional_and_expression:
	relational_expression += relational_expression (operator += and_op relational_expression += relational_expression)*;	

relational_expression:
	(negation = "!")? (boolean = BOOLEAN | 
	additive_expression += additive_expression (relational_op += relational_op additive_expression += additive_expression)*);

additive_expression:
	multiplicative_expression += multiplicative_expression (additive_op += additive_op multiplicative_expression+=multiplicative_expression)*;

multiplicative_expression:
	power_expression += power_expression (multiplicative_op += multiplicative_op power_expression += power_expression)*;

power_expression:
	unary_expression += unary_expression (power_op += power_op unary_expression += unary_expression)*;

unary_expression:
	operator = unary_op unary_expression = unary_expression |  
	par_expression = par_expression |
	function_call = function_call |
	primary = primary  
;

primary: 
	  number = NUMBER
	| identifier = variable_name
	;
	
variable_name:
	identifier += ID (selector += selector)? ('.' identifier += ID (selector += selector)?)* 
;
	
selector:
	'[' expression += primary (=> ',' expression += primary)* ']';	
		
and_op: '&&'
;		

or_op:
	'||'
;

relational_op:
	'<' | '>' | "<=" | ">=" | '==' | '!=';

power_op:
	'^'
;

multiplicative_op:
	'*' | '/' | '%'  
;	

additive_op:
	'+' | '-'
;

unary_op:
	'+' | '-' 
;

NUMBER:
	INTEGER | FLOAT; 
	
terminal STRING:
	'"' (ESCAPE_SEQUENCE | !('\\' | '"'))* '"';

terminal fragment ESCAPE_SEQUENCE:
	'\\' ('b' | 't' | 'n' | 'f' | 'r' | '\"' | '\'' | '\\')
	| UNICODE_ESCAPE
	| OCTAL_ESCAPE;

terminal fragment OCTAL_ESCAPE:
	  '\\' ('0'..'3') ('0'..'7') ('0'..'7')
	| '\\' ('0'..'7') ('0'..'7')
	| '\\' ('0'..'7');

terminal fragment UNICODE_ESCAPE:
	'\\' 'u' HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT;

terminal fragment HEXDIGIT:
	('0'..'9' | 'a'..'f' | 'A'..'F');
	
terminal BOOLEAN:
    'true' | 'false';		
	
terminal INTEGER:
	('0' | '1'..'9' '0'..'9'*);
	
terminal FLOAT
    : '0'..'9' + '.' '0'..'9'* EXPONENT?
    | '.' '0'..'9'+ EXPONENT?
    | '0'..'9'+ EXPONENT
    | ('0'..'9')
    ;

terminal fragment EXPONENT
	: ('e'|'E') ('+'|'-')?('0'..'9')+;

terminal SL_COMMENT : ('#') !('\n'|'\r')* ('\r'? '\n')? ;

terminal BEGIN: '{';

terminal END: '}' ;



