package eu.ddmore.converter.mdl2pharmml
import org.ddmore.mdl.mdl.Mcl


class Mdl2PharmML{
	extension Constants dataType = new Constants();


	//Print file name and analyse all MCL objects in the source file
  	def convertToPharmML(Mcl m){
		val ReferenceResolver resolver = new ReferenceResolver(m); 
		val MathPrinter mathPrinter = new MathPrinter(resolver);
		val mdPrinter = new ModelDefinitionPrinter(m, mathPrinter, resolver);  		
		val msPrinter = new ModellingStepsPrinter(m, mathPrinter, resolver);  		

		'''
		<?xml version="1.0" encoding="UTF-8"?>
		<PharmML 
			«print_PharmML_NameSpaces»
			writtenVersion="«writtenVersion»">
			<ct:Name>"«mathPrinter.fileName(m)» - generated by MDL2PharmML v.«mathPrinter.mdlVersion»"</ct:Name>
			«FOR s: resolver.ind_vars»
				<IndependentVariable symbId="«s»"/>
			«ENDFOR»
			«mdPrinter.print_mdef_ModelDefinition»
			«msPrinter.print_msteps_ModellingSteps»
		</PharmML>
		'''
		//print_design_TrialDesign
	}
	
	//+ Print PharmML namespaces
	def print_PharmML_NameSpaces()
		'''
		xmlns:xsi="«xsi»" 
		xmlns="«xmlns_pharmML»"
		xsi:schemaLocation="«xsi_schemaLocation»"
		xmlns:math="«xmlns_math»"
		xmlns:ct="«xmlns_ct»"
		xmlns:ds="«xmlns_ds»"
		xmlns:mdef="«xmlns_mdef»"
		xmlns:mstep="«xmlns_mstep»"
		xmlns:design="«xmlns_design»"
		'''
}