/*
* generated by Xtext
*/

package org.ddmore.mdl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MdlGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mcl");
		private final Assignment cObjectsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cObjectsMcl_objParserRuleCall_0 = (RuleCall)cObjectsAssignment.eContents().get(0);
		
		////An MDL specification may include any number of MDL objects
		//
		//mcl hidden(WS, ML_COMMENT, SL_COMMENT):
		//
		//	objects+=mcl_obj*;
		public ParserRule getRule() { return rule; }

		//objects+=mcl_obj*
		public Assignment getObjectsAssignment() { return cObjectsAssignment; }

		//mcl_obj
		public RuleCall getObjectsMcl_objParserRuleCall_0() { return cObjectsMcl_objParserRuleCall_0; }
	}

	public class Mcl_objElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "mcl_obj");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cModel_objAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cModel_objModel_objParserRuleCall_0_0 = (RuleCall)cModel_objAssignment_0.eContents().get(0);
		private final Assignment cParam_objAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cParam_objParam_objParserRuleCall_1_0 = (RuleCall)cParam_objAssignment_1.eContents().get(0);
		private final Assignment cData_objAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cData_objData_objParserRuleCall_2_0 = (RuleCall)cData_objAssignment_2.eContents().get(0);
		private final Assignment cTask_objAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cTask_objTask_objParserRuleCall_3_0 = (RuleCall)cTask_objAssignment_3.eContents().get(0);
		private final Assignment cTel_objAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cTel_objTel_objParserRuleCall_4_0 = (RuleCall)cTel_objAssignment_4.eContents().get(0);
		
		////Five MDL object types are supported
		//
		//mcl_obj:
		//
		//	model_obj=model_obj | param_obj=param_obj | data_obj=data_obj | task_obj=task_obj | tel_obj=tel_obj;
		public ParserRule getRule() { return rule; }

		//model_obj=model_obj | param_obj=param_obj | data_obj=data_obj | task_obj=task_obj | tel_obj=tel_obj
		public Alternatives getAlternatives() { return cAlternatives; }

		//model_obj=model_obj
		public Assignment getModel_objAssignment_0() { return cModel_objAssignment_0; }

		//model_obj
		public RuleCall getModel_objModel_objParserRuleCall_0_0() { return cModel_objModel_objParserRuleCall_0_0; }

		//param_obj=param_obj
		public Assignment getParam_objAssignment_1() { return cParam_objAssignment_1; }

		//param_obj
		public RuleCall getParam_objParam_objParserRuleCall_1_0() { return cParam_objParam_objParserRuleCall_1_0; }

		//data_obj=data_obj
		public Assignment getData_objAssignment_2() { return cData_objAssignment_2; }

		//data_obj
		public RuleCall getData_objData_objParserRuleCall_2_0() { return cData_objData_objParserRuleCall_2_0; }

		//task_obj=task_obj
		public Assignment getTask_objAssignment_3() { return cTask_objAssignment_3; }

		//task_obj
		public RuleCall getTask_objTask_objParserRuleCall_3_0() { return cTask_objTask_objParserRuleCall_3_0; }

		//tel_obj=tel_obj
		public Assignment getTel_objAssignment_4() { return cTel_objAssignment_4; }

		//tel_obj
		public RuleCall getTel_objTel_objParserRuleCall_4_0() { return cTel_objTel_objParserRuleCall_4_0; }
	}

	public class Model_objElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "model_obj");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cMdlobjKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cBlocksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlocksModel_obj_blockParserRuleCall_4_0 = (RuleCall)cBlocksAssignment_4.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		////////////////////////////////////////////////////////////
		//
		////OBJECTS
		//
		////A model object consists of multiple model object blocks 
		//
		//model_obj:
		//
		//	identifier=ID "=" "mdlobj" BEGIN blocks+=model_obj_block* END;
		public ParserRule getRule() { return rule; }

		//identifier=ID "=" "mdlobj" BEGIN blocks+=model_obj_block* END
		public Group getGroup() { return cGroup; }

		//identifier=ID
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_0() { return cIdentifierIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"mdlobj"
		public Keyword getMdlobjKeyword_2() { return cMdlobjKeyword_2; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }

		//blocks+=model_obj_block*
		public Assignment getBlocksAssignment_4() { return cBlocksAssignment_4; }

		//model_obj_block
		public RuleCall getBlocksModel_obj_blockParserRuleCall_4_0() { return cBlocksModel_obj_blockParserRuleCall_4_0; }

		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}

	public class Param_objElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "param_obj");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cParobjKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cBlocksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlocksParam_obj_blockParserRuleCall_4_0 = (RuleCall)cBlocksAssignment_4.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		////A parameter object consists of multiple parameter object blocks
		//
		//param_obj:
		//
		//	identifier=ID "=" "parobj" BEGIN blocks+=param_obj_block* END;
		public ParserRule getRule() { return rule; }

		//identifier=ID "=" "parobj" BEGIN blocks+=param_obj_block* END
		public Group getGroup() { return cGroup; }

		//identifier=ID
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_0() { return cIdentifierIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"parobj"
		public Keyword getParobjKeyword_2() { return cParobjKeyword_2; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }

		//blocks+=param_obj_block*
		public Assignment getBlocksAssignment_4() { return cBlocksAssignment_4; }

		//param_obj_block
		public RuleCall getBlocksParam_obj_blockParserRuleCall_4_0() { return cBlocksParam_obj_blockParserRuleCall_4_0; }

		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}

	public class Data_objElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "data_obj");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDataobjKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cBlocksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlocksData_obj_blockParserRuleCall_4_0 = (RuleCall)cBlocksAssignment_4.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		////A data object consists of multiple data object blocks
		//
		//data_obj:
		//
		//	identifier=ID "=" "dataobj" BEGIN blocks+=data_obj_block* END;
		public ParserRule getRule() { return rule; }

		//identifier=ID "=" "dataobj" BEGIN blocks+=data_obj_block* END
		public Group getGroup() { return cGroup; }

		//identifier=ID
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_0() { return cIdentifierIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"dataobj"
		public Keyword getDataobjKeyword_2() { return cDataobjKeyword_2; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }

		//blocks+=data_obj_block*
		public Assignment getBlocksAssignment_4() { return cBlocksAssignment_4; }

		//data_obj_block
		public RuleCall getBlocksData_obj_blockParserRuleCall_4_0() { return cBlocksData_obj_blockParserRuleCall_4_0; }

		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}

	public class Task_objElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "task_obj");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTaskobjKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cBlocksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlocksTask_obj_blockParserRuleCall_4_0 = (RuleCall)cBlocksAssignment_4.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		////A task object may include several task blocks
		//
		//task_obj:
		//
		//	identifier=ID "=" "taskobj" BEGIN blocks+=task_obj_block* END;
		public ParserRule getRule() { return rule; }

		//identifier=ID "=" "taskobj" BEGIN blocks+=task_obj_block* END
		public Group getGroup() { return cGroup; }

		//identifier=ID
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_0() { return cIdentifierIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"taskobj"
		public Keyword getTaskobjKeyword_2() { return cTaskobjKeyword_2; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }

		//blocks+=task_obj_block*
		public Assignment getBlocksAssignment_4() { return cBlocksAssignment_4; }

		//task_obj_block
		public RuleCall getBlocksTask_obj_blockParserRuleCall_4_0() { return cBlocksTask_obj_blockParserRuleCall_4_0; }

		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}

	public class Tel_objElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "tel_obj");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTelobjKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cBlocksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlocksBlock_statementParserRuleCall_4_0 = (RuleCall)cBlocksAssignment_4.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		////TEL object syntactically consists of multiple function declarations
		//
		//tel_obj:
		//
		//	identifier=ID "=" "telobj" BEGIN blocks+=block_statement* END;
		public ParserRule getRule() { return rule; }

		//identifier=ID "=" "telobj" BEGIN blocks+=block_statement* END
		public Group getGroup() { return cGroup; }

		//identifier=ID
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_0() { return cIdentifierIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"telobj"
		public Keyword getTelobjKeyword_2() { return cTelobjKeyword_2; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }

		//blocks+=block_statement*
		public Assignment getBlocksAssignment_4() { return cBlocksAssignment_4; }

		//block_statement
		public RuleCall getBlocksBlock_statementParserRuleCall_4_0() { return cBlocksBlock_statementParserRuleCall_4_0; }

		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}

	public class Model_obj_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "model_obj_block");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIndividual_model_obj_blockAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIndividual_model_obj_blockIndividual_model_obj_blockParserRuleCall_0_0 = (RuleCall)cIndividual_model_obj_blockAssignment_0.eContents().get(0);
		private final Assignment cModel_prediction_obj_blockAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cModel_prediction_obj_blockModel_prediction_obj_blockParserRuleCall_1_0 = (RuleCall)cModel_prediction_obj_blockAssignment_1.eContents().get(0);
		private final Assignment cRandom_variable_definition_blockAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cRandom_variable_definition_blockRandom_variable_definition_blockParserRuleCall_2_0 = (RuleCall)cRandom_variable_definition_blockAssignment_2.eContents().get(0);
		private final Assignment cInput_variables_blockAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cInput_variables_blockInput_variables_blockParserRuleCall_3_0 = (RuleCall)cInput_variables_blockAssignment_3.eContents().get(0);
		private final Assignment cStructural_parameters_blockAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cStructural_parameters_blockStructural_parameters_blockParserRuleCall_4_0 = (RuleCall)cStructural_parameters_blockAssignment_4.eContents().get(0);
		private final Assignment cVariability_parameters_blockAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cVariability_parameters_blockVariability_parameters_blockParserRuleCall_5_0 = (RuleCall)cVariability_parameters_blockAssignment_5.eContents().get(0);
		private final Assignment cOutput_variables_blockAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cOutput_variables_blockOutput_variables_blockParserRuleCall_6_0 = (RuleCall)cOutput_variables_blockAssignment_6.eContents().get(0);
		private final Assignment cGroup_variablesAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cGroup_variablesGroup_variablesParserRuleCall_7_0 = (RuleCall)cGroup_variablesAssignment_7.eContents().get(0);
		private final Assignment cObservation_blockAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cObservation_blockObservation_blockParserRuleCall_8_0 = (RuleCall)cObservation_blockAssignment_8.eContents().get(0);
		private final Assignment cEstimation_blockAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cEstimation_blockEstimation_blockParserRuleCall_9_0 = (RuleCall)cEstimation_blockAssignment_9.eContents().get(0);
		private final Assignment cSimulation_blockAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final RuleCall cSimulation_blockSimulation_blockParserRuleCall_10_0 = (RuleCall)cSimulation_blockAssignment_10.eContents().get(0);
		
		////////////////////////////////////////////////////////////
		//
		////A model object block is either a general block or a block with specific structure
		//
		////In particular, INDIVIDUAL VARIABLES and MODEL PREDICTION blocks may include 
		//
		////sub-blocks or structures that are not allowed in other blocks;
		//
		//model_obj_block:
		//
		//	individual_model_obj_block=individual_model_obj_block | model_prediction_obj_block=model_prediction_obj_block |
		//
		//	random_variable_definition_block=random_variable_definition_block | input_variables_block=input_variables_block |
		//
		//	structural_parameters_block=structural_parameters_block | variability_parameters_block=variability_parameters_block |
		//
		//	output_variables_block=output_variables_block | group_variables=group_variables | observation_block=observation_block
		//
		//	| estimation_block=estimation_block | simulation_block=simulation_block;
		public ParserRule getRule() { return rule; }

		//individual_model_obj_block=individual_model_obj_block | model_prediction_obj_block=model_prediction_obj_block |
		//
		//random_variable_definition_block=random_variable_definition_block | input_variables_block=input_variables_block |
		//
		//structural_parameters_block=structural_parameters_block | variability_parameters_block=variability_parameters_block |
		//
		//output_variables_block=output_variables_block | group_variables=group_variables | observation_block=observation_block
		//
		//| estimation_block=estimation_block | simulation_block=simulation_block
		public Alternatives getAlternatives() { return cAlternatives; }

		//individual_model_obj_block=individual_model_obj_block
		public Assignment getIndividual_model_obj_blockAssignment_0() { return cIndividual_model_obj_blockAssignment_0; }

		//individual_model_obj_block
		public RuleCall getIndividual_model_obj_blockIndividual_model_obj_blockParserRuleCall_0_0() { return cIndividual_model_obj_blockIndividual_model_obj_blockParserRuleCall_0_0; }

		//model_prediction_obj_block=model_prediction_obj_block
		public Assignment getModel_prediction_obj_blockAssignment_1() { return cModel_prediction_obj_blockAssignment_1; }

		//model_prediction_obj_block
		public RuleCall getModel_prediction_obj_blockModel_prediction_obj_blockParserRuleCall_1_0() { return cModel_prediction_obj_blockModel_prediction_obj_blockParserRuleCall_1_0; }

		//random_variable_definition_block=random_variable_definition_block
		public Assignment getRandom_variable_definition_blockAssignment_2() { return cRandom_variable_definition_blockAssignment_2; }

		//random_variable_definition_block
		public RuleCall getRandom_variable_definition_blockRandom_variable_definition_blockParserRuleCall_2_0() { return cRandom_variable_definition_blockRandom_variable_definition_blockParserRuleCall_2_0; }

		//input_variables_block=input_variables_block
		public Assignment getInput_variables_blockAssignment_3() { return cInput_variables_blockAssignment_3; }

		//input_variables_block
		public RuleCall getInput_variables_blockInput_variables_blockParserRuleCall_3_0() { return cInput_variables_blockInput_variables_blockParserRuleCall_3_0; }

		//structural_parameters_block=structural_parameters_block
		public Assignment getStructural_parameters_blockAssignment_4() { return cStructural_parameters_blockAssignment_4; }

		//structural_parameters_block
		public RuleCall getStructural_parameters_blockStructural_parameters_blockParserRuleCall_4_0() { return cStructural_parameters_blockStructural_parameters_blockParserRuleCall_4_0; }

		//variability_parameters_block=variability_parameters_block
		public Assignment getVariability_parameters_blockAssignment_5() { return cVariability_parameters_blockAssignment_5; }

		//variability_parameters_block
		public RuleCall getVariability_parameters_blockVariability_parameters_blockParserRuleCall_5_0() { return cVariability_parameters_blockVariability_parameters_blockParserRuleCall_5_0; }

		//output_variables_block=output_variables_block
		public Assignment getOutput_variables_blockAssignment_6() { return cOutput_variables_blockAssignment_6; }

		//output_variables_block
		public RuleCall getOutput_variables_blockOutput_variables_blockParserRuleCall_6_0() { return cOutput_variables_blockOutput_variables_blockParserRuleCall_6_0; }

		//group_variables=group_variables
		public Assignment getGroup_variablesAssignment_7() { return cGroup_variablesAssignment_7; }

		//group_variables
		public RuleCall getGroup_variablesGroup_variablesParserRuleCall_7_0() { return cGroup_variablesGroup_variablesParserRuleCall_7_0; }

		//observation_block=observation_block
		public Assignment getObservation_blockAssignment_8() { return cObservation_blockAssignment_8; }

		//observation_block
		public RuleCall getObservation_blockObservation_blockParserRuleCall_8_0() { return cObservation_blockObservation_blockParserRuleCall_8_0; }

		//estimation_block=estimation_block
		public Assignment getEstimation_blockAssignment_9() { return cEstimation_blockAssignment_9; }

		//estimation_block
		public RuleCall getEstimation_blockEstimation_blockParserRuleCall_9_0() { return cEstimation_blockEstimation_blockParserRuleCall_9_0; }

		//simulation_block=simulation_block
		public Assignment getSimulation_blockAssignment_10() { return cSimulation_blockAssignment_10; }

		//simulation_block
		public RuleCall getSimulation_blockSimulation_blockParserRuleCall_10_0() { return cSimulation_blockSimulation_blockParserRuleCall_10_0; }
	}

	public class Individual_model_obj_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "individual_model_obj_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierINDIVIDUAL_VARIABLESKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//individual_model_obj_block:
		//
		//	identifier="INDIVIDUAL_VARIABLES" block=block;
		public ParserRule getRule() { return rule; }

		//identifier="INDIVIDUAL_VARIABLES" block=block
		public Group getGroup() { return cGroup; }

		//identifier="INDIVIDUAL_VARIABLES"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"INDIVIDUAL_VARIABLES"
		public Keyword getIdentifierINDIVIDUAL_VARIABLESKeyword_0_0() { return cIdentifierINDIVIDUAL_VARIABLESKeyword_0_0; }

		//block=block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}

	public class Model_prediction_obj_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "model_prediction_obj_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierMODEL_PREDICTIONKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockModel_blockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//model_prediction_obj_block:
		//
		//	identifier="MODEL_PREDICTION" block=model_block;
		public ParserRule getRule() { return rule; }

		//identifier="MODEL_PREDICTION" block=model_block
		public Group getGroup() { return cGroup; }

		//identifier="MODEL_PREDICTION"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"MODEL_PREDICTION"
		public Keyword getIdentifierMODEL_PREDICTIONKeyword_0_0() { return cIdentifierMODEL_PREDICTIONKeyword_0_0; }

		//block=model_block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//model_block
		public RuleCall getBlockModel_blockParserRuleCall_1_0() { return cBlockModel_blockParserRuleCall_1_0; }
	}

	public class Random_variable_definition_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "random_variable_definition_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierRANDOM_VARIABLE_DEFINITIONKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		////A random variable definition is a special sub-block that starts with RANDOM VARIABLE DEFINITION keyword
		//
		//random_variable_definition_block:
		//
		//	identifier="RANDOM_VARIABLE_DEFINITION" block=block;
		public ParserRule getRule() { return rule; }

		//identifier="RANDOM_VARIABLE_DEFINITION" block=block
		public Group getGroup() { return cGroup; }

		//identifier="RANDOM_VARIABLE_DEFINITION"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"RANDOM_VARIABLE_DEFINITION"
		public Keyword getIdentifierRANDOM_VARIABLE_DEFINITIONKeyword_0_0() { return cIdentifierRANDOM_VARIABLE_DEFINITIONKeyword_0_0; }

		//block=block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}

	public class Input_variables_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "input_variables_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIndentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIndentifierINPUT_VARIABLESKeyword_0_0 = (Keyword)cIndentifierAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//input_variables_block:
		//
		//	indentifier="INPUT_VARIABLES" block=block;
		public ParserRule getRule() { return rule; }

		//indentifier="INPUT_VARIABLES" block=block
		public Group getGroup() { return cGroup; }

		//indentifier="INPUT_VARIABLES"
		public Assignment getIndentifierAssignment_0() { return cIndentifierAssignment_0; }

		//"INPUT_VARIABLES"
		public Keyword getIndentifierINPUT_VARIABLESKeyword_0_0() { return cIndentifierINPUT_VARIABLESKeyword_0_0; }

		//block=block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}

	public class Structural_parameters_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "structural_parameters_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierSTRUCTURAL_PARAMETERSKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//structural_parameters_block:
		//
		//	identifier="STRUCTURAL_PARAMETERS" block=block;
		public ParserRule getRule() { return rule; }

		//identifier="STRUCTURAL_PARAMETERS" block=block
		public Group getGroup() { return cGroup; }

		//identifier="STRUCTURAL_PARAMETERS"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"STRUCTURAL_PARAMETERS"
		public Keyword getIdentifierSTRUCTURAL_PARAMETERSKeyword_0_0() { return cIdentifierSTRUCTURAL_PARAMETERSKeyword_0_0; }

		//block=block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}

	public class Variability_parameters_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variability_parameters_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierVARIABILITY_PARAMETERSKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//variability_parameters_block:
		//
		//	identifier="VARIABILITY_PARAMETERS" block=block;
		public ParserRule getRule() { return rule; }

		//identifier="VARIABILITY_PARAMETERS" block=block
		public Group getGroup() { return cGroup; }

		//identifier="VARIABILITY_PARAMETERS"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"VARIABILITY_PARAMETERS"
		public Keyword getIdentifierVARIABILITY_PARAMETERSKeyword_0_0() { return cIdentifierVARIABILITY_PARAMETERSKeyword_0_0; }

		//block=block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}

	public class Output_variables_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "output_variables_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierOUTPUT_VARIABLESKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//output_variables_block:
		//
		//	identifier="OUTPUT_VARIABLES" block=block;
		public ParserRule getRule() { return rule; }

		//identifier="OUTPUT_VARIABLES" block=block
		public Group getGroup() { return cGroup; }

		//identifier="OUTPUT_VARIABLES"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"OUTPUT_VARIABLES"
		public Keyword getIdentifierOUTPUT_VARIABLESKeyword_0_0() { return cIdentifierOUTPUT_VARIABLESKeyword_0_0; }

		//block=block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}

	public class Group_variablesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "group_variables");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierGROUP_VARIABLESKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//group_variables:
		//
		//	identifier="GROUP_VARIABLES" block=block;
		public ParserRule getRule() { return rule; }

		//identifier="GROUP_VARIABLES" block=block
		public Group getGroup() { return cGroup; }

		//identifier="GROUP_VARIABLES"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"GROUP_VARIABLES"
		public Keyword getIdentifierGROUP_VARIABLESKeyword_0_0() { return cIdentifierGROUP_VARIABLESKeyword_0_0; }

		//block=block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}

	public class Observation_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "observation_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierOBSERVATIONKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//observation_block:
		//
		//	identifier="OBSERVATION" block=block;
		public ParserRule getRule() { return rule; }

		//identifier="OBSERVATION" block=block
		public Group getGroup() { return cGroup; }

		//identifier="OBSERVATION"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"OBSERVATION"
		public Keyword getIdentifierOBSERVATIONKeyword_0_0() { return cIdentifierOBSERVATIONKeyword_0_0; }

		//block=block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}

	public class Estimation_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "estimation_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierESTIMATIONKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//estimation_block:
		//
		//	identifier="ESTIMATION" block=block;
		public ParserRule getRule() { return rule; }

		//identifier="ESTIMATION" block=block
		public Group getGroup() { return cGroup; }

		//identifier="ESTIMATION"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"ESTIMATION"
		public Keyword getIdentifierESTIMATIONKeyword_0_0() { return cIdentifierESTIMATIONKeyword_0_0; }

		//block=block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}

	public class Simulation_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "simulation_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierSIMULATIONKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//simulation_block:
		//
		//	identifier="SIMULATION" block=block;
		public ParserRule getRule() { return rule; }

		//identifier="SIMULATION" block=block
		public Group getGroup() { return cGroup; }

		//identifier="SIMULATION"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"SIMULATION"
		public Keyword getIdentifierSIMULATIONKeyword_0_0() { return cIdentifierSIMULATIONKeyword_0_0; }

		//block=block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}

	public class Param_obj_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "param_obj_block");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStructural_blockAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStructural_blockStructural_blockParserRuleCall_0_0 = (RuleCall)cStructural_blockAssignment_0.eContents().get(0);
		private final Assignment cVariability_blockAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVariability_blockVariability_blockParserRuleCall_1_0 = (RuleCall)cVariability_blockAssignment_1.eContents().get(0);
		
		////Two types of parameter object blocks are supported, STRUCTURAL and VARIABILITY
		//
		//param_obj_block:
		//
		//	structural_block=structural_block | variability_block=variability_block;
		public ParserRule getRule() { return rule; }

		//structural_block=structural_block | variability_block=variability_block
		public Alternatives getAlternatives() { return cAlternatives; }

		//structural_block=structural_block
		public Assignment getStructural_blockAssignment_0() { return cStructural_blockAssignment_0; }

		//structural_block
		public RuleCall getStructural_blockStructural_blockParserRuleCall_0_0() { return cStructural_blockStructural_blockParserRuleCall_0_0; }

		//variability_block=variability_block
		public Assignment getVariability_blockAssignment_1() { return cVariability_blockAssignment_1; }

		//variability_block
		public RuleCall getVariability_blockVariability_blockParserRuleCall_1_0() { return cVariability_blockVariability_blockParserRuleCall_1_0; }
	}

	public class Structural_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "structural_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierSTRUCTURALKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//structural_block:
		//
		//	identifier="STRUCTURAL" block=block;
		public ParserRule getRule() { return rule; }

		//identifier="STRUCTURAL" block=block
		public Group getGroup() { return cGroup; }

		//identifier="STRUCTURAL"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"STRUCTURAL"
		public Keyword getIdentifierSTRUCTURALKeyword_0_0() { return cIdentifierSTRUCTURALKeyword_0_0; }

		//block=block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}

	public class Variability_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variability_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierVARIABILITYKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockVariability_block_contentParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//variability_block:
		//
		//	identifier="VARIABILITY" block=variability_block_content;
		public ParserRule getRule() { return rule; }

		//identifier="VARIABILITY" block=variability_block_content
		public Group getGroup() { return cGroup; }

		//identifier="VARIABILITY"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"VARIABILITY"
		public Keyword getIdentifierVARIABILITYKeyword_0_0() { return cIdentifierVARIABILITYKeyword_0_0; }

		//block=variability_block_content
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//variability_block_content
		public RuleCall getBlockVariability_block_contentParserRuleCall_1_0() { return cBlockVariability_block_contentParserRuleCall_1_0; }
	}

	public class Data_obj_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "data_obj_block");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cHeader_blockAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cHeader_blockHeader_blockParserRuleCall_0_0 = (RuleCall)cHeader_blockAssignment_0.eContents().get(0);
		private final Assignment cFile_blockAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFile_blockFile_blockParserRuleCall_1_0 = (RuleCall)cFile_blockAssignment_1.eContents().get(0);
		
		////Two types of data object blocks are supported, HEADER and FILE
		//
		//data_obj_block:
		//
		//	header_block=header_block | file_block=file_block;
		public ParserRule getRule() { return rule; }

		//header_block=header_block | file_block=file_block
		public Alternatives getAlternatives() { return cAlternatives; }

		//header_block=header_block
		public Assignment getHeader_blockAssignment_0() { return cHeader_blockAssignment_0; }

		//header_block
		public RuleCall getHeader_blockHeader_blockParserRuleCall_0_0() { return cHeader_blockHeader_blockParserRuleCall_0_0; }

		//file_block=file_block
		public Assignment getFile_blockAssignment_1() { return cFile_blockAssignment_1; }

		//file_block
		public RuleCall getFile_blockFile_blockParserRuleCall_1_0() { return cFile_blockFile_blockParserRuleCall_1_0; }
	}

	public class Header_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "header_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierHEADERKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//header_block:
		//
		//	identifier="HEADER" block=block;
		public ParserRule getRule() { return rule; }

		//identifier="HEADER" block=block
		public Group getGroup() { return cGroup; }

		//identifier="HEADER"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"HEADER"
		public Keyword getIdentifierHEADERKeyword_0_0() { return cIdentifierHEADERKeyword_0_0; }

		//block=block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}

	public class File_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "file_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierFILEKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockFile_block_contentParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//file_block:
		//
		//	identifier="FILE" block=file_block_content;
		public ParserRule getRule() { return rule; }

		//identifier="FILE" block=file_block_content
		public Group getGroup() { return cGroup; }

		//identifier="FILE"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"FILE"
		public Keyword getIdentifierFILEKeyword_0_0() { return cIdentifierFILEKeyword_0_0; }

		//block=file_block_content
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//file_block_content
		public RuleCall getBlockFile_block_contentParserRuleCall_1_0() { return cBlockFile_block_contentParserRuleCall_1_0; }
	}

	public class Task_obj_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "task_obj_block");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFunction_declarationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFunction_declarationFunction_declarationParserRuleCall_0_0 = (RuleCall)cFunction_declarationAssignment_0.eContents().get(0);
		private final Assignment cParameters_blockAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cParameters_blockParameters_blockParserRuleCall_1_0 = (RuleCall)cParameters_blockAssignment_1.eContents().get(0);
		private final Assignment cData_blockAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cData_blockData_blockParserRuleCall_2_0 = (RuleCall)cData_blockAssignment_2.eContents().get(0);
		
		////A task block is either a function declaration or a sub-block, 
		//
		////two types of sub-blocks are allowed, PARAMETERS and DATA
		//
		//task_obj_block:
		//
		//	function_declaration=function_declaration | parameters_block=parameters_block | data_block=data_block;
		public ParserRule getRule() { return rule; }

		//function_declaration=function_declaration | parameters_block=parameters_block | data_block=data_block
		public Alternatives getAlternatives() { return cAlternatives; }

		//function_declaration=function_declaration
		public Assignment getFunction_declarationAssignment_0() { return cFunction_declarationAssignment_0; }

		//function_declaration
		public RuleCall getFunction_declarationFunction_declarationParserRuleCall_0_0() { return cFunction_declarationFunction_declarationParserRuleCall_0_0; }

		//parameters_block=parameters_block
		public Assignment getParameters_blockAssignment_1() { return cParameters_blockAssignment_1; }

		//parameters_block
		public RuleCall getParameters_blockParameters_blockParserRuleCall_1_0() { return cParameters_blockParameters_blockParserRuleCall_1_0; }

		//data_block=data_block
		public Assignment getData_blockAssignment_2() { return cData_blockAssignment_2; }

		//data_block
		public RuleCall getData_blockData_blockParserRuleCall_2_0() { return cData_blockData_blockParserRuleCall_2_0; }
	}

	public class Parameters_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "parameters_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierPARAMETERSKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//parameters_block:
		//
		//	identifier="PARAMETERS" block=block;
		public ParserRule getRule() { return rule; }

		//identifier="PARAMETERS" block=block
		public Group getGroup() { return cGroup; }

		//identifier="PARAMETERS"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"PARAMETERS"
		public Keyword getIdentifierPARAMETERSKeyword_0_0() { return cIdentifierPARAMETERSKeyword_0_0; }

		//block=block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}

	public class Data_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "data_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierDATAKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//data_block:
		//
		//	identifier="DATA" block=block;
		public ParserRule getRule() { return rule; }

		//identifier="DATA" block=block
		public Group getGroup() { return cGroup; }

		//identifier="DATA"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"DATA"
		public Keyword getIdentifierDATAKeyword_0_0() { return cIdentifierDATAKeyword_0_0; }

		//block=block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}

	public class Model_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "model_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cModel_blockAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsModel_block_statementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		////A MODEL PREDICTION blocks consists of multiples statements
		//
		//model_block:
		//
		//	{model_block} BEGIN statements+=model_block_statement* END;
		public ParserRule getRule() { return rule; }

		//{model_block} BEGIN statements+=model_block_statement* END
		public Group getGroup() { return cGroup; }

		//{model_block}
		public Action getModel_blockAction_0() { return cModel_blockAction_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//statements+=model_block_statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//model_block_statement
		public RuleCall getStatementsModel_block_statementParserRuleCall_2_0() { return cStatementsModel_block_statementParserRuleCall_2_0; }

		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class Model_block_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "model_block_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStatementAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStatementBlock_statementParserRuleCall_0_0 = (RuleCall)cStatementAssignment_0.eContents().get(0);
		private final Assignment cOde_blockAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOde_blockOde_blockParserRuleCall_1_0 = (RuleCall)cOde_blockAssignment_1.eContents().get(0);
		private final Assignment cLibrary_blockAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cLibrary_blockLibrary_blockParserRuleCall_2_0 = (RuleCall)cLibrary_blockAssignment_2.eContents().get(0);
		
		////A MODEL PREDICTION  block statement is either a general statement, ODE or LIBRARY sub-block 
		//
		//model_block_statement:
		//
		//	statement=block_statement | ode_block=ode_block | library_block=library_block;
		public ParserRule getRule() { return rule; }

		//statement=block_statement | ode_block=ode_block | library_block=library_block
		public Alternatives getAlternatives() { return cAlternatives; }

		//statement=block_statement
		public Assignment getStatementAssignment_0() { return cStatementAssignment_0; }

		//block_statement
		public RuleCall getStatementBlock_statementParserRuleCall_0_0() { return cStatementBlock_statementParserRuleCall_0_0; }

		//ode_block=ode_block
		public Assignment getOde_blockAssignment_1() { return cOde_blockAssignment_1; }

		//ode_block
		public RuleCall getOde_blockOde_blockParserRuleCall_1_0() { return cOde_blockOde_blockParserRuleCall_1_0; }

		//library_block=library_block
		public Assignment getLibrary_blockAssignment_2() { return cLibrary_blockAssignment_2; }

		//library_block
		public RuleCall getLibrary_blockLibrary_blockParserRuleCall_2_0() { return cLibrary_blockLibrary_blockParserRuleCall_2_0; }
	}

	public class Library_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "library_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierLIBRARYKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		////LIBRARY sub-block
		//
		//library_block:
		//
		//	identifier="LIBRARY" block=block;
		public ParserRule getRule() { return rule; }

		//identifier="LIBRARY" block=block
		public Group getGroup() { return cGroup; }

		//identifier="LIBRARY"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"LIBRARY"
		public Keyword getIdentifierLIBRARYKeyword_0_0() { return cIdentifierLIBRARYKeyword_0_0; }

		//block=block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}

	public class Ode_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ode_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierODEKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		////ODE (ORDINARY DIFFERENTIAL EQUATIONS) sub-block
		//
		//ode_block:
		//
		//	identifier="ODE" block=block;
		public ParserRule getRule() { return rule; }

		//identifier="ODE" block=block
		public Group getGroup() { return cGroup; }

		//identifier="ODE"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"ODE"
		public Keyword getIdentifierODEKeyword_0_0() { return cIdentifierODEKeyword_0_0; }

		//block=block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}

	public class Variability_block_contentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variability_block_content");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVariability_block_contentAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cBlocksAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlocksVariability_block_statementParserRuleCall_2_0 = (RuleCall)cBlocksAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		///////////////////////////////////////////////////////////
		//
		////Parameter object terms
		//
		////////////////////////////////////////////////////////////
		//
		//variability_block_content:
		//
		//	{variability_block_content} BEGIN blocks+=variability_block_statement* END;
		public ParserRule getRule() { return rule; }

		//{variability_block_content} BEGIN blocks+=variability_block_statement* END
		public Group getGroup() { return cGroup; }

		//{variability_block_content}
		public Action getVariability_block_contentAction_0() { return cVariability_block_contentAction_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//blocks+=variability_block_statement*
		public Assignment getBlocksAssignment_2() { return cBlocksAssignment_2; }

		//variability_block_statement
		public RuleCall getBlocksVariability_block_statementParserRuleCall_2_0() { return cBlocksVariability_block_statementParserRuleCall_2_0; }

		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class Variability_block_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variability_block_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBlock_statementAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBlock_statementBlock_statementParserRuleCall_0_0 = (RuleCall)cBlock_statementAssignment_0.eContents().get(0);
		private final Assignment cBlock_blockAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cBlock_blockBlock_subblockParserRuleCall_1_0 = (RuleCall)cBlock_blockAssignment_1.eContents().get(0);
		private final Assignment cDiag_blockAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDiag_blockDiag_subblockParserRuleCall_2_0 = (RuleCall)cDiag_blockAssignment_2.eContents().get(0);
		
		//variability_block_statement:
		//
		//	block_statement=block_statement | block_block=block_subblock | diag_block=diag_subblock;
		public ParserRule getRule() { return rule; }

		//block_statement=block_statement | block_block=block_subblock | diag_block=diag_subblock
		public Alternatives getAlternatives() { return cAlternatives; }

		//block_statement=block_statement
		public Assignment getBlock_statementAssignment_0() { return cBlock_statementAssignment_0; }

		//block_statement
		public RuleCall getBlock_statementBlock_statementParserRuleCall_0_0() { return cBlock_statementBlock_statementParserRuleCall_0_0; }

		//block_block=block_subblock
		public Assignment getBlock_blockAssignment_1() { return cBlock_blockAssignment_1; }

		//block_subblock
		public RuleCall getBlock_blockBlock_subblockParserRuleCall_1_0() { return cBlock_blockBlock_subblockParserRuleCall_1_0; }

		//diag_block=diag_subblock
		public Assignment getDiag_blockAssignment_2() { return cDiag_blockAssignment_2; }

		//diag_subblock
		public RuleCall getDiag_blockDiag_subblockParserRuleCall_2_0() { return cDiag_blockDiag_subblockParserRuleCall_2_0; }
	}

	public class Block_subblockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "block_subblock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierBlockKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockVariability_subblockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//block_subblock:
		//
		//	identifier="block" block=variability_subblock;
		public ParserRule getRule() { return rule; }

		//identifier="block" block=variability_subblock
		public Group getGroup() { return cGroup; }

		//identifier="block"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"block"
		public Keyword getIdentifierBlockKeyword_0_0() { return cIdentifierBlockKeyword_0_0; }

		//block=variability_subblock
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//variability_subblock
		public RuleCall getBlockVariability_subblockParserRuleCall_1_0() { return cBlockVariability_subblockParserRuleCall_1_0; }
	}

	public class Diag_subblockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "diag_subblock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierDiagKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockVariability_subblockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//diag_subblock:
		//
		//	identifier="diag" block=variability_subblock;
		public ParserRule getRule() { return rule; }

		//identifier="diag" block=variability_subblock
		public Group getGroup() { return cGroup; }

		//identifier="diag"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"diag"
		public Keyword getIdentifierDiagKeyword_0_0() { return cIdentifierDiagKeyword_0_0; }

		//block=variability_subblock
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//variability_subblock
		public RuleCall getBlockVariability_subblockParserRuleCall_1_0() { return cBlockVariability_subblockParserRuleCall_1_0; }
	}

	public class Variability_subblockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variability_subblock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cArgumentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentsArgumentsParserRuleCall_1_0 = (RuleCall)cArgumentsAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//variability_subblock:
		//
		//	"(" arguments=arguments ")";
		public ParserRule getRule() { return rule; }

		//"(" arguments=arguments ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//arguments=arguments
		public Assignment getArgumentsAssignment_1() { return cArgumentsAssignment_1; }

		//arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_1_0() { return cArgumentsArgumentsParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class File_block_contentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "file_block_content");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFile_block_contentAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cBlocksAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlocksFile_block_statementParserRuleCall_2_0 = (RuleCall)cBlocksAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		////////////////////////////////////////////////////////////
		//
		////Data object terms
		//
		////////////////////////////////////////////////////////////
		//
		//file_block_content:
		//
		//	{file_block_content} BEGIN blocks+=file_block_statement* END;
		public ParserRule getRule() { return rule; }

		//{file_block_content} BEGIN blocks+=file_block_statement* END
		public Group getGroup() { return cGroup; }

		//{file_block_content}
		public Action getFile_block_contentAction_0() { return cFile_block_contentAction_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//blocks+=file_block_statement*
		public Assignment getBlocksAssignment_2() { return cBlocksAssignment_2; }

		//file_block_statement
		public RuleCall getBlocksFile_block_statementParserRuleCall_2_0() { return cBlocksFile_block_statementParserRuleCall_2_0; }

		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class File_block_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "file_block_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStatementAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStatementBlock_statementParserRuleCall_0_0 = (RuleCall)cStatementAssignment_0.eContents().get(0);
		private final Assignment cInline_blockAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cInline_blockInline_blockParserRuleCall_1_0 = (RuleCall)cInline_blockAssignment_1.eContents().get(0);
		private final Assignment cDesign_blockAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDesign_blockDesign_blockParserRuleCall_2_0 = (RuleCall)cDesign_blockAssignment_2.eContents().get(0);
		private final Assignment cRsscript_blockAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cRsscript_blockRsscript_blockParserRuleCall_3_0 = (RuleCall)cRsscript_blockAssignment_3.eContents().get(0);
		
		//file_block_statement:
		//
		//	statement=block_statement | inline_block=inline_block | design_block=design_block | rsscript_block=rsscript_block;
		public ParserRule getRule() { return rule; }

		//statement=block_statement | inline_block=inline_block | design_block=design_block | rsscript_block=rsscript_block
		public Alternatives getAlternatives() { return cAlternatives; }

		//statement=block_statement
		public Assignment getStatementAssignment_0() { return cStatementAssignment_0; }

		//block_statement
		public RuleCall getStatementBlock_statementParserRuleCall_0_0() { return cStatementBlock_statementParserRuleCall_0_0; }

		//inline_block=inline_block
		public Assignment getInline_blockAssignment_1() { return cInline_blockAssignment_1; }

		//inline_block
		public RuleCall getInline_blockInline_blockParserRuleCall_1_0() { return cInline_blockInline_blockParserRuleCall_1_0; }

		//design_block=design_block
		public Assignment getDesign_blockAssignment_2() { return cDesign_blockAssignment_2; }

		//design_block
		public RuleCall getDesign_blockDesign_blockParserRuleCall_2_0() { return cDesign_blockDesign_blockParserRuleCall_2_0; }

		//rsscript_block=rsscript_block
		public Assignment getRsscript_blockAssignment_3() { return cRsscript_blockAssignment_3; }

		//rsscript_block
		public RuleCall getRsscript_blockRsscript_blockParserRuleCall_3_0() { return cRsscript_blockRsscript_blockParserRuleCall_3_0; }
	}

	public class Inline_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "inline_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierINLINEKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockInline_block_contentParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//inline_block:
		//
		//	identifier="INLINE" block=inline_block_content;
		public ParserRule getRule() { return rule; }

		//identifier="INLINE" block=inline_block_content
		public Group getGroup() { return cGroup; }

		//identifier="INLINE"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"INLINE"
		public Keyword getIdentifierINLINEKeyword_0_0() { return cIdentifierINLINEKeyword_0_0; }

		//block=inline_block_content
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//inline_block_content
		public RuleCall getBlockInline_block_contentParserRuleCall_1_0() { return cBlockInline_block_contentParserRuleCall_1_0; }
	}

	public class Design_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "design_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierDESIGNKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//design_block:
		//
		//	identifier="DESIGN" block=block;
		public ParserRule getRule() { return rule; }

		//identifier="DESIGN" block=block
		public Group getGroup() { return cGroup; }

		//identifier="DESIGN"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"DESIGN"
		public Keyword getIdentifierDESIGNKeyword_0_0() { return cIdentifierDESIGNKeyword_0_0; }

		//block=block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}

	public class Rsscript_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "rsscript_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierRSSCRIPTKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cBlockAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockAssignment_1.eContents().get(0);
		
		//rsscript_block:
		//
		//	identifier="RSSCRIPT" block=block;
		public ParserRule getRule() { return rule; }

		//identifier="RSSCRIPT" block=block
		public Group getGroup() { return cGroup; }

		//identifier="RSSCRIPT"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"RSSCRIPT"
		public Keyword getIdentifierRSSCRIPTKeyword_0_0() { return cIdentifierRSSCRIPTKeyword_0_0; }

		//block=block
		public Assignment getBlockAssignment_1() { return cBlockAssignment_1; }

		//block
		public RuleCall getBlockBlockParserRuleCall_1_0() { return cBlockBlockParserRuleCall_1_0; }
	}

	public class Inline_block_contentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "inline_block_content");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInline_block_contentAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cIdentifiersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIdentifiersIDTerminalRuleCall_2_0 = (RuleCall)cIdentifiersAssignment_2.eContents().get(0);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cValuesAlternatives_3_0 = (Alternatives)cValuesAssignment_3.eContents().get(0);
		private final RuleCall cValuesNUMBERParserRuleCall_3_0_0 = (RuleCall)cValuesAlternatives_3_0.eContents().get(0);
		private final Keyword cValuesFullStopKeyword_3_0_1 = (Keyword)cValuesAlternatives_3_0.eContents().get(1);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//inline_block_content:
		//
		//	{inline_block_content} BEGIN identifiers+=ID* values+=(NUMBER | ".")* END;
		public ParserRule getRule() { return rule; }

		//{inline_block_content} BEGIN identifiers+=ID* values+=(NUMBER | ".")* END
		public Group getGroup() { return cGroup; }

		//{inline_block_content}
		public Action getInline_block_contentAction_0() { return cInline_block_contentAction_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//identifiers+=ID*
		public Assignment getIdentifiersAssignment_2() { return cIdentifiersAssignment_2; }

		//ID
		public RuleCall getIdentifiersIDTerminalRuleCall_2_0() { return cIdentifiersIDTerminalRuleCall_2_0; }

		//values+=(NUMBER | ".")*
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }

		//NUMBER | "."
		public Alternatives getValuesAlternatives_3_0() { return cValuesAlternatives_3_0; }

		//NUMBER
		public RuleCall getValuesNUMBERParserRuleCall_3_0_0() { return cValuesNUMBERParserRuleCall_3_0_0; }

		//"."
		public Keyword getValuesFullStopKeyword_3_0_1() { return cValuesFullStopKeyword_3_0_1; }

		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
	}

	public class Function_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "function_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFunctionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFormal_argumentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFormal_argumentsFormal_argumentsParserRuleCall_4_0 = (RuleCall)cFormal_argumentsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFunction_bodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFunction_bodyFunction_bodyParserRuleCall_6_0 = (RuleCall)cFunction_bodyAssignment_6.eContents().get(0);
		
		////////////////////////////////////////////////////////////
		//
		////Function declaration and call
		//
		////////////////////////////////////////////////////////////
		//
		//function_declaration:
		//
		//	identifier=ID "=" "function" "(" formal_arguments=formal_arguments ")" function_body=function_body;
		public ParserRule getRule() { return rule; }

		//identifier=ID "=" "function" "(" formal_arguments=formal_arguments ")" function_body=function_body
		public Group getGroup() { return cGroup; }

		//identifier=ID
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_0() { return cIdentifierIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"function"
		public Keyword getFunctionKeyword_2() { return cFunctionKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//formal_arguments=formal_arguments
		public Assignment getFormal_argumentsAssignment_4() { return cFormal_argumentsAssignment_4; }

		//formal_arguments
		public RuleCall getFormal_argumentsFormal_argumentsParserRuleCall_4_0() { return cFormal_argumentsFormal_argumentsParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//function_body=function_body
		public Assignment getFunction_bodyAssignment_6() { return cFunction_bodyAssignment_6; }

		//function_body
		public RuleCall getFunction_bodyFunction_bodyParserRuleCall_6_0() { return cFunction_bodyFunction_bodyParserRuleCall_6_0; }
	}

	public class Function_bodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "function_body");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunction_bodyAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cBlocksAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlocksFunction_subblockParserRuleCall_2_0 = (RuleCall)cBlocksAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//function_body:
		//
		//	{function_body} BEGIN blocks+=function_subblock* END;
		public ParserRule getRule() { return rule; }

		//{function_body} BEGIN blocks+=function_subblock* END
		public Group getGroup() { return cGroup; }

		//{function_body}
		public Action getFunction_bodyAction_0() { return cFunction_bodyAction_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//blocks+=function_subblock*
		public Assignment getBlocksAssignment_2() { return cBlocksAssignment_2; }

		//function_subblock
		public RuleCall getBlocksFunction_subblockParserRuleCall_2_0() { return cBlocksFunction_subblockParserRuleCall_2_0; }

		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class Function_subblockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "function_subblock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIdentifierAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final Keyword cIdentifierESTIMATEKeyword_0_0_0 = (Keyword)cIdentifierAssignment_0_0.eContents().get(0);
		private final Assignment cEstimate_defnAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cEstimate_defnBlockParserRuleCall_0_1_0 = (RuleCall)cEstimate_defnAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cIdentifierAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cIdentifierSIMULATEKeyword_1_0_0 = (Keyword)cIdentifierAssignment_1_0.eContents().get(0);
		private final Assignment cSimulate_defnAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSimulate_defnBlockParserRuleCall_1_1_0 = (RuleCall)cSimulate_defnAssignment_1_1.eContents().get(0);
		
		//function_subblock:
		//
		//	identifier="ESTIMATE" estimate_defn=block | identifier="SIMULATE" simulate_defn=block;
		public ParserRule getRule() { return rule; }

		//identifier="ESTIMATE" estimate_defn=block | identifier="SIMULATE" simulate_defn=block
		public Alternatives getAlternatives() { return cAlternatives; }

		//identifier="ESTIMATE" estimate_defn=block
		public Group getGroup_0() { return cGroup_0; }

		//identifier="ESTIMATE"
		public Assignment getIdentifierAssignment_0_0() { return cIdentifierAssignment_0_0; }

		//"ESTIMATE"
		public Keyword getIdentifierESTIMATEKeyword_0_0_0() { return cIdentifierESTIMATEKeyword_0_0_0; }

		//estimate_defn=block
		public Assignment getEstimate_defnAssignment_0_1() { return cEstimate_defnAssignment_0_1; }

		//block
		public RuleCall getEstimate_defnBlockParserRuleCall_0_1_0() { return cEstimate_defnBlockParserRuleCall_0_1_0; }

		//identifier="SIMULATE" simulate_defn=block
		public Group getGroup_1() { return cGroup_1; }

		//identifier="SIMULATE"
		public Assignment getIdentifierAssignment_1_0() { return cIdentifierAssignment_1_0; }

		//"SIMULATE"
		public Keyword getIdentifierSIMULATEKeyword_1_0_0() { return cIdentifierSIMULATEKeyword_1_0_0; }

		//simulate_defn=block
		public Assignment getSimulate_defnAssignment_1_1() { return cSimulate_defnAssignment_1_1; }

		//block
		public RuleCall getSimulate_defnBlockParserRuleCall_1_1_0() { return cSimulate_defnBlockParserRuleCall_1_1_0; }
	}

	public class Formal_argumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "formal_arguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifiersIDTerminalRuleCall_0_0 = (RuleCall)cIdentifiersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdentifiersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdentifiersIDTerminalRuleCall_1_1_0 = (RuleCall)cIdentifiersAssignment_1_1.eContents().get(0);
		
		//formal_arguments:
		//
		//	identifiers+=ID ("," identifiers+=ID)*;
		public ParserRule getRule() { return rule; }

		//identifiers+=ID ("," identifiers+=ID)*
		public Group getGroup() { return cGroup; }

		//identifiers+=ID
		public Assignment getIdentifiersAssignment_0() { return cIdentifiersAssignment_0; }

		//ID
		public RuleCall getIdentifiersIDTerminalRuleCall_0_0() { return cIdentifiersIDTerminalRuleCall_0_0; }

		//(=> "," identifiers+=ID)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//identifiers+=ID
		public Assignment getIdentifiersAssignment_1_1() { return cIdentifiersAssignment_1_1; }

		//ID
		public RuleCall getIdentifiersIDTerminalRuleCall_1_1_0() { return cIdentifiersIDTerminalRuleCall_1_1_0; }
	}

	public class Function_callElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "function_call");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunct_nameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunct_nameIDTerminalRuleCall_0_0 = (RuleCall)cFunct_nameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsArgumentsParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//function_call:
		//
		//	funct_name=ID "(" arguments=arguments ")";
		public ParserRule getRule() { return rule; }

		//funct_name=ID "(" arguments=arguments ")"
		public Group getGroup() { return cGroup; }

		//funct_name=ID
		public Assignment getFunct_nameAssignment_0() { return cFunct_nameAssignment_0; }

		//ID
		public RuleCall getFunct_nameIDTerminalRuleCall_0_0() { return cFunct_nameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arguments=arguments
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }

		//arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_2_0() { return cArgumentsArgumentsParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsBlock_statementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		////////////////////////////////////////////////////////////
		//
		////Common terms
		//
		////////////////////////////////////////////////////////////
		//
		//block:
		//
		//	{block} BEGIN statements+=block_statement* END;
		public ParserRule getRule() { return rule; }

		//{block} BEGIN statements+=block_statement* END
		public Group getGroup() { return cGroup; }

		//{block}
		public Action getBlockAction_0() { return cBlockAction_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//statements+=block_statement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//block_statement
		public RuleCall getStatementsBlock_statementParserRuleCall_2_0() { return cStatementsBlock_statementParserRuleCall_2_0; }

		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class Block_statementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "block_statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVariable_declarationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVariable_declarationVariable_declarationParserRuleCall_0_0 = (RuleCall)cVariable_declarationAssignment_0.eContents().get(0);
		private final Assignment cFunction_callAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFunction_callFunction_callParserRuleCall_1_0 = (RuleCall)cFunction_callAssignment_1.eContents().get(0);
		private final Assignment cStatementAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStatementStatementParserRuleCall_2_0 = (RuleCall)cStatementAssignment_2.eContents().get(0);
		private final Assignment cVerbatim_blockAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cVerbatim_blockVerbatim_blockParserRuleCall_3_0 = (RuleCall)cVerbatim_blockAssignment_3.eContents().get(0);
		
		//block_statement:
		//
		//	variable_declaration=variable_declaration | function_call=function_call | statement=statement |
		//
		//	verbatim_block=verbatim_block;
		public ParserRule getRule() { return rule; }

		//variable_declaration=variable_declaration | function_call=function_call | statement=statement |
		//
		//verbatim_block=verbatim_block
		public Alternatives getAlternatives() { return cAlternatives; }

		//variable_declaration=variable_declaration
		public Assignment getVariable_declarationAssignment_0() { return cVariable_declarationAssignment_0; }

		//variable_declaration
		public RuleCall getVariable_declarationVariable_declarationParserRuleCall_0_0() { return cVariable_declarationVariable_declarationParserRuleCall_0_0; }

		//function_call=function_call
		public Assignment getFunction_callAssignment_1() { return cFunction_callAssignment_1; }

		//function_call
		public RuleCall getFunction_callFunction_callParserRuleCall_1_0() { return cFunction_callFunction_callParserRuleCall_1_0; }

		//statement=statement
		public Assignment getStatementAssignment_2() { return cStatementAssignment_2; }

		//statement
		public RuleCall getStatementStatementParserRuleCall_2_0() { return cStatementStatementParserRuleCall_2_0; }

		//verbatim_block=verbatim_block
		public Assignment getVerbatim_blockAssignment_3() { return cVerbatim_blockAssignment_3; }

		//verbatim_block
		public RuleCall getVerbatim_blockVerbatim_blockParserRuleCall_3_0() { return cVerbatim_blockVerbatim_blockParserRuleCall_3_0; }
	}

	public class Verbatim_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "verbatim_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierVERBATIMKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cBlockAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cBlockTarget_blockParserRuleCall_2_0_0 = (RuleCall)cBlockAssignment_2_0.eContents().get(0);
		private final Assignment cExternal_codeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cExternal_codeEXTERNAL_CODETerminalRuleCall_2_1_0 = (RuleCall)cExternal_codeAssignment_2_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//verbatim_block:
		//
		//	identifier="VERBATIM" BEGIN (block=target_block | external_code=EXTERNAL_CODE) END;
		public ParserRule getRule() { return rule; }

		//identifier="VERBATIM" BEGIN (block=target_block | external_code=EXTERNAL_CODE) END
		public Group getGroup() { return cGroup; }

		//identifier="VERBATIM"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"VERBATIM"
		public Keyword getIdentifierVERBATIMKeyword_0_0() { return cIdentifierVERBATIMKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//block=target_block | external_code=EXTERNAL_CODE
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//block=target_block
		public Assignment getBlockAssignment_2_0() { return cBlockAssignment_2_0; }

		//target_block
		public RuleCall getBlockTarget_blockParserRuleCall_2_0_0() { return cBlockTarget_blockParserRuleCall_2_0_0; }

		//external_code=EXTERNAL_CODE
		public Assignment getExternal_codeAssignment_2_1() { return cExternal_codeAssignment_2_1; }

		//EXTERNAL_CODE
		public RuleCall getExternal_codeEXTERNAL_CODETerminalRuleCall_2_1_0() { return cExternal_codeEXTERNAL_CODETerminalRuleCall_2_1_0; }

		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class Target_blockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "target_block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierTarget_languageParserRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cExternal_codeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExternal_codeEXTERNAL_CODETerminalRuleCall_2_0 = (RuleCall)cExternal_codeAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//target_block:
		//
		//	identifier=target_language BEGIN external_code=EXTERNAL_CODE END;
		public ParserRule getRule() { return rule; }

		//identifier=target_language BEGIN external_code=EXTERNAL_CODE END
		public Group getGroup() { return cGroup; }

		//identifier=target_language
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//target_language
		public RuleCall getIdentifierTarget_languageParserRuleCall_0_0() { return cIdentifierTarget_languageParserRuleCall_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//external_code=EXTERNAL_CODE
		public Assignment getExternal_codeAssignment_2() { return cExternal_codeAssignment_2; }

		//EXTERNAL_CODE
		public RuleCall getExternal_codeEXTERNAL_CODETerminalRuleCall_2_0() { return cExternal_codeEXTERNAL_CODETerminalRuleCall_2_0; }

		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class Target_languageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "target_language");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNMTRANKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMLXTRANKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPMLKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBUGSKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cRCODEKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cMATLABKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//target_language:
		//
		//	"NMTRAN" | "MLXTRAN" | "PML" | "BUGS" | "RCODE" | "MATLAB";
		public ParserRule getRule() { return rule; }

		//"NMTRAN" | "MLXTRAN" | "PML" | "BUGS" | "RCODE" | "MATLAB"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"NMTRAN"
		public Keyword getNMTRANKeyword_0() { return cNMTRANKeyword_0; }

		//"MLXTRAN"
		public Keyword getMLXTRANKeyword_1() { return cMLXTRANKeyword_1; }

		//"PML"
		public Keyword getPMLKeyword_2() { return cPMLKeyword_2; }

		//"BUGS"
		public Keyword getBUGSKeyword_3() { return cBUGSKeyword_3; }

		//"RCODE"
		public Keyword getRCODEKeyword_4() { return cRCODEKeyword_4; }

		//"MATLAB"
		public Keyword getMATLABKeyword_5() { return cMATLABKeyword_5; }
	}

	public class Variable_declarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variable_declaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierVariable_nameParserRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cExpressionAny_expressionParserRuleCall_1_0_1_0 = (RuleCall)cExpressionAssignment_1_0_1.eContents().get(0);
		private final Assignment cRandom_listAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cRandom_listRandom_listParserRuleCall_1_1_0 = (RuleCall)cRandom_listAssignment_1_1.eContents().get(0);
		
		//variable_declaration:
		//
		//	identifier=variable_name ("=" expression=any_expression | random_list=random_list)?;
		public ParserRule getRule() { return rule; }

		//identifier=variable_name ("=" expression=any_expression | random_list=random_list)?
		public Group getGroup() { return cGroup; }

		//identifier=variable_name
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//variable_name
		public RuleCall getIdentifierVariable_nameParserRuleCall_0_0() { return cIdentifierVariable_nameParserRuleCall_0_0; }

		//("=" expression=any_expression | random_list=random_list)?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//"=" expression=any_expression
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_1_0_0() { return cEqualsSignKeyword_1_0_0; }

		//expression=any_expression
		public Assignment getExpressionAssignment_1_0_1() { return cExpressionAssignment_1_0_1; }

		//any_expression
		public RuleCall getExpressionAny_expressionParserRuleCall_1_0_1_0() { return cExpressionAny_expressionParserRuleCall_1_0_1_0; }

		//random_list=random_list
		public Assignment getRandom_listAssignment_1_1() { return cRandom_listAssignment_1_1; }

		//random_list
		public RuleCall getRandom_listRandom_listParserRuleCall_1_1_0() { return cRandom_listRandom_listParserRuleCall_1_1_0; }
	}

	public class Any_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "any_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cListListParserRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		private final Assignment cOde_listAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cOde_listOde_listParserRuleCall_2_0 = (RuleCall)cOde_listAssignment_2.eContents().get(0);
		private final Assignment cRandom_listAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cRandom_listRandom_listParserRuleCall_3_0 = (RuleCall)cRandom_listAssignment_3.eContents().get(0);
		
		//any_expression:
		//
		//	expression=expression | list=list | ode_list=ode_list | random_list=random_list;
		public ParserRule getRule() { return rule; }

		//expression=expression | list=list | ode_list=ode_list | random_list=random_list
		public Alternatives getAlternatives() { return cAlternatives; }

		//expression=expression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0() { return cExpressionExpressionParserRuleCall_0_0; }

		//list=list
		public Assignment getListAssignment_1() { return cListAssignment_1; }

		//list
		public RuleCall getListListParserRuleCall_1_0() { return cListListParserRuleCall_1_0; }

		//ode_list=ode_list
		public Assignment getOde_listAssignment_2() { return cOde_listAssignment_2; }

		//ode_list
		public RuleCall getOde_listOde_listParserRuleCall_2_0() { return cOde_listOde_listParserRuleCall_2_0; }

		//random_list=random_list
		public Assignment getRandom_listAssignment_3() { return cRandom_listAssignment_3; }

		//random_list
		public RuleCall getRandom_listRandom_listParserRuleCall_3_0() { return cRandom_listRandom_listParserRuleCall_3_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cConditional_expressionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cConditional_expressionConditional_expressionParserRuleCall_0_0 = (RuleCall)cConditional_expressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cString_expressionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cString_expressionSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cString_expressionAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cPlusSignKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cString_expressionAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cString_expressionSTRINGTerminalRuleCall_1_1_1_0 = (RuleCall)cString_expressionAssignment_1_1_1.eContents().get(0);
		
		//expression:
		//
		//	conditional_expression=conditional_expression | string_expression+=STRING ("+" string_expression+=STRING)*;
		public ParserRule getRule() { return rule; }

		//conditional_expression=conditional_expression | string_expression+=STRING ("+" string_expression+=STRING)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//conditional_expression=conditional_expression
		public Assignment getConditional_expressionAssignment_0() { return cConditional_expressionAssignment_0; }

		//conditional_expression
		public RuleCall getConditional_expressionConditional_expressionParserRuleCall_0_0() { return cConditional_expressionConditional_expressionParserRuleCall_0_0; }

		//string_expression+=STRING ("+" string_expression+=STRING)*
		public Group getGroup_1() { return cGroup_1; }

		//string_expression+=STRING
		public Assignment getString_expressionAssignment_1_0() { return cString_expressionAssignment_1_0; }

		//STRING
		public RuleCall getString_expressionSTRINGTerminalRuleCall_1_0_0() { return cString_expressionSTRINGTerminalRuleCall_1_0_0; }

		//("+" string_expression+=STRING)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"+"
		public Keyword getPlusSignKeyword_1_1_0() { return cPlusSignKeyword_1_1_0; }

		//string_expression+=STRING
		public Assignment getString_expressionAssignment_1_1_1() { return cString_expressionAssignment_1_1_1; }

		//STRING
		public RuleCall getString_expressionSTRINGTerminalRuleCall_1_1_1_0() { return cString_expressionSTRINGTerminalRuleCall_1_1_1_0; }
	}

	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsArgumentsParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//list:
		//
		//	"list" "(" arguments=arguments ")";
		public ParserRule getRule() { return rule; }

		//"list" "(" arguments=arguments ")"
		public Group getGroup() { return cGroup; }

		//"list"
		public Keyword getListKeyword_0() { return cListKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arguments=arguments
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }

		//arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_2_0() { return cArgumentsArgumentsParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class Ode_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ode_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOdeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsArgumentsParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////An ODE list
		//
		//ode_list:
		//
		//	"ode" "(" arguments=arguments ")";
		public ParserRule getRule() { return rule; }

		//"ode" "(" arguments=arguments ")"
		public Group getGroup() { return cGroup; }

		//"ode"
		public Keyword getOdeKeyword_0() { return cOdeKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arguments=arguments
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }

		//arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_2_0() { return cArgumentsArgumentsParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class Random_listElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "random_list");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTildeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsArgumentsParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		////A random list is identified by ~ symbol
		//
		//random_list:
		//
		//	"~" "(" arguments=arguments ")";
		public ParserRule getRule() { return rule; }

		//"~" "(" arguments=arguments ")"
		public Group getGroup() { return cGroup; }

		//"~"
		public Keyword getTildeKeyword_0() { return cTildeKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arguments=arguments
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }

		//arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_2_0() { return cArgumentsArgumentsParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "arguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgumentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgumentsArgumentParserRuleCall_0_0 = (RuleCall)cArgumentsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		
		//arguments:
		//
		//	arguments+=argument ("," arguments+=argument)*;
		public ParserRule getRule() { return rule; }

		//arguments+=argument ("," arguments+=argument)*
		public Group getGroup() { return cGroup; }

		//arguments+=argument
		public Assignment getArgumentsAssignment_0() { return cArgumentsAssignment_0; }

		//argument
		public RuleCall getArgumentsArgumentParserRuleCall_0_0() { return cArgumentsArgumentParserRuleCall_0_0; }

		//(=> "," arguments+=argument)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//arguments+=argument
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }

		//argument
		public RuleCall getArgumentsArgumentParserRuleCall_1_1_0() { return cArgumentsArgumentParserRuleCall_1_1_0; }
	}

	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "argument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIdentifierAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_0_0 = (RuleCall)cIdentifierAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionAny_expressionParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionAny_expressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//argument:
		//
		//	identifier=ID "=" expression=any_expression | expression=any_expression;
		public ParserRule getRule() { return rule; }

		//identifier=ID "=" expression=any_expression | expression=any_expression
		public Alternatives getAlternatives() { return cAlternatives; }

		//identifier=ID "=" expression=any_expression
		public Group getGroup_0() { return cGroup_0; }

		//identifier=ID
		public Assignment getIdentifierAssignment_0_0() { return cIdentifierAssignment_0_0; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_0_0() { return cIdentifierIDTerminalRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//expression=any_expression
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }

		//any_expression
		public RuleCall getExpressionAny_expressionParserRuleCall_0_2_0() { return cExpressionAny_expressionParserRuleCall_0_2_0; }

		//expression=any_expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//any_expression
		public RuleCall getExpressionAny_expressionParserRuleCall_1_0() { return cExpressionAny_expressionParserRuleCall_1_0; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cBlockAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cBlockBlockParserRuleCall_0_0 = (RuleCall)cBlockAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cIfKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cPar_expressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPar_expressionPar_expressionParserRuleCall_1_1_0 = (RuleCall)cPar_expressionAssignment_1_1.eContents().get(0);
		private final Assignment cIf_statementAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIf_statementBlock_statementParserRuleCall_1_2_0 = (RuleCall)cIf_statementAssignment_1_2.eContents().get(0);
		private final Group cGroup_1_3 = (Group)cGroup_1.eContents().get(3);
		private final Keyword cElseKeyword_1_3_0 = (Keyword)cGroup_1_3.eContents().get(0);
		private final Assignment cElse_statementAssignment_1_3_1 = (Assignment)cGroup_1_3.eContents().get(1);
		private final RuleCall cElse_statementBlock_statementParserRuleCall_1_3_1_0 = (RuleCall)cElse_statementAssignment_1_3_1.eContents().get(0);
		
		//statement:
		//
		//	block=block | "if" par_expression=par_expression if_statement=block_statement ("else"
		//
		//	else_statement=block_statement)?;
		public ParserRule getRule() { return rule; }

		//block=block | "if" par_expression=par_expression if_statement=block_statement ("else" else_statement=block_statement)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//block=block
		public Assignment getBlockAssignment_0() { return cBlockAssignment_0; }

		//block
		public RuleCall getBlockBlockParserRuleCall_0_0() { return cBlockBlockParserRuleCall_0_0; }

		//"if" par_expression=par_expression if_statement=block_statement ("else" else_statement=block_statement)?
		public Group getGroup_1() { return cGroup_1; }

		//"if"
		public Keyword getIfKeyword_1_0() { return cIfKeyword_1_0; }

		//par_expression=par_expression
		public Assignment getPar_expressionAssignment_1_1() { return cPar_expressionAssignment_1_1; }

		//par_expression
		public RuleCall getPar_expressionPar_expressionParserRuleCall_1_1_0() { return cPar_expressionPar_expressionParserRuleCall_1_1_0; }

		//if_statement=block_statement
		public Assignment getIf_statementAssignment_1_2() { return cIf_statementAssignment_1_2; }

		//block_statement
		public RuleCall getIf_statementBlock_statementParserRuleCall_1_2_0() { return cIf_statementBlock_statementParserRuleCall_1_2_0; }

		//(=> "else" else_statement=block_statement)?
		public Group getGroup_1_3() { return cGroup_1_3; }

		//=> "else"
		public Keyword getElseKeyword_1_3_0() { return cElseKeyword_1_3_0; }

		//else_statement=block_statement
		public Assignment getElse_statementAssignment_1_3_1() { return cElse_statementAssignment_1_3_1; }

		//block_statement
		public RuleCall getElse_statementBlock_statementParserRuleCall_1_3_1_0() { return cElse_statementBlock_statementParserRuleCall_1_3_1_0; }
	}

	public class Par_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "par_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//par_expression:
		//
		//	"(" expression=expression ")";
		public ParserRule getRule() { return rule; }

		//"(" expression=expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//expression=expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class Conditional_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "conditional_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditional_or_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditional_or_expressionConditional_or_expressionParserRuleCall_0_0 = (RuleCall)cConditional_or_expressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpression1Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpression1ExpressionParserRuleCall_1_1_0 = (RuleCall)cExpression1Assignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cExpression2Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExpression2ExpressionParserRuleCall_1_3_0 = (RuleCall)cExpression2Assignment_1_3.eContents().get(0);
		
		//conditional_expression:
		//
		//	conditional_or_expression=conditional_or_expression ("?" expression1=expression ":" expression2=expression)?;
		public ParserRule getRule() { return rule; }

		//conditional_or_expression=conditional_or_expression ("?" expression1=expression ":" expression2=expression)?
		public Group getGroup() { return cGroup; }

		//conditional_or_expression=conditional_or_expression
		public Assignment getConditional_or_expressionAssignment_0() { return cConditional_or_expressionAssignment_0; }

		//conditional_or_expression
		public RuleCall getConditional_or_expressionConditional_or_expressionParserRuleCall_0_0() { return cConditional_or_expressionConditional_or_expressionParserRuleCall_0_0; }

		//("?" expression1=expression ":" expression2=expression)?
		public Group getGroup_1() { return cGroup_1; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_0() { return cQuestionMarkKeyword_1_0; }

		//expression1=expression
		public Assignment getExpression1Assignment_1_1() { return cExpression1Assignment_1_1; }

		//expression
		public RuleCall getExpression1ExpressionParserRuleCall_1_1_0() { return cExpression1ExpressionParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//expression2=expression
		public Assignment getExpression2Assignment_1_3() { return cExpression2Assignment_1_3; }

		//expression
		public RuleCall getExpression2ExpressionParserRuleCall_1_3_0() { return cExpression2ExpressionParserRuleCall_1_3_0; }
	}

	public class Conditional_or_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "conditional_or_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConditional_and_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConditional_and_expressionConditional_and_expressionParserRuleCall_0_0 = (RuleCall)cConditional_and_expressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorOr_opParserRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cConditional_and_expressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cConditional_and_expressionConditional_and_expressionParserRuleCall_1_1_0 = (RuleCall)cConditional_and_expressionAssignment_1_1.eContents().get(0);
		
		//conditional_or_expression:
		//
		//	conditional_and_expression+=conditional_and_expression (operator+=or_op
		//
		//	conditional_and_expression+=conditional_and_expression)*;
		public ParserRule getRule() { return rule; }

		//conditional_and_expression+=conditional_and_expression (operator+=or_op
		//
		//conditional_and_expression+=conditional_and_expression)*
		public Group getGroup() { return cGroup; }

		//conditional_and_expression+=conditional_and_expression
		public Assignment getConditional_and_expressionAssignment_0() { return cConditional_and_expressionAssignment_0; }

		//conditional_and_expression
		public RuleCall getConditional_and_expressionConditional_and_expressionParserRuleCall_0_0() { return cConditional_and_expressionConditional_and_expressionParserRuleCall_0_0; }

		//(operator+=or_op conditional_and_expression+=conditional_and_expression)*
		public Group getGroup_1() { return cGroup_1; }

		//operator+=or_op
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }

		//or_op
		public RuleCall getOperatorOr_opParserRuleCall_1_0_0() { return cOperatorOr_opParserRuleCall_1_0_0; }

		//conditional_and_expression+=conditional_and_expression
		public Assignment getConditional_and_expressionAssignment_1_1() { return cConditional_and_expressionAssignment_1_1; }

		//conditional_and_expression
		public RuleCall getConditional_and_expressionConditional_and_expressionParserRuleCall_1_1_0() { return cConditional_and_expressionConditional_and_expressionParserRuleCall_1_1_0; }
	}

	public class Conditional_and_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "conditional_and_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRelational_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRelational_expressionRelational_expressionParserRuleCall_0_0 = (RuleCall)cRelational_expressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorAnd_opParserRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cRelational_expressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRelational_expressionRelational_expressionParserRuleCall_1_1_0 = (RuleCall)cRelational_expressionAssignment_1_1.eContents().get(0);
		
		//conditional_and_expression:
		//
		//	relational_expression+=relational_expression (operator+=and_op relational_expression+=relational_expression)*;
		public ParserRule getRule() { return rule; }

		//relational_expression+=relational_expression (operator+=and_op relational_expression+=relational_expression)*
		public Group getGroup() { return cGroup; }

		//relational_expression+=relational_expression
		public Assignment getRelational_expressionAssignment_0() { return cRelational_expressionAssignment_0; }

		//relational_expression
		public RuleCall getRelational_expressionRelational_expressionParserRuleCall_0_0() { return cRelational_expressionRelational_expressionParserRuleCall_0_0; }

		//(operator+=and_op relational_expression+=relational_expression)*
		public Group getGroup_1() { return cGroup_1; }

		//operator+=and_op
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }

		//and_op
		public RuleCall getOperatorAnd_opParserRuleCall_1_0_0() { return cOperatorAnd_opParserRuleCall_1_0_0; }

		//relational_expression+=relational_expression
		public Assignment getRelational_expressionAssignment_1_1() { return cRelational_expressionAssignment_1_1; }

		//relational_expression
		public RuleCall getRelational_expressionRelational_expressionParserRuleCall_1_1_0() { return cRelational_expressionRelational_expressionParserRuleCall_1_1_0; }
	}

	public class Relational_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "relational_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNegationExclamationMarkKeyword_0_0 = (Keyword)cNegationAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cBooleanAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cBooleanBOOLEANTerminalRuleCall_1_0_0 = (RuleCall)cBooleanAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cAdditive_expressionAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cAdditive_expressionAdditive_expressionParserRuleCall_1_1_0_0 = (RuleCall)cAdditive_expressionAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cRelational_opAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cRelational_opRelational_opParserRuleCall_1_1_1_0_0 = (RuleCall)cRelational_opAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cAdditive_expressionAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cAdditive_expressionAdditive_expressionParserRuleCall_1_1_1_1_0 = (RuleCall)cAdditive_expressionAssignment_1_1_1_1.eContents().get(0);
		
		//relational_expression:
		//
		//	negation="!"? (boolean=BOOLEAN | additive_expression+=additive_expression (relational_op+=relational_op
		//
		//	additive_expression+=additive_expression)*);
		public ParserRule getRule() { return rule; }

		//negation="!"? (boolean=BOOLEAN | additive_expression+=additive_expression (relational_op+=relational_op
		//
		//additive_expression+=additive_expression)*)
		public Group getGroup() { return cGroup; }

		//negation="!"?
		public Assignment getNegationAssignment_0() { return cNegationAssignment_0; }

		//"!"
		public Keyword getNegationExclamationMarkKeyword_0_0() { return cNegationExclamationMarkKeyword_0_0; }

		//boolean=BOOLEAN | additive_expression+=additive_expression (relational_op+=relational_op
		//
		//additive_expression+=additive_expression)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//boolean=BOOLEAN
		public Assignment getBooleanAssignment_1_0() { return cBooleanAssignment_1_0; }

		//BOOLEAN
		public RuleCall getBooleanBOOLEANTerminalRuleCall_1_0_0() { return cBooleanBOOLEANTerminalRuleCall_1_0_0; }

		//additive_expression+=additive_expression (relational_op+=relational_op additive_expression+=additive_expression)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//additive_expression+=additive_expression
		public Assignment getAdditive_expressionAssignment_1_1_0() { return cAdditive_expressionAssignment_1_1_0; }

		//additive_expression
		public RuleCall getAdditive_expressionAdditive_expressionParserRuleCall_1_1_0_0() { return cAdditive_expressionAdditive_expressionParserRuleCall_1_1_0_0; }

		//(relational_op+=relational_op additive_expression+=additive_expression)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//relational_op+=relational_op
		public Assignment getRelational_opAssignment_1_1_1_0() { return cRelational_opAssignment_1_1_1_0; }

		//relational_op
		public RuleCall getRelational_opRelational_opParserRuleCall_1_1_1_0_0() { return cRelational_opRelational_opParserRuleCall_1_1_1_0_0; }

		//additive_expression+=additive_expression
		public Assignment getAdditive_expressionAssignment_1_1_1_1() { return cAdditive_expressionAssignment_1_1_1_1; }

		//additive_expression
		public RuleCall getAdditive_expressionAdditive_expressionParserRuleCall_1_1_1_1_0() { return cAdditive_expressionAdditive_expressionParserRuleCall_1_1_1_1_0; }
	}

	public class Additive_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "additive_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cMultiplicative_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cMultiplicative_expressionMultiplicative_expressionParserRuleCall_0_0 = (RuleCall)cMultiplicative_expressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cAdditive_opAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cAdditive_opAdditive_opParserRuleCall_1_0_0 = (RuleCall)cAdditive_opAssignment_1_0.eContents().get(0);
		private final Assignment cMultiplicative_expressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cMultiplicative_expressionMultiplicative_expressionParserRuleCall_1_1_0 = (RuleCall)cMultiplicative_expressionAssignment_1_1.eContents().get(0);
		
		//additive_expression:
		//
		//	multiplicative_expression+=multiplicative_expression (additive_op+=additive_op
		//
		//	multiplicative_expression+=multiplicative_expression)*;
		public ParserRule getRule() { return rule; }

		//multiplicative_expression+=multiplicative_expression (additive_op+=additive_op
		//
		//multiplicative_expression+=multiplicative_expression)*
		public Group getGroup() { return cGroup; }

		//multiplicative_expression+=multiplicative_expression
		public Assignment getMultiplicative_expressionAssignment_0() { return cMultiplicative_expressionAssignment_0; }

		//multiplicative_expression
		public RuleCall getMultiplicative_expressionMultiplicative_expressionParserRuleCall_0_0() { return cMultiplicative_expressionMultiplicative_expressionParserRuleCall_0_0; }

		//(additive_op+=additive_op multiplicative_expression+=multiplicative_expression)*
		public Group getGroup_1() { return cGroup_1; }

		//additive_op+=additive_op
		public Assignment getAdditive_opAssignment_1_0() { return cAdditive_opAssignment_1_0; }

		//additive_op
		public RuleCall getAdditive_opAdditive_opParserRuleCall_1_0_0() { return cAdditive_opAdditive_opParserRuleCall_1_0_0; }

		//multiplicative_expression+=multiplicative_expression
		public Assignment getMultiplicative_expressionAssignment_1_1() { return cMultiplicative_expressionAssignment_1_1; }

		//multiplicative_expression
		public RuleCall getMultiplicative_expressionMultiplicative_expressionParserRuleCall_1_1_0() { return cMultiplicative_expressionMultiplicative_expressionParserRuleCall_1_1_0; }
	}

	public class Multiplicative_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "multiplicative_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPower_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPower_expressionPower_expressionParserRuleCall_0_0 = (RuleCall)cPower_expressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cMultiplicative_opAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cMultiplicative_opMultiplicative_opParserRuleCall_1_0_0 = (RuleCall)cMultiplicative_opAssignment_1_0.eContents().get(0);
		private final Assignment cPower_expressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cPower_expressionPower_expressionParserRuleCall_1_1_0 = (RuleCall)cPower_expressionAssignment_1_1.eContents().get(0);
		
		//multiplicative_expression:
		//
		//	power_expression+=power_expression (multiplicative_op+=multiplicative_op power_expression+=power_expression)*;
		public ParserRule getRule() { return rule; }

		//power_expression+=power_expression (multiplicative_op+=multiplicative_op power_expression+=power_expression)*
		public Group getGroup() { return cGroup; }

		//power_expression+=power_expression
		public Assignment getPower_expressionAssignment_0() { return cPower_expressionAssignment_0; }

		//power_expression
		public RuleCall getPower_expressionPower_expressionParserRuleCall_0_0() { return cPower_expressionPower_expressionParserRuleCall_0_0; }

		//(multiplicative_op+=multiplicative_op power_expression+=power_expression)*
		public Group getGroup_1() { return cGroup_1; }

		//multiplicative_op+=multiplicative_op
		public Assignment getMultiplicative_opAssignment_1_0() { return cMultiplicative_opAssignment_1_0; }

		//multiplicative_op
		public RuleCall getMultiplicative_opMultiplicative_opParserRuleCall_1_0_0() { return cMultiplicative_opMultiplicative_opParserRuleCall_1_0_0; }

		//power_expression+=power_expression
		public Assignment getPower_expressionAssignment_1_1() { return cPower_expressionAssignment_1_1; }

		//power_expression
		public RuleCall getPower_expressionPower_expressionParserRuleCall_1_1_0() { return cPower_expressionPower_expressionParserRuleCall_1_1_0; }
	}

	public class Power_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "power_expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnary_expressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUnary_expressionUnary_expressionParserRuleCall_0_0 = (RuleCall)cUnary_expressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cPower_opAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cPower_opPower_opParserRuleCall_1_0_0 = (RuleCall)cPower_opAssignment_1_0.eContents().get(0);
		private final Assignment cUnary_expressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cUnary_expressionUnary_expressionParserRuleCall_1_1_0 = (RuleCall)cUnary_expressionAssignment_1_1.eContents().get(0);
		
		//power_expression:
		//
		//	unary_expression+=unary_expression (power_op+=power_op unary_expression+=unary_expression)*;
		public ParserRule getRule() { return rule; }

		//unary_expression+=unary_expression (power_op+=power_op unary_expression+=unary_expression)*
		public Group getGroup() { return cGroup; }

		//unary_expression+=unary_expression
		public Assignment getUnary_expressionAssignment_0() { return cUnary_expressionAssignment_0; }

		//unary_expression
		public RuleCall getUnary_expressionUnary_expressionParserRuleCall_0_0() { return cUnary_expressionUnary_expressionParserRuleCall_0_0; }

		//(power_op+=power_op unary_expression+=unary_expression)*
		public Group getGroup_1() { return cGroup_1; }

		//power_op+=power_op
		public Assignment getPower_opAssignment_1_0() { return cPower_opAssignment_1_0; }

		//power_op
		public RuleCall getPower_opPower_opParserRuleCall_1_0_0() { return cPower_opPower_opParserRuleCall_1_0_0; }

		//unary_expression+=unary_expression
		public Assignment getUnary_expressionAssignment_1_1() { return cUnary_expressionAssignment_1_1; }

		//unary_expression
		public RuleCall getUnary_expressionUnary_expressionParserRuleCall_1_1_0() { return cUnary_expressionUnary_expressionParserRuleCall_1_1_0; }
	}

	public class Unary_expressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unary_expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOperatorAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOperatorUnary_opParserRuleCall_0_0_0 = (RuleCall)cOperatorAssignment_0_0.eContents().get(0);
		private final Assignment cUnary_expressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cUnary_expressionUnary_expressionParserRuleCall_0_1_0 = (RuleCall)cUnary_expressionAssignment_0_1.eContents().get(0);
		private final Assignment cPar_expressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cPar_expressionPar_expressionParserRuleCall_1_0 = (RuleCall)cPar_expressionAssignment_1.eContents().get(0);
		private final Assignment cFunction_callAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cFunction_callFunction_callParserRuleCall_2_0 = (RuleCall)cFunction_callAssignment_2.eContents().get(0);
		private final Assignment cPrimaryAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cPrimaryPrimaryParserRuleCall_3_0 = (RuleCall)cPrimaryAssignment_3.eContents().get(0);
		
		//unary_expression:
		//
		//	operator=unary_op unary_expression=unary_expression | par_expression=par_expression | function_call=function_call |
		//
		//	primary=primary;
		public ParserRule getRule() { return rule; }

		//operator=unary_op unary_expression=unary_expression | par_expression=par_expression | function_call=function_call |
		//
		//primary=primary
		public Alternatives getAlternatives() { return cAlternatives; }

		//operator=unary_op unary_expression=unary_expression
		public Group getGroup_0() { return cGroup_0; }

		//operator=unary_op
		public Assignment getOperatorAssignment_0_0() { return cOperatorAssignment_0_0; }

		//unary_op
		public RuleCall getOperatorUnary_opParserRuleCall_0_0_0() { return cOperatorUnary_opParserRuleCall_0_0_0; }

		//unary_expression=unary_expression
		public Assignment getUnary_expressionAssignment_0_1() { return cUnary_expressionAssignment_0_1; }

		//unary_expression
		public RuleCall getUnary_expressionUnary_expressionParserRuleCall_0_1_0() { return cUnary_expressionUnary_expressionParserRuleCall_0_1_0; }

		//par_expression=par_expression
		public Assignment getPar_expressionAssignment_1() { return cPar_expressionAssignment_1; }

		//par_expression
		public RuleCall getPar_expressionPar_expressionParserRuleCall_1_0() { return cPar_expressionPar_expressionParserRuleCall_1_0; }

		//function_call=function_call
		public Assignment getFunction_callAssignment_2() { return cFunction_callAssignment_2; }

		//function_call
		public RuleCall getFunction_callFunction_callParserRuleCall_2_0() { return cFunction_callFunction_callParserRuleCall_2_0; }

		//primary=primary
		public Assignment getPrimaryAssignment_3() { return cPrimaryAssignment_3; }

		//primary
		public RuleCall getPrimaryPrimaryParserRuleCall_3_0() { return cPrimaryPrimaryParserRuleCall_3_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cLiteralAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cLiteralNUMBERParserRuleCall_0_0 = (RuleCall)cLiteralAssignment_0.eContents().get(0);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cIdentifierVariable_nameParserRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		
		//primary:
		//
		//	literal=NUMBER | identifier=variable_name;
		public ParserRule getRule() { return rule; }

		//literal=NUMBER | identifier=variable_name
		public Alternatives getAlternatives() { return cAlternatives; }

		//literal=NUMBER
		public Assignment getLiteralAssignment_0() { return cLiteralAssignment_0; }

		//NUMBER
		public RuleCall getLiteralNUMBERParserRuleCall_0_0() { return cLiteralNUMBERParserRuleCall_0_0; }

		//identifier=variable_name
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }

		//variable_name
		public RuleCall getIdentifierVariable_nameParserRuleCall_1_0() { return cIdentifierVariable_nameParserRuleCall_1_0; }
	}

	public class Variable_nameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "variable_name");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cSelectorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSelectorSelectorParserRuleCall_1_0 = (RuleCall)cSelectorAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIdentifierAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_2_1_0 = (RuleCall)cIdentifierAssignment_2_1.eContents().get(0);
		private final Assignment cSelectorAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final RuleCall cSelectorSelectorParserRuleCall_2_2_0 = (RuleCall)cSelectorAssignment_2_2.eContents().get(0);
		
		//variable_name:
		//
		//	identifier+=ID selector+=selector? ("." identifier+=ID selector+=selector?)*;
		public ParserRule getRule() { return rule; }

		//identifier+=ID selector+=selector? ("." identifier+=ID selector+=selector?)*
		public Group getGroup() { return cGroup; }

		//identifier+=ID
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_0() { return cIdentifierIDTerminalRuleCall_0_0; }

		//selector+=selector?
		public Assignment getSelectorAssignment_1() { return cSelectorAssignment_1; }

		//selector
		public RuleCall getSelectorSelectorParserRuleCall_1_0() { return cSelectorSelectorParserRuleCall_1_0; }

		//("." identifier+=ID selector+=selector?)*
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//identifier+=ID
		public Assignment getIdentifierAssignment_2_1() { return cIdentifierAssignment_2_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_2_1_0() { return cIdentifierIDTerminalRuleCall_2_1_0; }

		//selector+=selector?
		public Assignment getSelectorAssignment_2_2() { return cSelectorAssignment_2_2; }

		//selector
		public RuleCall getSelectorSelectorParserRuleCall_2_2_0() { return cSelectorSelectorParserRuleCall_2_2_0; }
	}

	public class SelectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "selector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionPrimaryParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cExpressionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cExpressionPrimaryParserRuleCall_2_1_0 = (RuleCall)cExpressionAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//selector:
		//
		//	"[" expression+=primary ("," expression+=primary)* "]";
		public ParserRule getRule() { return rule; }

		//"[" expression+=primary ("," expression+=primary)* "]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//expression+=primary
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//primary
		public RuleCall getExpressionPrimaryParserRuleCall_1_0() { return cExpressionPrimaryParserRuleCall_1_0; }

		//(=> "," expression+=primary)*
		public Group getGroup_2() { return cGroup_2; }

		//=> ","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//expression+=primary
		public Assignment getExpressionAssignment_2_1() { return cExpressionAssignment_2_1; }

		//primary
		public RuleCall getExpressionPrimaryParserRuleCall_2_1_0() { return cExpressionPrimaryParserRuleCall_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class And_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "and_op");
		private final Keyword cAmpersandAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//and_op:
		//
		//	"&&";
		public ParserRule getRule() { return rule; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword() { return cAmpersandAmpersandKeyword; }
	}

	public class Or_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "or_op");
		private final Keyword cVerticalLineVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//or_op:
		//
		//	"||";
		public ParserRule getRule() { return rule; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword() { return cVerticalLineVerticalLineKeyword; }
	}

	public class Relational_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "relational_op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEqualsSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cExclamationMarkEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//relational_op:
		//
		//	"<" | ">" | "<=" | ">=" | "==" | "!=";
		public ParserRule getRule() { return rule; }

		//"<" | ">" | "<=" | ">=" | "==" | "!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_4() { return cEqualsSignEqualsSignKeyword_4; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_5() { return cExclamationMarkEqualsSignKeyword_5; }
	}

	public class Power_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "power_op");
		private final Keyword cCircumflexAccentKeyword = (Keyword)rule.eContents().get(1);
		
		//power_op:
		//
		//	"^";
		public ParserRule getRule() { return rule; }

		//"^"
		public Keyword getCircumflexAccentKeyword() { return cCircumflexAccentKeyword; }
	}

	public class Multiplicative_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "multiplicative_op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//multiplicative_op:
		//
		//	"*" | "/" | "%";
		public ParserRule getRule() { return rule; }

		//"*" | "/" | "%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//"%"
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
	}

	public class Additive_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "additive_op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//additive_op:
		//
		//	"+" | "-";
		public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class Unary_opElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "unary_op");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//unary_op:
		//
		//	"+" | "-";
		public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTEGERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFLOATTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NUMBER:
		//
		//	INTEGER | FLOAT;
		public ParserRule getRule() { return rule; }

		//INTEGER | FLOAT
		public Alternatives getAlternatives() { return cAlternatives; }

		//INTEGER
		public RuleCall getINTEGERTerminalRuleCall_0() { return cINTEGERTerminalRuleCall_0; }

		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_1() { return cFLOATTerminalRuleCall_1; }
	}
	
	
	private MclElements pMcl;
	private Mcl_objElements pMcl_obj;
	private Model_objElements pModel_obj;
	private Param_objElements pParam_obj;
	private Data_objElements pData_obj;
	private Task_objElements pTask_obj;
	private Tel_objElements pTel_obj;
	private Model_obj_blockElements pModel_obj_block;
	private Individual_model_obj_blockElements pIndividual_model_obj_block;
	private Model_prediction_obj_blockElements pModel_prediction_obj_block;
	private Random_variable_definition_blockElements pRandom_variable_definition_block;
	private Input_variables_blockElements pInput_variables_block;
	private Structural_parameters_blockElements pStructural_parameters_block;
	private Variability_parameters_blockElements pVariability_parameters_block;
	private Output_variables_blockElements pOutput_variables_block;
	private Group_variablesElements pGroup_variables;
	private Observation_blockElements pObservation_block;
	private Estimation_blockElements pEstimation_block;
	private Simulation_blockElements pSimulation_block;
	private Param_obj_blockElements pParam_obj_block;
	private Structural_blockElements pStructural_block;
	private Variability_blockElements pVariability_block;
	private Data_obj_blockElements pData_obj_block;
	private Header_blockElements pHeader_block;
	private File_blockElements pFile_block;
	private Task_obj_blockElements pTask_obj_block;
	private Parameters_blockElements pParameters_block;
	private Data_blockElements pData_block;
	private Model_blockElements pModel_block;
	private Model_block_statementElements pModel_block_statement;
	private Library_blockElements pLibrary_block;
	private Ode_blockElements pOde_block;
	private Variability_block_contentElements pVariability_block_content;
	private Variability_block_statementElements pVariability_block_statement;
	private Block_subblockElements pBlock_subblock;
	private Diag_subblockElements pDiag_subblock;
	private Variability_subblockElements pVariability_subblock;
	private File_block_contentElements pFile_block_content;
	private File_block_statementElements pFile_block_statement;
	private Inline_blockElements pInline_block;
	private Design_blockElements pDesign_block;
	private Rsscript_blockElements pRsscript_block;
	private Inline_block_contentElements pInline_block_content;
	private Function_declarationElements pFunction_declaration;
	private Function_bodyElements pFunction_body;
	private Function_subblockElements pFunction_subblock;
	private Formal_argumentsElements pFormal_arguments;
	private Function_callElements pFunction_call;
	private BlockElements pBlock;
	private Block_statementElements pBlock_statement;
	private Verbatim_blockElements pVerbatim_block;
	private Target_blockElements pTarget_block;
	private Target_languageElements pTarget_language;
	private TerminalRule tEXTERNAL_CODE;
	private Variable_declarationElements pVariable_declaration;
	private Any_expressionElements pAny_expression;
	private ExpressionElements pExpression;
	private ListElements pList;
	private Ode_listElements pOde_list;
	private Random_listElements pRandom_list;
	private ArgumentsElements pArguments;
	private ArgumentElements pArgument;
	private StatementElements pStatement;
	private Par_expressionElements pPar_expression;
	private Conditional_expressionElements pConditional_expression;
	private Conditional_or_expressionElements pConditional_or_expression;
	private Conditional_and_expressionElements pConditional_and_expression;
	private Relational_expressionElements pRelational_expression;
	private Additive_expressionElements pAdditive_expression;
	private Multiplicative_expressionElements pMultiplicative_expression;
	private Power_expressionElements pPower_expression;
	private Unary_expressionElements pUnary_expression;
	private PrimaryElements pPrimary;
	private Variable_nameElements pVariable_name;
	private SelectorElements pSelector;
	private And_opElements pAnd_op;
	private Or_opElements pOr_op;
	private Relational_opElements pRelational_op;
	private Power_opElements pPower_op;
	private Multiplicative_opElements pMultiplicative_op;
	private Additive_opElements pAdditive_op;
	private Unary_opElements pUnary_op;
	private NUMBERElements pNUMBER;
	private TerminalRule tSTRING;
	private TerminalRule tESCAPE_SEQUENCE;
	private TerminalRule tOCTAL_ESCAPE;
	private TerminalRule tUNICODE_ESCAPE;
	private TerminalRule tHEXDIGIT;
	private TerminalRule tBOOLEAN;
	private TerminalRule tINTEGER;
	private TerminalRule tFLOAT;
	private TerminalRule tEXPONENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tBEGIN;
	private TerminalRule tEND;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MdlGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.ddmore.mdl.Mdl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////An MDL specification may include any number of MDL objects
	//
	//mcl hidden(WS, ML_COMMENT, SL_COMMENT):
	//
	//	objects+=mcl_obj*;
	public MclElements getMclAccess() {
		return (pMcl != null) ? pMcl : (pMcl = new MclElements());
	}
	
	public ParserRule getMclRule() {
		return getMclAccess().getRule();
	}

	////Five MDL object types are supported
	//
	//mcl_obj:
	//
	//	model_obj=model_obj | param_obj=param_obj | data_obj=data_obj | task_obj=task_obj | tel_obj=tel_obj;
	public Mcl_objElements getMcl_objAccess() {
		return (pMcl_obj != null) ? pMcl_obj : (pMcl_obj = new Mcl_objElements());
	}
	
	public ParserRule getMcl_objRule() {
		return getMcl_objAccess().getRule();
	}

	////////////////////////////////////////////////////////////
	//
	////OBJECTS
	//
	////A model object consists of multiple model object blocks 
	//
	//model_obj:
	//
	//	identifier=ID "=" "mdlobj" BEGIN blocks+=model_obj_block* END;
	public Model_objElements getModel_objAccess() {
		return (pModel_obj != null) ? pModel_obj : (pModel_obj = new Model_objElements());
	}
	
	public ParserRule getModel_objRule() {
		return getModel_objAccess().getRule();
	}

	////A parameter object consists of multiple parameter object blocks
	//
	//param_obj:
	//
	//	identifier=ID "=" "parobj" BEGIN blocks+=param_obj_block* END;
	public Param_objElements getParam_objAccess() {
		return (pParam_obj != null) ? pParam_obj : (pParam_obj = new Param_objElements());
	}
	
	public ParserRule getParam_objRule() {
		return getParam_objAccess().getRule();
	}

	////A data object consists of multiple data object blocks
	//
	//data_obj:
	//
	//	identifier=ID "=" "dataobj" BEGIN blocks+=data_obj_block* END;
	public Data_objElements getData_objAccess() {
		return (pData_obj != null) ? pData_obj : (pData_obj = new Data_objElements());
	}
	
	public ParserRule getData_objRule() {
		return getData_objAccess().getRule();
	}

	////A task object may include several task blocks
	//
	//task_obj:
	//
	//	identifier=ID "=" "taskobj" BEGIN blocks+=task_obj_block* END;
	public Task_objElements getTask_objAccess() {
		return (pTask_obj != null) ? pTask_obj : (pTask_obj = new Task_objElements());
	}
	
	public ParserRule getTask_objRule() {
		return getTask_objAccess().getRule();
	}

	////TEL object syntactically consists of multiple function declarations
	//
	//tel_obj:
	//
	//	identifier=ID "=" "telobj" BEGIN blocks+=block_statement* END;
	public Tel_objElements getTel_objAccess() {
		return (pTel_obj != null) ? pTel_obj : (pTel_obj = new Tel_objElements());
	}
	
	public ParserRule getTel_objRule() {
		return getTel_objAccess().getRule();
	}

	////////////////////////////////////////////////////////////
	//
	////A model object block is either a general block or a block with specific structure
	//
	////In particular, INDIVIDUAL VARIABLES and MODEL PREDICTION blocks may include 
	//
	////sub-blocks or structures that are not allowed in other blocks;
	//
	//model_obj_block:
	//
	//	individual_model_obj_block=individual_model_obj_block | model_prediction_obj_block=model_prediction_obj_block |
	//
	//	random_variable_definition_block=random_variable_definition_block | input_variables_block=input_variables_block |
	//
	//	structural_parameters_block=structural_parameters_block | variability_parameters_block=variability_parameters_block |
	//
	//	output_variables_block=output_variables_block | group_variables=group_variables | observation_block=observation_block
	//
	//	| estimation_block=estimation_block | simulation_block=simulation_block;
	public Model_obj_blockElements getModel_obj_blockAccess() {
		return (pModel_obj_block != null) ? pModel_obj_block : (pModel_obj_block = new Model_obj_blockElements());
	}
	
	public ParserRule getModel_obj_blockRule() {
		return getModel_obj_blockAccess().getRule();
	}

	//individual_model_obj_block:
	//
	//	identifier="INDIVIDUAL_VARIABLES" block=block;
	public Individual_model_obj_blockElements getIndividual_model_obj_blockAccess() {
		return (pIndividual_model_obj_block != null) ? pIndividual_model_obj_block : (pIndividual_model_obj_block = new Individual_model_obj_blockElements());
	}
	
	public ParserRule getIndividual_model_obj_blockRule() {
		return getIndividual_model_obj_blockAccess().getRule();
	}

	//model_prediction_obj_block:
	//
	//	identifier="MODEL_PREDICTION" block=model_block;
	public Model_prediction_obj_blockElements getModel_prediction_obj_blockAccess() {
		return (pModel_prediction_obj_block != null) ? pModel_prediction_obj_block : (pModel_prediction_obj_block = new Model_prediction_obj_blockElements());
	}
	
	public ParserRule getModel_prediction_obj_blockRule() {
		return getModel_prediction_obj_blockAccess().getRule();
	}

	////A random variable definition is a special sub-block that starts with RANDOM VARIABLE DEFINITION keyword
	//
	//random_variable_definition_block:
	//
	//	identifier="RANDOM_VARIABLE_DEFINITION" block=block;
	public Random_variable_definition_blockElements getRandom_variable_definition_blockAccess() {
		return (pRandom_variable_definition_block != null) ? pRandom_variable_definition_block : (pRandom_variable_definition_block = new Random_variable_definition_blockElements());
	}
	
	public ParserRule getRandom_variable_definition_blockRule() {
		return getRandom_variable_definition_blockAccess().getRule();
	}

	//input_variables_block:
	//
	//	indentifier="INPUT_VARIABLES" block=block;
	public Input_variables_blockElements getInput_variables_blockAccess() {
		return (pInput_variables_block != null) ? pInput_variables_block : (pInput_variables_block = new Input_variables_blockElements());
	}
	
	public ParserRule getInput_variables_blockRule() {
		return getInput_variables_blockAccess().getRule();
	}

	//structural_parameters_block:
	//
	//	identifier="STRUCTURAL_PARAMETERS" block=block;
	public Structural_parameters_blockElements getStructural_parameters_blockAccess() {
		return (pStructural_parameters_block != null) ? pStructural_parameters_block : (pStructural_parameters_block = new Structural_parameters_blockElements());
	}
	
	public ParserRule getStructural_parameters_blockRule() {
		return getStructural_parameters_blockAccess().getRule();
	}

	//variability_parameters_block:
	//
	//	identifier="VARIABILITY_PARAMETERS" block=block;
	public Variability_parameters_blockElements getVariability_parameters_blockAccess() {
		return (pVariability_parameters_block != null) ? pVariability_parameters_block : (pVariability_parameters_block = new Variability_parameters_blockElements());
	}
	
	public ParserRule getVariability_parameters_blockRule() {
		return getVariability_parameters_blockAccess().getRule();
	}

	//output_variables_block:
	//
	//	identifier="OUTPUT_VARIABLES" block=block;
	public Output_variables_blockElements getOutput_variables_blockAccess() {
		return (pOutput_variables_block != null) ? pOutput_variables_block : (pOutput_variables_block = new Output_variables_blockElements());
	}
	
	public ParserRule getOutput_variables_blockRule() {
		return getOutput_variables_blockAccess().getRule();
	}

	//group_variables:
	//
	//	identifier="GROUP_VARIABLES" block=block;
	public Group_variablesElements getGroup_variablesAccess() {
		return (pGroup_variables != null) ? pGroup_variables : (pGroup_variables = new Group_variablesElements());
	}
	
	public ParserRule getGroup_variablesRule() {
		return getGroup_variablesAccess().getRule();
	}

	//observation_block:
	//
	//	identifier="OBSERVATION" block=block;
	public Observation_blockElements getObservation_blockAccess() {
		return (pObservation_block != null) ? pObservation_block : (pObservation_block = new Observation_blockElements());
	}
	
	public ParserRule getObservation_blockRule() {
		return getObservation_blockAccess().getRule();
	}

	//estimation_block:
	//
	//	identifier="ESTIMATION" block=block;
	public Estimation_blockElements getEstimation_blockAccess() {
		return (pEstimation_block != null) ? pEstimation_block : (pEstimation_block = new Estimation_blockElements());
	}
	
	public ParserRule getEstimation_blockRule() {
		return getEstimation_blockAccess().getRule();
	}

	//simulation_block:
	//
	//	identifier="SIMULATION" block=block;
	public Simulation_blockElements getSimulation_blockAccess() {
		return (pSimulation_block != null) ? pSimulation_block : (pSimulation_block = new Simulation_blockElements());
	}
	
	public ParserRule getSimulation_blockRule() {
		return getSimulation_blockAccess().getRule();
	}

	////Two types of parameter object blocks are supported, STRUCTURAL and VARIABILITY
	//
	//param_obj_block:
	//
	//	structural_block=structural_block | variability_block=variability_block;
	public Param_obj_blockElements getParam_obj_blockAccess() {
		return (pParam_obj_block != null) ? pParam_obj_block : (pParam_obj_block = new Param_obj_blockElements());
	}
	
	public ParserRule getParam_obj_blockRule() {
		return getParam_obj_blockAccess().getRule();
	}

	//structural_block:
	//
	//	identifier="STRUCTURAL" block=block;
	public Structural_blockElements getStructural_blockAccess() {
		return (pStructural_block != null) ? pStructural_block : (pStructural_block = new Structural_blockElements());
	}
	
	public ParserRule getStructural_blockRule() {
		return getStructural_blockAccess().getRule();
	}

	//variability_block:
	//
	//	identifier="VARIABILITY" block=variability_block_content;
	public Variability_blockElements getVariability_blockAccess() {
		return (pVariability_block != null) ? pVariability_block : (pVariability_block = new Variability_blockElements());
	}
	
	public ParserRule getVariability_blockRule() {
		return getVariability_blockAccess().getRule();
	}

	////Two types of data object blocks are supported, HEADER and FILE
	//
	//data_obj_block:
	//
	//	header_block=header_block | file_block=file_block;
	public Data_obj_blockElements getData_obj_blockAccess() {
		return (pData_obj_block != null) ? pData_obj_block : (pData_obj_block = new Data_obj_blockElements());
	}
	
	public ParserRule getData_obj_blockRule() {
		return getData_obj_blockAccess().getRule();
	}

	//header_block:
	//
	//	identifier="HEADER" block=block;
	public Header_blockElements getHeader_blockAccess() {
		return (pHeader_block != null) ? pHeader_block : (pHeader_block = new Header_blockElements());
	}
	
	public ParserRule getHeader_blockRule() {
		return getHeader_blockAccess().getRule();
	}

	//file_block:
	//
	//	identifier="FILE" block=file_block_content;
	public File_blockElements getFile_blockAccess() {
		return (pFile_block != null) ? pFile_block : (pFile_block = new File_blockElements());
	}
	
	public ParserRule getFile_blockRule() {
		return getFile_blockAccess().getRule();
	}

	////A task block is either a function declaration or a sub-block, 
	//
	////two types of sub-blocks are allowed, PARAMETERS and DATA
	//
	//task_obj_block:
	//
	//	function_declaration=function_declaration | parameters_block=parameters_block | data_block=data_block;
	public Task_obj_blockElements getTask_obj_blockAccess() {
		return (pTask_obj_block != null) ? pTask_obj_block : (pTask_obj_block = new Task_obj_blockElements());
	}
	
	public ParserRule getTask_obj_blockRule() {
		return getTask_obj_blockAccess().getRule();
	}

	//parameters_block:
	//
	//	identifier="PARAMETERS" block=block;
	public Parameters_blockElements getParameters_blockAccess() {
		return (pParameters_block != null) ? pParameters_block : (pParameters_block = new Parameters_blockElements());
	}
	
	public ParserRule getParameters_blockRule() {
		return getParameters_blockAccess().getRule();
	}

	//data_block:
	//
	//	identifier="DATA" block=block;
	public Data_blockElements getData_blockAccess() {
		return (pData_block != null) ? pData_block : (pData_block = new Data_blockElements());
	}
	
	public ParserRule getData_blockRule() {
		return getData_blockAccess().getRule();
	}

	////A MODEL PREDICTION blocks consists of multiples statements
	//
	//model_block:
	//
	//	{model_block} BEGIN statements+=model_block_statement* END;
	public Model_blockElements getModel_blockAccess() {
		return (pModel_block != null) ? pModel_block : (pModel_block = new Model_blockElements());
	}
	
	public ParserRule getModel_blockRule() {
		return getModel_blockAccess().getRule();
	}

	////A MODEL PREDICTION  block statement is either a general statement, ODE or LIBRARY sub-block 
	//
	//model_block_statement:
	//
	//	statement=block_statement | ode_block=ode_block | library_block=library_block;
	public Model_block_statementElements getModel_block_statementAccess() {
		return (pModel_block_statement != null) ? pModel_block_statement : (pModel_block_statement = new Model_block_statementElements());
	}
	
	public ParserRule getModel_block_statementRule() {
		return getModel_block_statementAccess().getRule();
	}

	////LIBRARY sub-block
	//
	//library_block:
	//
	//	identifier="LIBRARY" block=block;
	public Library_blockElements getLibrary_blockAccess() {
		return (pLibrary_block != null) ? pLibrary_block : (pLibrary_block = new Library_blockElements());
	}
	
	public ParserRule getLibrary_blockRule() {
		return getLibrary_blockAccess().getRule();
	}

	////ODE (ORDINARY DIFFERENTIAL EQUATIONS) sub-block
	//
	//ode_block:
	//
	//	identifier="ODE" block=block;
	public Ode_blockElements getOde_blockAccess() {
		return (pOde_block != null) ? pOde_block : (pOde_block = new Ode_blockElements());
	}
	
	public ParserRule getOde_blockRule() {
		return getOde_blockAccess().getRule();
	}

	///////////////////////////////////////////////////////////
	//
	////Parameter object terms
	//
	////////////////////////////////////////////////////////////
	//
	//variability_block_content:
	//
	//	{variability_block_content} BEGIN blocks+=variability_block_statement* END;
	public Variability_block_contentElements getVariability_block_contentAccess() {
		return (pVariability_block_content != null) ? pVariability_block_content : (pVariability_block_content = new Variability_block_contentElements());
	}
	
	public ParserRule getVariability_block_contentRule() {
		return getVariability_block_contentAccess().getRule();
	}

	//variability_block_statement:
	//
	//	block_statement=block_statement | block_block=block_subblock | diag_block=diag_subblock;
	public Variability_block_statementElements getVariability_block_statementAccess() {
		return (pVariability_block_statement != null) ? pVariability_block_statement : (pVariability_block_statement = new Variability_block_statementElements());
	}
	
	public ParserRule getVariability_block_statementRule() {
		return getVariability_block_statementAccess().getRule();
	}

	//block_subblock:
	//
	//	identifier="block" block=variability_subblock;
	public Block_subblockElements getBlock_subblockAccess() {
		return (pBlock_subblock != null) ? pBlock_subblock : (pBlock_subblock = new Block_subblockElements());
	}
	
	public ParserRule getBlock_subblockRule() {
		return getBlock_subblockAccess().getRule();
	}

	//diag_subblock:
	//
	//	identifier="diag" block=variability_subblock;
	public Diag_subblockElements getDiag_subblockAccess() {
		return (pDiag_subblock != null) ? pDiag_subblock : (pDiag_subblock = new Diag_subblockElements());
	}
	
	public ParserRule getDiag_subblockRule() {
		return getDiag_subblockAccess().getRule();
	}

	//variability_subblock:
	//
	//	"(" arguments=arguments ")";
	public Variability_subblockElements getVariability_subblockAccess() {
		return (pVariability_subblock != null) ? pVariability_subblock : (pVariability_subblock = new Variability_subblockElements());
	}
	
	public ParserRule getVariability_subblockRule() {
		return getVariability_subblockAccess().getRule();
	}

	////////////////////////////////////////////////////////////
	//
	////Data object terms
	//
	////////////////////////////////////////////////////////////
	//
	//file_block_content:
	//
	//	{file_block_content} BEGIN blocks+=file_block_statement* END;
	public File_block_contentElements getFile_block_contentAccess() {
		return (pFile_block_content != null) ? pFile_block_content : (pFile_block_content = new File_block_contentElements());
	}
	
	public ParserRule getFile_block_contentRule() {
		return getFile_block_contentAccess().getRule();
	}

	//file_block_statement:
	//
	//	statement=block_statement | inline_block=inline_block | design_block=design_block | rsscript_block=rsscript_block;
	public File_block_statementElements getFile_block_statementAccess() {
		return (pFile_block_statement != null) ? pFile_block_statement : (pFile_block_statement = new File_block_statementElements());
	}
	
	public ParserRule getFile_block_statementRule() {
		return getFile_block_statementAccess().getRule();
	}

	//inline_block:
	//
	//	identifier="INLINE" block=inline_block_content;
	public Inline_blockElements getInline_blockAccess() {
		return (pInline_block != null) ? pInline_block : (pInline_block = new Inline_blockElements());
	}
	
	public ParserRule getInline_blockRule() {
		return getInline_blockAccess().getRule();
	}

	//design_block:
	//
	//	identifier="DESIGN" block=block;
	public Design_blockElements getDesign_blockAccess() {
		return (pDesign_block != null) ? pDesign_block : (pDesign_block = new Design_blockElements());
	}
	
	public ParserRule getDesign_blockRule() {
		return getDesign_blockAccess().getRule();
	}

	//rsscript_block:
	//
	//	identifier="RSSCRIPT" block=block;
	public Rsscript_blockElements getRsscript_blockAccess() {
		return (pRsscript_block != null) ? pRsscript_block : (pRsscript_block = new Rsscript_blockElements());
	}
	
	public ParserRule getRsscript_blockRule() {
		return getRsscript_blockAccess().getRule();
	}

	//inline_block_content:
	//
	//	{inline_block_content} BEGIN identifiers+=ID* values+=(NUMBER | ".")* END;
	public Inline_block_contentElements getInline_block_contentAccess() {
		return (pInline_block_content != null) ? pInline_block_content : (pInline_block_content = new Inline_block_contentElements());
	}
	
	public ParserRule getInline_block_contentRule() {
		return getInline_block_contentAccess().getRule();
	}

	////////////////////////////////////////////////////////////
	//
	////Function declaration and call
	//
	////////////////////////////////////////////////////////////
	//
	//function_declaration:
	//
	//	identifier=ID "=" "function" "(" formal_arguments=formal_arguments ")" function_body=function_body;
	public Function_declarationElements getFunction_declarationAccess() {
		return (pFunction_declaration != null) ? pFunction_declaration : (pFunction_declaration = new Function_declarationElements());
	}
	
	public ParserRule getFunction_declarationRule() {
		return getFunction_declarationAccess().getRule();
	}

	//function_body:
	//
	//	{function_body} BEGIN blocks+=function_subblock* END;
	public Function_bodyElements getFunction_bodyAccess() {
		return (pFunction_body != null) ? pFunction_body : (pFunction_body = new Function_bodyElements());
	}
	
	public ParserRule getFunction_bodyRule() {
		return getFunction_bodyAccess().getRule();
	}

	//function_subblock:
	//
	//	identifier="ESTIMATE" estimate_defn=block | identifier="SIMULATE" simulate_defn=block;
	public Function_subblockElements getFunction_subblockAccess() {
		return (pFunction_subblock != null) ? pFunction_subblock : (pFunction_subblock = new Function_subblockElements());
	}
	
	public ParserRule getFunction_subblockRule() {
		return getFunction_subblockAccess().getRule();
	}

	//formal_arguments:
	//
	//	identifiers+=ID ("," identifiers+=ID)*;
	public Formal_argumentsElements getFormal_argumentsAccess() {
		return (pFormal_arguments != null) ? pFormal_arguments : (pFormal_arguments = new Formal_argumentsElements());
	}
	
	public ParserRule getFormal_argumentsRule() {
		return getFormal_argumentsAccess().getRule();
	}

	//function_call:
	//
	//	funct_name=ID "(" arguments=arguments ")";
	public Function_callElements getFunction_callAccess() {
		return (pFunction_call != null) ? pFunction_call : (pFunction_call = new Function_callElements());
	}
	
	public ParserRule getFunction_callRule() {
		return getFunction_callAccess().getRule();
	}

	////////////////////////////////////////////////////////////
	//
	////Common terms
	//
	////////////////////////////////////////////////////////////
	//
	//block:
	//
	//	{block} BEGIN statements+=block_statement* END;
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//block_statement:
	//
	//	variable_declaration=variable_declaration | function_call=function_call | statement=statement |
	//
	//	verbatim_block=verbatim_block;
	public Block_statementElements getBlock_statementAccess() {
		return (pBlock_statement != null) ? pBlock_statement : (pBlock_statement = new Block_statementElements());
	}
	
	public ParserRule getBlock_statementRule() {
		return getBlock_statementAccess().getRule();
	}

	//verbatim_block:
	//
	//	identifier="VERBATIM" BEGIN (block=target_block | external_code=EXTERNAL_CODE) END;
	public Verbatim_blockElements getVerbatim_blockAccess() {
		return (pVerbatim_block != null) ? pVerbatim_block : (pVerbatim_block = new Verbatim_blockElements());
	}
	
	public ParserRule getVerbatim_blockRule() {
		return getVerbatim_blockAccess().getRule();
	}

	//target_block:
	//
	//	identifier=target_language BEGIN external_code=EXTERNAL_CODE END;
	public Target_blockElements getTarget_blockAccess() {
		return (pTarget_block != null) ? pTarget_block : (pTarget_block = new Target_blockElements());
	}
	
	public ParserRule getTarget_blockRule() {
		return getTarget_blockAccess().getRule();
	}

	//target_language:
	//
	//	"NMTRAN" | "MLXTRAN" | "PML" | "BUGS" | "RCODE" | "MATLAB";
	public Target_languageElements getTarget_languageAccess() {
		return (pTarget_language != null) ? pTarget_language : (pTarget_language = new Target_languageElements());
	}
	
	public ParserRule getTarget_languageRule() {
		return getTarget_languageAccess().getRule();
	}

	//terminal EXTERNAL_CODE:
	//
	//	"***"->"***";
	public TerminalRule getEXTERNAL_CODERule() {
		return (tEXTERNAL_CODE != null) ? tEXTERNAL_CODE : (tEXTERNAL_CODE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXTERNAL_CODE"));
	} 

	//variable_declaration:
	//
	//	identifier=variable_name ("=" expression=any_expression | random_list=random_list)?;
	public Variable_declarationElements getVariable_declarationAccess() {
		return (pVariable_declaration != null) ? pVariable_declaration : (pVariable_declaration = new Variable_declarationElements());
	}
	
	public ParserRule getVariable_declarationRule() {
		return getVariable_declarationAccess().getRule();
	}

	//any_expression:
	//
	//	expression=expression | list=list | ode_list=ode_list | random_list=random_list;
	public Any_expressionElements getAny_expressionAccess() {
		return (pAny_expression != null) ? pAny_expression : (pAny_expression = new Any_expressionElements());
	}
	
	public ParserRule getAny_expressionRule() {
		return getAny_expressionAccess().getRule();
	}

	//expression:
	//
	//	conditional_expression=conditional_expression | string_expression+=STRING ("+" string_expression+=STRING)*;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//list:
	//
	//	"list" "(" arguments=arguments ")";
	public ListElements getListAccess() {
		return (pList != null) ? pList : (pList = new ListElements());
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}

	////An ODE list
	//
	//ode_list:
	//
	//	"ode" "(" arguments=arguments ")";
	public Ode_listElements getOde_listAccess() {
		return (pOde_list != null) ? pOde_list : (pOde_list = new Ode_listElements());
	}
	
	public ParserRule getOde_listRule() {
		return getOde_listAccess().getRule();
	}

	////A random list is identified by ~ symbol
	//
	//random_list:
	//
	//	"~" "(" arguments=arguments ")";
	public Random_listElements getRandom_listAccess() {
		return (pRandom_list != null) ? pRandom_list : (pRandom_list = new Random_listElements());
	}
	
	public ParserRule getRandom_listRule() {
		return getRandom_listAccess().getRule();
	}

	//arguments:
	//
	//	arguments+=argument ("," arguments+=argument)*;
	public ArgumentsElements getArgumentsAccess() {
		return (pArguments != null) ? pArguments : (pArguments = new ArgumentsElements());
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}

	//argument:
	//
	//	identifier=ID "=" expression=any_expression | expression=any_expression;
	public ArgumentElements getArgumentAccess() {
		return (pArgument != null) ? pArgument : (pArgument = new ArgumentElements());
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	//statement:
	//
	//	block=block | "if" par_expression=par_expression if_statement=block_statement ("else"
	//
	//	else_statement=block_statement)?;
	public StatementElements getStatementAccess() {
		return (pStatement != null) ? pStatement : (pStatement = new StatementElements());
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//par_expression:
	//
	//	"(" expression=expression ")";
	public Par_expressionElements getPar_expressionAccess() {
		return (pPar_expression != null) ? pPar_expression : (pPar_expression = new Par_expressionElements());
	}
	
	public ParserRule getPar_expressionRule() {
		return getPar_expressionAccess().getRule();
	}

	//conditional_expression:
	//
	//	conditional_or_expression=conditional_or_expression ("?" expression1=expression ":" expression2=expression)?;
	public Conditional_expressionElements getConditional_expressionAccess() {
		return (pConditional_expression != null) ? pConditional_expression : (pConditional_expression = new Conditional_expressionElements());
	}
	
	public ParserRule getConditional_expressionRule() {
		return getConditional_expressionAccess().getRule();
	}

	//conditional_or_expression:
	//
	//	conditional_and_expression+=conditional_and_expression (operator+=or_op
	//
	//	conditional_and_expression+=conditional_and_expression)*;
	public Conditional_or_expressionElements getConditional_or_expressionAccess() {
		return (pConditional_or_expression != null) ? pConditional_or_expression : (pConditional_or_expression = new Conditional_or_expressionElements());
	}
	
	public ParserRule getConditional_or_expressionRule() {
		return getConditional_or_expressionAccess().getRule();
	}

	//conditional_and_expression:
	//
	//	relational_expression+=relational_expression (operator+=and_op relational_expression+=relational_expression)*;
	public Conditional_and_expressionElements getConditional_and_expressionAccess() {
		return (pConditional_and_expression != null) ? pConditional_and_expression : (pConditional_and_expression = new Conditional_and_expressionElements());
	}
	
	public ParserRule getConditional_and_expressionRule() {
		return getConditional_and_expressionAccess().getRule();
	}

	//relational_expression:
	//
	//	negation="!"? (boolean=BOOLEAN | additive_expression+=additive_expression (relational_op+=relational_op
	//
	//	additive_expression+=additive_expression)*);
	public Relational_expressionElements getRelational_expressionAccess() {
		return (pRelational_expression != null) ? pRelational_expression : (pRelational_expression = new Relational_expressionElements());
	}
	
	public ParserRule getRelational_expressionRule() {
		return getRelational_expressionAccess().getRule();
	}

	//additive_expression:
	//
	//	multiplicative_expression+=multiplicative_expression (additive_op+=additive_op
	//
	//	multiplicative_expression+=multiplicative_expression)*;
	public Additive_expressionElements getAdditive_expressionAccess() {
		return (pAdditive_expression != null) ? pAdditive_expression : (pAdditive_expression = new Additive_expressionElements());
	}
	
	public ParserRule getAdditive_expressionRule() {
		return getAdditive_expressionAccess().getRule();
	}

	//multiplicative_expression:
	//
	//	power_expression+=power_expression (multiplicative_op+=multiplicative_op power_expression+=power_expression)*;
	public Multiplicative_expressionElements getMultiplicative_expressionAccess() {
		return (pMultiplicative_expression != null) ? pMultiplicative_expression : (pMultiplicative_expression = new Multiplicative_expressionElements());
	}
	
	public ParserRule getMultiplicative_expressionRule() {
		return getMultiplicative_expressionAccess().getRule();
	}

	//power_expression:
	//
	//	unary_expression+=unary_expression (power_op+=power_op unary_expression+=unary_expression)*;
	public Power_expressionElements getPower_expressionAccess() {
		return (pPower_expression != null) ? pPower_expression : (pPower_expression = new Power_expressionElements());
	}
	
	public ParserRule getPower_expressionRule() {
		return getPower_expressionAccess().getRule();
	}

	//unary_expression:
	//
	//	operator=unary_op unary_expression=unary_expression | par_expression=par_expression | function_call=function_call |
	//
	//	primary=primary;
	public Unary_expressionElements getUnary_expressionAccess() {
		return (pUnary_expression != null) ? pUnary_expression : (pUnary_expression = new Unary_expressionElements());
	}
	
	public ParserRule getUnary_expressionRule() {
		return getUnary_expressionAccess().getRule();
	}

	//primary:
	//
	//	literal=NUMBER | identifier=variable_name;
	public PrimaryElements getPrimaryAccess() {
		return (pPrimary != null) ? pPrimary : (pPrimary = new PrimaryElements());
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//variable_name:
	//
	//	identifier+=ID selector+=selector? ("." identifier+=ID selector+=selector?)*;
	public Variable_nameElements getVariable_nameAccess() {
		return (pVariable_name != null) ? pVariable_name : (pVariable_name = new Variable_nameElements());
	}
	
	public ParserRule getVariable_nameRule() {
		return getVariable_nameAccess().getRule();
	}

	//selector:
	//
	//	"[" expression+=primary ("," expression+=primary)* "]";
	public SelectorElements getSelectorAccess() {
		return (pSelector != null) ? pSelector : (pSelector = new SelectorElements());
	}
	
	public ParserRule getSelectorRule() {
		return getSelectorAccess().getRule();
	}

	//and_op:
	//
	//	"&&";
	public And_opElements getAnd_opAccess() {
		return (pAnd_op != null) ? pAnd_op : (pAnd_op = new And_opElements());
	}
	
	public ParserRule getAnd_opRule() {
		return getAnd_opAccess().getRule();
	}

	//or_op:
	//
	//	"||";
	public Or_opElements getOr_opAccess() {
		return (pOr_op != null) ? pOr_op : (pOr_op = new Or_opElements());
	}
	
	public ParserRule getOr_opRule() {
		return getOr_opAccess().getRule();
	}

	//relational_op:
	//
	//	"<" | ">" | "<=" | ">=" | "==" | "!=";
	public Relational_opElements getRelational_opAccess() {
		return (pRelational_op != null) ? pRelational_op : (pRelational_op = new Relational_opElements());
	}
	
	public ParserRule getRelational_opRule() {
		return getRelational_opAccess().getRule();
	}

	//power_op:
	//
	//	"^";
	public Power_opElements getPower_opAccess() {
		return (pPower_op != null) ? pPower_op : (pPower_op = new Power_opElements());
	}
	
	public ParserRule getPower_opRule() {
		return getPower_opAccess().getRule();
	}

	//multiplicative_op:
	//
	//	"*" | "/" | "%";
	public Multiplicative_opElements getMultiplicative_opAccess() {
		return (pMultiplicative_op != null) ? pMultiplicative_op : (pMultiplicative_op = new Multiplicative_opElements());
	}
	
	public ParserRule getMultiplicative_opRule() {
		return getMultiplicative_opAccess().getRule();
	}

	//additive_op:
	//
	//	"+" | "-";
	public Additive_opElements getAdditive_opAccess() {
		return (pAdditive_op != null) ? pAdditive_op : (pAdditive_op = new Additive_opElements());
	}
	
	public ParserRule getAdditive_opRule() {
		return getAdditive_opAccess().getRule();
	}

	//unary_op:
	//
	//	"+" | "-";
	public Unary_opElements getUnary_opAccess() {
		return (pUnary_op != null) ? pUnary_op : (pUnary_op = new Unary_opElements());
	}
	
	public ParserRule getUnary_opRule() {
		return getUnary_opAccess().getRule();
	}

	//NUMBER:
	//
	//	INTEGER | FLOAT;
	public NUMBERElements getNUMBERAccess() {
		return (pNUMBER != null) ? pNUMBER : (pNUMBER = new NUMBERElements());
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}

	//terminal STRING:
	//
	//	"\"" (ESCAPE_SEQUENCE | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal fragment ESCAPE_SEQUENCE:
	//
	//	"\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | UNICODE_ESCAPE | OCTAL_ESCAPE;
	public TerminalRule getESCAPE_SEQUENCERule() {
		return (tESCAPE_SEQUENCE != null) ? tESCAPE_SEQUENCE : (tESCAPE_SEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ESCAPE_SEQUENCE"));
	} 

	//terminal fragment OCTAL_ESCAPE:
	//
	//	"\\" "0".."3" "0".."7" "0".."7" | "\\" "0".."7" "0".."7" | "\\" "0".."7";
	public TerminalRule getOCTAL_ESCAPERule() {
		return (tOCTAL_ESCAPE != null) ? tOCTAL_ESCAPE : (tOCTAL_ESCAPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OCTAL_ESCAPE"));
	} 

	//terminal fragment UNICODE_ESCAPE:
	//
	//	"\\" "u" HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT;
	public TerminalRule getUNICODE_ESCAPERule() {
		return (tUNICODE_ESCAPE != null) ? tUNICODE_ESCAPE : (tUNICODE_ESCAPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNICODE_ESCAPE"));
	} 

	//terminal fragment HEXDIGIT:
	//
	//	"0".."9" | "a".."f" | "A".."F";
	public TerminalRule getHEXDIGITRule() {
		return (tHEXDIGIT != null) ? tHEXDIGIT : (tHEXDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEXDIGIT"));
	} 

	//terminal BOOLEAN:
	//
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return (tBOOLEAN != null) ? tBOOLEAN : (tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN"));
	} 

	//terminal INTEGER:
	//
	//	"0" | "1".."9" "0".."9"*;
	public TerminalRule getINTEGERRule() {
		return (tINTEGER != null) ? tINTEGER : (tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER"));
	} 

	//terminal FLOAT:
	//
	//	"0".."9"+ "." "0".."9"* EXPONENT? | "." "0".."9"+ EXPONENT? | "0".."9"+ EXPONENT | "0".."9";
	public TerminalRule getFLOATRule() {
		return (tFLOAT != null) ? tFLOAT : (tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT"));
	} 

	//terminal fragment EXPONENT:
	//
	//	("e" | "E") ("+" | "-")? "0".."9"+;
	public TerminalRule getEXPONENTRule() {
		return (tEXPONENT != null) ? tEXPONENT : (tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPONENT"));
	} 

	//terminal SL_COMMENT:
	//
	//	"#" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal BEGIN:
	//
	//	"{";
	public TerminalRule getBEGINRule() {
		return (tBEGIN != null) ? tBEGIN : (tBEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BEGIN"));
	} 

	//terminal END:
	//
	//	"}";
	public TerminalRule getENDRule() {
		return (tEND != null) ? tEND : (tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "END"));
	} 

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal ML_COMMENT:
	//
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
