/*
* generated by Xtext
*/
package org.ddmore.mdl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class MdlGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class MclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Mcl");
		private final Assignment cObjectsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cObjectsMclObjectParserRuleCall_0 = (RuleCall)cObjectsAssignment.eContents().get(0);
		
		//Mcl hidden(WS, ML_COMMENT, SL_COMMENT):
		//
		//	objects+=MclObject*;
		public ParserRule getRule() { return rule; }

		//objects+=MclObject*
		public Assignment getObjectsAssignment() { return cObjectsAssignment; }

		//MclObject
		public RuleCall getObjectsMclObjectParserRuleCall_0() { return cObjectsMclObjectParserRuleCall_0; }
	}

	public class MclObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MclObject");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cModelObjectAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cModelObjectModelObjectParserRuleCall_0_0 = (RuleCall)cModelObjectAssignment_0.eContents().get(0);
		private final Assignment cParameterObjectAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cParameterObjectParameterObjectParserRuleCall_1_0 = (RuleCall)cParameterObjectAssignment_1.eContents().get(0);
		private final Assignment cDataObjectAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDataObjectDataObjectParserRuleCall_2_0 = (RuleCall)cDataObjectAssignment_2.eContents().get(0);
		private final Assignment cTaskObjectAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cTaskObjectTaskObjectParserRuleCall_3_0 = (RuleCall)cTaskObjectAssignment_3.eContents().get(0);
		private final Assignment cTelObjectAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cTelObjectTELObjectParserRuleCall_4_0 = (RuleCall)cTelObjectAssignment_4.eContents().get(0);
		
		//MclObject:
		//
		//	modelObject=ModelObject | parameterObject=ParameterObject | dataObject=DataObject | taskObject=TaskObject |
		//
		//	telObject=TELObject;
		public ParserRule getRule() { return rule; }

		//modelObject=ModelObject | parameterObject=ParameterObject | dataObject=DataObject | taskObject=TaskObject |
		//
		//telObject=TELObject
		public Alternatives getAlternatives() { return cAlternatives; }

		//modelObject=ModelObject
		public Assignment getModelObjectAssignment_0() { return cModelObjectAssignment_0; }

		//ModelObject
		public RuleCall getModelObjectModelObjectParserRuleCall_0_0() { return cModelObjectModelObjectParserRuleCall_0_0; }

		//parameterObject=ParameterObject
		public Assignment getParameterObjectAssignment_1() { return cParameterObjectAssignment_1; }

		//ParameterObject
		public RuleCall getParameterObjectParameterObjectParserRuleCall_1_0() { return cParameterObjectParameterObjectParserRuleCall_1_0; }

		//dataObject=DataObject
		public Assignment getDataObjectAssignment_2() { return cDataObjectAssignment_2; }

		//DataObject
		public RuleCall getDataObjectDataObjectParserRuleCall_2_0() { return cDataObjectDataObjectParserRuleCall_2_0; }

		//taskObject=TaskObject
		public Assignment getTaskObjectAssignment_3() { return cTaskObjectAssignment_3; }

		//TaskObject
		public RuleCall getTaskObjectTaskObjectParserRuleCall_3_0() { return cTaskObjectTaskObjectParserRuleCall_3_0; }

		//telObject=TELObject
		public Assignment getTelObjectAssignment_4() { return cTelObjectAssignment_4; }

		//TELObject
		public RuleCall getTelObjectTELObjectParserRuleCall_4_0() { return cTelObjectTELObjectParserRuleCall_4_0; }
	}

	public class ModelObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierObjectNameParserRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cMdlobjKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cBlocksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlocksModelObjectBlockParserRuleCall_4_0 = (RuleCall)cBlocksAssignment_4.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//ModelObject:
		//
		//	identifier=ObjectName "=" "mdlobj" BEGIN blocks+=ModelObjectBlock* END;
		public ParserRule getRule() { return rule; }

		//identifier=ObjectName "=" "mdlobj" BEGIN blocks+=ModelObjectBlock* END
		public Group getGroup() { return cGroup; }

		//identifier=ObjectName
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//ObjectName
		public RuleCall getIdentifierObjectNameParserRuleCall_0_0() { return cIdentifierObjectNameParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"mdlobj"
		public Keyword getMdlobjKeyword_2() { return cMdlobjKeyword_2; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }

		//blocks+=ModelObjectBlock*
		public Assignment getBlocksAssignment_4() { return cBlocksAssignment_4; }

		//ModelObjectBlock
		public RuleCall getBlocksModelObjectBlockParserRuleCall_4_0() { return cBlocksModelObjectBlockParserRuleCall_4_0; }

		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}

	public class ParameterObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierObjectNameParserRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cParobjKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cBlocksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlocksParameterObjectBlockParserRuleCall_4_0 = (RuleCall)cBlocksAssignment_4.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//ParameterObject:
		//
		//	identifier=ObjectName "=" "parobj" BEGIN blocks+=ParameterObjectBlock* END;
		public ParserRule getRule() { return rule; }

		//identifier=ObjectName "=" "parobj" BEGIN blocks+=ParameterObjectBlock* END
		public Group getGroup() { return cGroup; }

		//identifier=ObjectName
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//ObjectName
		public RuleCall getIdentifierObjectNameParserRuleCall_0_0() { return cIdentifierObjectNameParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"parobj"
		public Keyword getParobjKeyword_2() { return cParobjKeyword_2; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }

		//blocks+=ParameterObjectBlock*
		public Assignment getBlocksAssignment_4() { return cBlocksAssignment_4; }

		//ParameterObjectBlock
		public RuleCall getBlocksParameterObjectBlockParserRuleCall_4_0() { return cBlocksParameterObjectBlockParserRuleCall_4_0; }

		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}

	public class DataObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierObjectNameParserRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDataobjKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cBlocksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlocksDataObjectBlockParserRuleCall_4_0 = (RuleCall)cBlocksAssignment_4.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//DataObject:
		//
		//	identifier=ObjectName "=" "dataobj" BEGIN blocks+=DataObjectBlock* END;
		public ParserRule getRule() { return rule; }

		//identifier=ObjectName "=" "dataobj" BEGIN blocks+=DataObjectBlock* END
		public Group getGroup() { return cGroup; }

		//identifier=ObjectName
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//ObjectName
		public RuleCall getIdentifierObjectNameParserRuleCall_0_0() { return cIdentifierObjectNameParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"dataobj"
		public Keyword getDataobjKeyword_2() { return cDataobjKeyword_2; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }

		//blocks+=DataObjectBlock*
		public Assignment getBlocksAssignment_4() { return cBlocksAssignment_4; }

		//DataObjectBlock
		public RuleCall getBlocksDataObjectBlockParserRuleCall_4_0() { return cBlocksDataObjectBlockParserRuleCall_4_0; }

		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}

	public class TaskObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TaskObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierObjectNameParserRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTaskobjKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cBlocksAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBlocksTaskObjectBlockParserRuleCall_4_0 = (RuleCall)cBlocksAssignment_4.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//TaskObject:
		//
		//	identifier=ObjectName "=" "taskobj" BEGIN blocks+=TaskObjectBlock* END;
		public ParserRule getRule() { return rule; }

		//identifier=ObjectName "=" "taskobj" BEGIN blocks+=TaskObjectBlock* END
		public Group getGroup() { return cGroup; }

		//identifier=ObjectName
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//ObjectName
		public RuleCall getIdentifierObjectNameParserRuleCall_0_0() { return cIdentifierObjectNameParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"taskobj"
		public Keyword getTaskobjKeyword_2() { return cTaskobjKeyword_2; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }

		//blocks+=TaskObjectBlock*
		public Assignment getBlocksAssignment_4() { return cBlocksAssignment_4; }

		//TaskObjectBlock
		public RuleCall getBlocksTaskObjectBlockParserRuleCall_4_0() { return cBlocksTaskObjectBlockParserRuleCall_4_0; }

		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}

	public class TELObjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TELObject");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierObjectNameParserRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTelobjKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Assignment cStatementsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStatementsBlockStatementParserRuleCall_4_0 = (RuleCall)cStatementsAssignment_4.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//TELObject:
		//
		//	identifier=ObjectName "=" "telobj" BEGIN statements+=BlockStatement* END;
		public ParserRule getRule() { return rule; }

		//identifier=ObjectName "=" "telobj" BEGIN statements+=BlockStatement* END
		public Group getGroup() { return cGroup; }

		//identifier=ObjectName
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//ObjectName
		public RuleCall getIdentifierObjectNameParserRuleCall_0_0() { return cIdentifierObjectNameParserRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"telobj"
		public Keyword getTelobjKeyword_2() { return cTelobjKeyword_2; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }

		//statements+=BlockStatement*
		public Assignment getStatementsAssignment_4() { return cStatementsAssignment_4; }

		//BlockStatement
		public RuleCall getStatementsBlockStatementParserRuleCall_4_0() { return cStatementsBlockStatementParserRuleCall_4_0; }

		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}

	public class ModelObjectBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelObjectBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIndividualVariablesBlockAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIndividualVariablesBlockIndividualVariablesBlockParserRuleCall_0_0 = (RuleCall)cIndividualVariablesBlockAssignment_0.eContents().get(0);
		private final Assignment cModelPredictionBlockAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cModelPredictionBlockModelPredictionBlockParserRuleCall_1_0 = (RuleCall)cModelPredictionBlockAssignment_1.eContents().get(0);
		private final Assignment cRandomVariableDefinitionBlockAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cRandomVariableDefinitionBlockRandomVariableDefinitionBlockParserRuleCall_2_0 = (RuleCall)cRandomVariableDefinitionBlockAssignment_2.eContents().get(0);
		private final Assignment cInputVariablesBlockAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cInputVariablesBlockInputVariablesBlockParserRuleCall_3_0 = (RuleCall)cInputVariablesBlockAssignment_3.eContents().get(0);
		private final Assignment cStructuralParametersBlockAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cStructuralParametersBlockStructuralParametersBlockParserRuleCall_4_0 = (RuleCall)cStructuralParametersBlockAssignment_4.eContents().get(0);
		private final Assignment cVariabilityParametersBlockAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cVariabilityParametersBlockVariabilityParametersBlockParserRuleCall_5_0 = (RuleCall)cVariabilityParametersBlockAssignment_5.eContents().get(0);
		private final Assignment cOutputVariablesBlockAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cOutputVariablesBlockOutputVariablesBlockParserRuleCall_6_0 = (RuleCall)cOutputVariablesBlockAssignment_6.eContents().get(0);
		private final Assignment cGroupVariablesBlockAssignment_7 = (Assignment)cAlternatives.eContents().get(7);
		private final RuleCall cGroupVariablesBlockGroupVariablesBlockParserRuleCall_7_0 = (RuleCall)cGroupVariablesBlockAssignment_7.eContents().get(0);
		private final Assignment cObservationBlockAssignment_8 = (Assignment)cAlternatives.eContents().get(8);
		private final RuleCall cObservationBlockObservationBlockParserRuleCall_8_0 = (RuleCall)cObservationBlockAssignment_8.eContents().get(0);
		private final Assignment cEstimationBlockAssignment_9 = (Assignment)cAlternatives.eContents().get(9);
		private final RuleCall cEstimationBlockEstimationBlockParserRuleCall_9_0 = (RuleCall)cEstimationBlockAssignment_9.eContents().get(0);
		private final Assignment cSimulationBlockAssignment_10 = (Assignment)cAlternatives.eContents().get(10);
		private final RuleCall cSimulationBlockSimulationBlockParserRuleCall_10_0 = (RuleCall)cSimulationBlockAssignment_10.eContents().get(0);
		private final Assignment cVerbatimBlockAssignment_11 = (Assignment)cAlternatives.eContents().get(11);
		private final RuleCall cVerbatimBlockVerbatimBlockParserRuleCall_11_0 = (RuleCall)cVerbatimBlockAssignment_11.eContents().get(0);
		
		////////////////////////////////////////////////////////////
		//
		////Model Object
		//
		////////////////////////////////////////////////////////////
		//
		//ModelObjectBlock:
		//
		//	individualVariablesBlock=IndividualVariablesBlock | modelPredictionBlock=ModelPredictionBlock |
		//
		//	randomVariableDefinitionBlock=RandomVariableDefinitionBlock | inputVariablesBlock=InputVariablesBlock |
		//
		//	structuralParametersBlock=StructuralParametersBlock | variabilityParametersBlock=VariabilityParametersBlock |
		//
		//	outputVariablesBlock=OutputVariablesBlock | groupVariablesBlock=GroupVariablesBlock |
		//
		//	observationBlock=ObservationBlock | estimationBlock=EstimationBlock | simulationBlock=SimulationBlock |
		//
		//	verbatimBlock=VerbatimBlock;
		public ParserRule getRule() { return rule; }

		//individualVariablesBlock=IndividualVariablesBlock | modelPredictionBlock=ModelPredictionBlock |
		//
		//randomVariableDefinitionBlock=RandomVariableDefinitionBlock | inputVariablesBlock=InputVariablesBlock |
		//
		//structuralParametersBlock=StructuralParametersBlock | variabilityParametersBlock=VariabilityParametersBlock |
		//
		//outputVariablesBlock=OutputVariablesBlock | groupVariablesBlock=GroupVariablesBlock |
		//
		//observationBlock=ObservationBlock | estimationBlock=EstimationBlock | simulationBlock=SimulationBlock |
		//
		//verbatimBlock=VerbatimBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//individualVariablesBlock=IndividualVariablesBlock
		public Assignment getIndividualVariablesBlockAssignment_0() { return cIndividualVariablesBlockAssignment_0; }

		//IndividualVariablesBlock
		public RuleCall getIndividualVariablesBlockIndividualVariablesBlockParserRuleCall_0_0() { return cIndividualVariablesBlockIndividualVariablesBlockParserRuleCall_0_0; }

		//modelPredictionBlock=ModelPredictionBlock
		public Assignment getModelPredictionBlockAssignment_1() { return cModelPredictionBlockAssignment_1; }

		//ModelPredictionBlock
		public RuleCall getModelPredictionBlockModelPredictionBlockParserRuleCall_1_0() { return cModelPredictionBlockModelPredictionBlockParserRuleCall_1_0; }

		//randomVariableDefinitionBlock=RandomVariableDefinitionBlock
		public Assignment getRandomVariableDefinitionBlockAssignment_2() { return cRandomVariableDefinitionBlockAssignment_2; }

		//RandomVariableDefinitionBlock
		public RuleCall getRandomVariableDefinitionBlockRandomVariableDefinitionBlockParserRuleCall_2_0() { return cRandomVariableDefinitionBlockRandomVariableDefinitionBlockParserRuleCall_2_0; }

		//inputVariablesBlock=InputVariablesBlock
		public Assignment getInputVariablesBlockAssignment_3() { return cInputVariablesBlockAssignment_3; }

		//InputVariablesBlock
		public RuleCall getInputVariablesBlockInputVariablesBlockParserRuleCall_3_0() { return cInputVariablesBlockInputVariablesBlockParserRuleCall_3_0; }

		//structuralParametersBlock=StructuralParametersBlock
		public Assignment getStructuralParametersBlockAssignment_4() { return cStructuralParametersBlockAssignment_4; }

		//StructuralParametersBlock
		public RuleCall getStructuralParametersBlockStructuralParametersBlockParserRuleCall_4_0() { return cStructuralParametersBlockStructuralParametersBlockParserRuleCall_4_0; }

		//variabilityParametersBlock=VariabilityParametersBlock
		public Assignment getVariabilityParametersBlockAssignment_5() { return cVariabilityParametersBlockAssignment_5; }

		//VariabilityParametersBlock
		public RuleCall getVariabilityParametersBlockVariabilityParametersBlockParserRuleCall_5_0() { return cVariabilityParametersBlockVariabilityParametersBlockParserRuleCall_5_0; }

		//outputVariablesBlock=OutputVariablesBlock
		public Assignment getOutputVariablesBlockAssignment_6() { return cOutputVariablesBlockAssignment_6; }

		//OutputVariablesBlock
		public RuleCall getOutputVariablesBlockOutputVariablesBlockParserRuleCall_6_0() { return cOutputVariablesBlockOutputVariablesBlockParserRuleCall_6_0; }

		//groupVariablesBlock=GroupVariablesBlock
		public Assignment getGroupVariablesBlockAssignment_7() { return cGroupVariablesBlockAssignment_7; }

		//GroupVariablesBlock
		public RuleCall getGroupVariablesBlockGroupVariablesBlockParserRuleCall_7_0() { return cGroupVariablesBlockGroupVariablesBlockParserRuleCall_7_0; }

		//observationBlock=ObservationBlock
		public Assignment getObservationBlockAssignment_8() { return cObservationBlockAssignment_8; }

		//ObservationBlock
		public RuleCall getObservationBlockObservationBlockParserRuleCall_8_0() { return cObservationBlockObservationBlockParserRuleCall_8_0; }

		//estimationBlock=EstimationBlock
		public Assignment getEstimationBlockAssignment_9() { return cEstimationBlockAssignment_9; }

		//EstimationBlock
		public RuleCall getEstimationBlockEstimationBlockParserRuleCall_9_0() { return cEstimationBlockEstimationBlockParserRuleCall_9_0; }

		//simulationBlock=SimulationBlock
		public Assignment getSimulationBlockAssignment_10() { return cSimulationBlockAssignment_10; }

		//SimulationBlock
		public RuleCall getSimulationBlockSimulationBlockParserRuleCall_10_0() { return cSimulationBlockSimulationBlockParserRuleCall_10_0; }

		//verbatimBlock=VerbatimBlock
		public Assignment getVerbatimBlockAssignment_11() { return cVerbatimBlockAssignment_11; }

		//VerbatimBlock
		public RuleCall getVerbatimBlockVerbatimBlockParserRuleCall_11_0() { return cVerbatimBlockVerbatimBlockParserRuleCall_11_0; }
	}

	public class IndividualVariablesBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IndividualVariablesBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierINDIVIDUAL_VARIABLESKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsBlockStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//IndividualVariablesBlock:
		//
		//	identifier="INDIVIDUAL_VARIABLES" BEGIN statements+=BlockStatement* //new Variable +
		//
		//	END;
		public ParserRule getRule() { return rule; }

		//identifier="INDIVIDUAL_VARIABLES" BEGIN statements+=BlockStatement* //new Variable +
		//
		//END
		public Group getGroup() { return cGroup; }

		//identifier="INDIVIDUAL_VARIABLES"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"INDIVIDUAL_VARIABLES"
		public Keyword getIdentifierINDIVIDUAL_VARIABLESKeyword_0_0() { return cIdentifierINDIVIDUAL_VARIABLESKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//statements+=BlockStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//BlockStatement
		public RuleCall getStatementsBlockStatementParserRuleCall_2_0() { return cStatementsBlockStatementParserRuleCall_2_0; }

		////new Variable +
		//
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class ModelPredictionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelPredictionBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierMODEL_PREDICTIONKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsModelPredictionBlockStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ModelPredictionBlock:
		//
		//	identifier="MODEL_PREDICTION" BEGIN statements+=ModelPredictionBlockStatement* END;
		public ParserRule getRule() { return rule; }

		//identifier="MODEL_PREDICTION" BEGIN statements+=ModelPredictionBlockStatement* END
		public Group getGroup() { return cGroup; }

		//identifier="MODEL_PREDICTION"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"MODEL_PREDICTION"
		public Keyword getIdentifierMODEL_PREDICTIONKeyword_0_0() { return cIdentifierMODEL_PREDICTIONKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//statements+=ModelPredictionBlockStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//ModelPredictionBlockStatement
		public RuleCall getStatementsModelPredictionBlockStatementParserRuleCall_2_0() { return cStatementsModelPredictionBlockStatementParserRuleCall_2_0; }

		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class RandomVariableDefinitionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RandomVariableDefinitionBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierRANDOM_VARIABLE_DEFINITIONKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablesSymbolDeclarationParserRuleCall_2_0 = (RuleCall)cVariablesAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//RandomVariableDefinitionBlock:
		//
		//	identifier="RANDOM_VARIABLE_DEFINITION" BEGIN variables+=SymbolDeclaration* //new Variable +
		//
		//	END;
		public ParserRule getRule() { return rule; }

		//identifier="RANDOM_VARIABLE_DEFINITION" BEGIN variables+=SymbolDeclaration* //new Variable +
		//
		//END
		public Group getGroup() { return cGroup; }

		//identifier="RANDOM_VARIABLE_DEFINITION"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"RANDOM_VARIABLE_DEFINITION"
		public Keyword getIdentifierRANDOM_VARIABLE_DEFINITIONKeyword_0_0() { return cIdentifierRANDOM_VARIABLE_DEFINITIONKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//variables+=SymbolDeclaration*
		public Assignment getVariablesAssignment_2() { return cVariablesAssignment_2; }

		//SymbolDeclaration
		public RuleCall getVariablesSymbolDeclarationParserRuleCall_2_0() { return cVariablesSymbolDeclarationParserRuleCall_2_0; }

		////new Variable +
		//
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class InputVariablesBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputVariablesBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIndentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIndentifierINPUT_VARIABLESKeyword_0_0 = (Keyword)cIndentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablesSymbolDeclarationParserRuleCall_2_0 = (RuleCall)cVariablesAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//InputVariablesBlock:
		//
		//	indentifier="INPUT_VARIABLES" BEGIN variables+=SymbolDeclaration* //new Variable +
		//
		//	END;
		public ParserRule getRule() { return rule; }

		//indentifier="INPUT_VARIABLES" BEGIN variables+=SymbolDeclaration* //new Variable +
		//
		//END
		public Group getGroup() { return cGroup; }

		//indentifier="INPUT_VARIABLES"
		public Assignment getIndentifierAssignment_0() { return cIndentifierAssignment_0; }

		//"INPUT_VARIABLES"
		public Keyword getIndentifierINPUT_VARIABLESKeyword_0_0() { return cIndentifierINPUT_VARIABLESKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//variables+=SymbolDeclaration*
		public Assignment getVariablesAssignment_2() { return cVariablesAssignment_2; }

		//SymbolDeclaration
		public RuleCall getVariablesSymbolDeclarationParserRuleCall_2_0() { return cVariablesSymbolDeclarationParserRuleCall_2_0; }

		////new Variable +
		//
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class StructuralParametersBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructuralParametersBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierSTRUCTURAL_PARAMETERSKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersFullyQualifiedSymbolNameParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//StructuralParametersBlock:
		//
		//	identifier="STRUCTURAL_PARAMETERS" BEGIN parameters+=FullyQualifiedSymbolName* //Ref to Parameter +
		//
		//	END;
		public ParserRule getRule() { return rule; }

		//identifier="STRUCTURAL_PARAMETERS" BEGIN parameters+=FullyQualifiedSymbolName* //Ref to Parameter +
		//
		//END
		public Group getGroup() { return cGroup; }

		//identifier="STRUCTURAL_PARAMETERS"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"STRUCTURAL_PARAMETERS"
		public Keyword getIdentifierSTRUCTURAL_PARAMETERSKeyword_0_0() { return cIdentifierSTRUCTURAL_PARAMETERSKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//parameters+=FullyQualifiedSymbolName*
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//FullyQualifiedSymbolName
		public RuleCall getParametersFullyQualifiedSymbolNameParserRuleCall_2_0() { return cParametersFullyQualifiedSymbolNameParserRuleCall_2_0; }

		////Ref to Parameter +
		//
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class VariabilityParametersBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariabilityParametersBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierVARIABILITY_PARAMETERSKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersFullyQualifiedSymbolNameParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//VariabilityParametersBlock:
		//
		//	identifier="VARIABILITY_PARAMETERS" BEGIN parameters+=FullyQualifiedSymbolName* //Ref to Parameter +
		//
		//	END;
		public ParserRule getRule() { return rule; }

		//identifier="VARIABILITY_PARAMETERS" BEGIN parameters+=FullyQualifiedSymbolName* //Ref to Parameter +
		//
		//END
		public Group getGroup() { return cGroup; }

		//identifier="VARIABILITY_PARAMETERS"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"VARIABILITY_PARAMETERS"
		public Keyword getIdentifierVARIABILITY_PARAMETERSKeyword_0_0() { return cIdentifierVARIABILITY_PARAMETERSKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//parameters+=FullyQualifiedSymbolName*
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//FullyQualifiedSymbolName
		public RuleCall getParametersFullyQualifiedSymbolNameParserRuleCall_2_0() { return cParametersFullyQualifiedSymbolNameParserRuleCall_2_0; }

		////Ref to Parameter +
		//
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class OutputVariablesBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputVariablesBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierOUTPUT_VARIABLESKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablesFullyQualifiedSymbolNameParserRuleCall_2_0 = (RuleCall)cVariablesAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//OutputVariablesBlock:
		//
		//	identifier="OUTPUT_VARIABLES" BEGIN variables+=FullyQualifiedSymbolName* //Ref to VariableName +
		//
		//	END;
		public ParserRule getRule() { return rule; }

		//identifier="OUTPUT_VARIABLES" BEGIN variables+=FullyQualifiedSymbolName* //Ref to VariableName +
		//
		//END
		public Group getGroup() { return cGroup; }

		//identifier="OUTPUT_VARIABLES"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"OUTPUT_VARIABLES"
		public Keyword getIdentifierOUTPUT_VARIABLESKeyword_0_0() { return cIdentifierOUTPUT_VARIABLESKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//variables+=FullyQualifiedSymbolName*
		public Assignment getVariablesAssignment_2() { return cVariablesAssignment_2; }

		//FullyQualifiedSymbolName
		public RuleCall getVariablesFullyQualifiedSymbolNameParserRuleCall_2_0() { return cVariablesFullyQualifiedSymbolNameParserRuleCall_2_0; }

		////Ref to VariableName +
		//
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class GroupVariablesBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupVariablesBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierGROUP_VARIABLESKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsGroupVariablesBlockStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//GroupVariablesBlock:
		//
		//	identifier="GROUP_VARIABLES" BEGIN statements+=GroupVariablesBlockStatement* END;
		public ParserRule getRule() { return rule; }

		//identifier="GROUP_VARIABLES" BEGIN statements+=GroupVariablesBlockStatement* END
		public Group getGroup() { return cGroup; }

		//identifier="GROUP_VARIABLES"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"GROUP_VARIABLES"
		public Keyword getIdentifierGROUP_VARIABLESKeyword_0_0() { return cIdentifierGROUP_VARIABLESKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//statements+=GroupVariablesBlockStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//GroupVariablesBlockStatement
		public RuleCall getStatementsGroupVariablesBlockStatementParserRuleCall_2_0() { return cStatementsGroupVariablesBlockStatementParserRuleCall_2_0; }

		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class ObservationBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObservationBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierOBSERVATIONKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsBlockStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ObservationBlock:
		//
		//	identifier="OBSERVATION" BEGIN statements+=BlockStatement* //new Variable +
		//
		//	END;
		public ParserRule getRule() { return rule; }

		//identifier="OBSERVATION" BEGIN statements+=BlockStatement* //new Variable +
		//
		//END
		public Group getGroup() { return cGroup; }

		//identifier="OBSERVATION"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"OBSERVATION"
		public Keyword getIdentifierOBSERVATIONKeyword_0_0() { return cIdentifierOBSERVATIONKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//statements+=BlockStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//BlockStatement
		public RuleCall getStatementsBlockStatementParserRuleCall_2_0() { return cStatementsBlockStatementParserRuleCall_2_0; }

		////new Variable +
		//
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class EstimationBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EstimationBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierESTIMATIONKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsBlockStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//EstimationBlock:
		//
		//	identifier="ESTIMATION" BEGIN statements+=BlockStatement* //new Variable +
		//
		//	END;
		public ParserRule getRule() { return rule; }

		//identifier="ESTIMATION" BEGIN statements+=BlockStatement* //new Variable +
		//
		//END
		public Group getGroup() { return cGroup; }

		//identifier="ESTIMATION"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"ESTIMATION"
		public Keyword getIdentifierESTIMATIONKeyword_0_0() { return cIdentifierESTIMATIONKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//statements+=BlockStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//BlockStatement
		public RuleCall getStatementsBlockStatementParserRuleCall_2_0() { return cStatementsBlockStatementParserRuleCall_2_0; }

		////new Variable +
		//
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class SimulationBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimulationBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierSIMULATIONKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsBlockStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//SimulationBlock:
		//
		//	identifier="SIMULATION" BEGIN statements+=BlockStatement* //new Variable +
		//
		//	END;
		public ParserRule getRule() { return rule; }

		//identifier="SIMULATION" BEGIN statements+=BlockStatement* //new Variable +
		//
		//END
		public Group getGroup() { return cGroup; }

		//identifier="SIMULATION"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"SIMULATION"
		public Keyword getIdentifierSIMULATIONKeyword_0_0() { return cIdentifierSIMULATIONKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//statements+=BlockStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//BlockStatement
		public RuleCall getStatementsBlockStatementParserRuleCall_2_0() { return cStatementsBlockStatementParserRuleCall_2_0; }

		////new Variable +
		//
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class ParameterObjectBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterObjectBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStructuralBlockAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStructuralBlockStructuralBlockParserRuleCall_0_0 = (RuleCall)cStructuralBlockAssignment_0.eContents().get(0);
		private final Assignment cVariabilityBlockAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cVariabilityBlockVariabilityBlockParserRuleCall_1_0 = (RuleCall)cVariabilityBlockAssignment_1.eContents().get(0);
		private final Assignment cPriorBlockAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cPriorBlockPriorParametersBlockParserRuleCall_2_0 = (RuleCall)cPriorBlockAssignment_2.eContents().get(0);
		private final Assignment cVerbatimBlockAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cVerbatimBlockVerbatimBlockParserRuleCall_3_0 = (RuleCall)cVerbatimBlockAssignment_3.eContents().get(0);
		
		////////////////////////////////////////////////////////////
		//
		////Parameter Object
		//
		////////////////////////////////////////////////////////////
		//
		//ParameterObjectBlock:
		//
		//	structuralBlock=StructuralBlock | variabilityBlock=VariabilityBlock | priorBlock=PriorParametersBlock |
		//
		//	verbatimBlock=VerbatimBlock;
		public ParserRule getRule() { return rule; }

		//structuralBlock=StructuralBlock | variabilityBlock=VariabilityBlock | priorBlock=PriorParametersBlock |
		//
		//verbatimBlock=VerbatimBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//structuralBlock=StructuralBlock
		public Assignment getStructuralBlockAssignment_0() { return cStructuralBlockAssignment_0; }

		//StructuralBlock
		public RuleCall getStructuralBlockStructuralBlockParserRuleCall_0_0() { return cStructuralBlockStructuralBlockParserRuleCall_0_0; }

		//variabilityBlock=VariabilityBlock
		public Assignment getVariabilityBlockAssignment_1() { return cVariabilityBlockAssignment_1; }

		//VariabilityBlock
		public RuleCall getVariabilityBlockVariabilityBlockParserRuleCall_1_0() { return cVariabilityBlockVariabilityBlockParserRuleCall_1_0; }

		//priorBlock=PriorParametersBlock
		public Assignment getPriorBlockAssignment_2() { return cPriorBlockAssignment_2; }

		//PriorParametersBlock
		public RuleCall getPriorBlockPriorParametersBlockParserRuleCall_2_0() { return cPriorBlockPriorParametersBlockParserRuleCall_2_0; }

		//verbatimBlock=VerbatimBlock
		public Assignment getVerbatimBlockAssignment_3() { return cVerbatimBlockAssignment_3; }

		//VerbatimBlock
		public RuleCall getVerbatimBlockVerbatimBlockParserRuleCall_3_0() { return cVerbatimBlockVerbatimBlockParserRuleCall_3_0; }
	}

	public class StructuralBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StructuralBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierSTRUCTURALKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersParameterDeclarationParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//StructuralBlock:
		//
		//	identifier="STRUCTURAL" BEGIN parameters+=ParameterDeclaration* //new Parameter +
		//
		//	END;
		public ParserRule getRule() { return rule; }

		//identifier="STRUCTURAL" BEGIN parameters+=ParameterDeclaration* //new Parameter +
		//
		//END
		public Group getGroup() { return cGroup; }

		//identifier="STRUCTURAL"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"STRUCTURAL"
		public Keyword getIdentifierSTRUCTURALKeyword_0_0() { return cIdentifierSTRUCTURALKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//parameters+=ParameterDeclaration*
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//ParameterDeclaration
		public RuleCall getParametersParameterDeclarationParserRuleCall_2_0() { return cParametersParameterDeclarationParserRuleCall_2_0; }

		////new Parameter +
		//
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class VariabilityBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariabilityBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierVARIABILITYKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsVariabilityBlockStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//VariabilityBlock:
		//
		//	identifier="VARIABILITY" BEGIN statements+=VariabilityBlockStatement* END;
		public ParserRule getRule() { return rule; }

		//identifier="VARIABILITY" BEGIN statements+=VariabilityBlockStatement* END
		public Group getGroup() { return cGroup; }

		//identifier="VARIABILITY"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"VARIABILITY"
		public Keyword getIdentifierVARIABILITYKeyword_0_0() { return cIdentifierVARIABILITYKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//statements+=VariabilityBlockStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//VariabilityBlockStatement
		public RuleCall getStatementsVariabilityBlockStatementParserRuleCall_2_0() { return cStatementsVariabilityBlockStatementParserRuleCall_2_0; }

		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class PriorParametersBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PriorParametersBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierPRIOR_PARAMETERSKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsBlockStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//PriorParametersBlock:
		//
		//	identifier="PRIOR_PARAMETERS" BEGIN statements+=BlockStatement* //new Parameter +
		//
		//	END;
		public ParserRule getRule() { return rule; }

		//identifier="PRIOR_PARAMETERS" BEGIN statements+=BlockStatement* //new Parameter +
		//
		//END
		public Group getGroup() { return cGroup; }

		//identifier="PRIOR_PARAMETERS"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"PRIOR_PARAMETERS"
		public Keyword getIdentifierPRIOR_PARAMETERSKeyword_0_0() { return cIdentifierPRIOR_PARAMETERSKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//statements+=BlockStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//BlockStatement
		public RuleCall getStatementsBlockStatementParserRuleCall_2_0() { return cStatementsBlockStatementParserRuleCall_2_0; }

		////new Parameter +
		//
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class DataObjectBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataObjectBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cHeaderBlockAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cHeaderBlockHeaderBlockParserRuleCall_0_0 = (RuleCall)cHeaderBlockAssignment_0.eContents().get(0);
		private final Assignment cFileBlockAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFileBlockFileBlockParserRuleCall_1_0 = (RuleCall)cFileBlockAssignment_1.eContents().get(0);
		private final Assignment cVerbatimBlockAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cVerbatimBlockVerbatimBlockParserRuleCall_2_0 = (RuleCall)cVerbatimBlockAssignment_2.eContents().get(0);
		
		//DataObjectBlock:
		//
		//	headerBlock=HeaderBlock | fileBlock=FileBlock | verbatimBlock=VerbatimBlock;
		public ParserRule getRule() { return rule; }

		//headerBlock=HeaderBlock | fileBlock=FileBlock | verbatimBlock=VerbatimBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//headerBlock=HeaderBlock
		public Assignment getHeaderBlockAssignment_0() { return cHeaderBlockAssignment_0; }

		//HeaderBlock
		public RuleCall getHeaderBlockHeaderBlockParserRuleCall_0_0() { return cHeaderBlockHeaderBlockParserRuleCall_0_0; }

		//fileBlock=FileBlock
		public Assignment getFileBlockAssignment_1() { return cFileBlockAssignment_1; }

		//FileBlock
		public RuleCall getFileBlockFileBlockParserRuleCall_1_0() { return cFileBlockFileBlockParserRuleCall_1_0; }

		//verbatimBlock=VerbatimBlock
		public Assignment getVerbatimBlockAssignment_2() { return cVerbatimBlockAssignment_2; }

		//VerbatimBlock
		public RuleCall getVerbatimBlockVerbatimBlockParserRuleCall_2_0() { return cVerbatimBlockVerbatimBlockParserRuleCall_2_0; }
	}

	public class HeaderBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "HeaderBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierHEADERKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablesSymbolModificationParserRuleCall_2_0 = (RuleCall)cVariablesAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//HeaderBlock:
		//
		//	identifier="HEADER" BEGIN variables+=SymbolModification* //ref to Variable
		//
		//	END;
		public ParserRule getRule() { return rule; }

		//identifier="HEADER" BEGIN variables+=SymbolModification* //ref to Variable
		//
		//END
		public Group getGroup() { return cGroup; }

		//identifier="HEADER"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"HEADER"
		public Keyword getIdentifierHEADERKeyword_0_0() { return cIdentifierHEADERKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//variables+=SymbolModification*
		public Assignment getVariablesAssignment_2() { return cVariablesAssignment_2; }

		//SymbolModification
		public RuleCall getVariablesSymbolModificationParserRuleCall_2_0() { return cVariablesSymbolModificationParserRuleCall_2_0; }

		////ref to Variable
		//
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class FileBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FileBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierFILEKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsFileBlockStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//FileBlock:
		//
		//	identifier="FILE" BEGIN statements+=FileBlockStatement* END;
		public ParserRule getRule() { return rule; }

		//identifier="FILE" BEGIN statements+=FileBlockStatement* END
		public Group getGroup() { return cGroup; }

		//identifier="FILE"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"FILE"
		public Keyword getIdentifierFILEKeyword_0_0() { return cIdentifierFILEKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//statements+=FileBlockStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//FileBlockStatement
		public RuleCall getStatementsFileBlockStatementParserRuleCall_2_0() { return cStatementsFileBlockStatementParserRuleCall_2_0; }

		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class TaskObjectBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TaskObjectBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFunctionDeclarationAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionDeclarationTaskFunctionDeclarationParserRuleCall_0_0 = (RuleCall)cFunctionDeclarationAssignment_0.eContents().get(0);
		private final Assignment cParameterBlockAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cParameterBlockParameterBlockParserRuleCall_1_0 = (RuleCall)cParameterBlockAssignment_1.eContents().get(0);
		private final Assignment cDataBlockAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDataBlockDataBlockParserRuleCall_2_0 = (RuleCall)cDataBlockAssignment_2.eContents().get(0);
		private final Assignment cModelBlockAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cModelBlockModelBlockParserRuleCall_3_0 = (RuleCall)cModelBlockAssignment_3.eContents().get(0);
		private final Assignment cVerbatimBlockAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cVerbatimBlockVerbatimBlockParserRuleCall_4_0 = (RuleCall)cVerbatimBlockAssignment_4.eContents().get(0);
		
		//TaskObjectBlock:
		//
		//	functionDeclaration=TaskFunctionDeclaration | parameterBlock=ParameterBlock | dataBlock=DataBlock |
		//
		//	modelBlock=ModelBlock | verbatimBlock=VerbatimBlock;
		public ParserRule getRule() { return rule; }

		//functionDeclaration=TaskFunctionDeclaration | parameterBlock=ParameterBlock | dataBlock=DataBlock |
		//
		//modelBlock=ModelBlock | verbatimBlock=VerbatimBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//functionDeclaration=TaskFunctionDeclaration
		public Assignment getFunctionDeclarationAssignment_0() { return cFunctionDeclarationAssignment_0; }

		//TaskFunctionDeclaration
		public RuleCall getFunctionDeclarationTaskFunctionDeclarationParserRuleCall_0_0() { return cFunctionDeclarationTaskFunctionDeclarationParserRuleCall_0_0; }

		//parameterBlock=ParameterBlock
		public Assignment getParameterBlockAssignment_1() { return cParameterBlockAssignment_1; }

		//ParameterBlock
		public RuleCall getParameterBlockParameterBlockParserRuleCall_1_0() { return cParameterBlockParameterBlockParserRuleCall_1_0; }

		//dataBlock=DataBlock
		public Assignment getDataBlockAssignment_2() { return cDataBlockAssignment_2; }

		//DataBlock
		public RuleCall getDataBlockDataBlockParserRuleCall_2_0() { return cDataBlockDataBlockParserRuleCall_2_0; }

		//modelBlock=ModelBlock
		public Assignment getModelBlockAssignment_3() { return cModelBlockAssignment_3; }

		//ModelBlock
		public RuleCall getModelBlockModelBlockParserRuleCall_3_0() { return cModelBlockModelBlockParserRuleCall_3_0; }

		//verbatimBlock=VerbatimBlock
		public Assignment getVerbatimBlockAssignment_4() { return cVerbatimBlockAssignment_4; }

		//VerbatimBlock
		public RuleCall getVerbatimBlockVerbatimBlockParserRuleCall_4_0() { return cVerbatimBlockVerbatimBlockParserRuleCall_4_0; }
	}

	public class ParameterBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierPARAMETERKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersSymbolModificationParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ParameterBlock:
		//
		//	identifier="PARAMETER" BEGIN parameters+=SymbolModification* //Ref to parameter
		//
		//	END;
		public ParserRule getRule() { return rule; }

		//identifier="PARAMETER" BEGIN parameters+=SymbolModification* //Ref to parameter
		//
		//END
		public Group getGroup() { return cGroup; }

		//identifier="PARAMETER"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"PARAMETER"
		public Keyword getIdentifierPARAMETERKeyword_0_0() { return cIdentifierPARAMETERKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//parameters+=SymbolModification*
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//SymbolModification
		public RuleCall getParametersSymbolModificationParserRuleCall_2_0() { return cParametersSymbolModificationParserRuleCall_2_0; }

		////Ref to parameter
		//
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class DataBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierDATAKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsDataBlockStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//DataBlock:
		//
		//	identifier="DATA" BEGIN statements+=DataBlockStatement* END;
		public ParserRule getRule() { return rule; }

		//identifier="DATA" BEGIN statements+=DataBlockStatement* END
		public Group getGroup() { return cGroup; }

		//identifier="DATA"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"DATA"
		public Keyword getIdentifierDATAKeyword_0_0() { return cIdentifierDATAKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//statements+=DataBlockStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//DataBlockStatement
		public RuleCall getStatementsDataBlockStatementParserRuleCall_2_0() { return cStatementsDataBlockStatementParserRuleCall_2_0; }

		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class DataBlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataBlockStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cIgnoreListAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cIgnoreListIgnoreListParserRuleCall_0_0 = (RuleCall)cIgnoreListAssignment_0.eContents().get(0);
		private final Assignment cAcceptListAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAcceptListAcceptListParserRuleCall_1_0 = (RuleCall)cAcceptListAssignment_1.eContents().get(0);
		private final Assignment cDropListAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDropListDropListParserRuleCall_2_0 = (RuleCall)cDropListAssignment_2.eContents().get(0);
		
		//DataBlockStatement:
		//
		//	ignoreList=IgnoreList | acceptList=AcceptList | dropList=DropList;
		public ParserRule getRule() { return rule; }

		//ignoreList=IgnoreList | acceptList=AcceptList | dropList=DropList
		public Alternatives getAlternatives() { return cAlternatives; }

		//ignoreList=IgnoreList
		public Assignment getIgnoreListAssignment_0() { return cIgnoreListAssignment_0; }

		//IgnoreList
		public RuleCall getIgnoreListIgnoreListParserRuleCall_0_0() { return cIgnoreListIgnoreListParserRuleCall_0_0; }

		//acceptList=AcceptList
		public Assignment getAcceptListAssignment_1() { return cAcceptListAssignment_1; }

		//AcceptList
		public RuleCall getAcceptListAcceptListParserRuleCall_1_0() { return cAcceptListAcceptListParserRuleCall_1_0; }

		//dropList=DropList
		public Assignment getDropListAssignment_2() { return cDropListAssignment_2; }

		//DropList
		public RuleCall getDropListDropListParserRuleCall_2_0() { return cDropListDropListParserRuleCall_2_0; }
	}

	public class IgnoreListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IgnoreList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierIGNOREKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionOrExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//IgnoreList:
		//
		//	identifier="IGNORE" "=" "if" "(" expression=OrExpression ")";
		public ParserRule getRule() { return rule; }

		//identifier="IGNORE" "=" "if" "(" expression=OrExpression ")"
		public Group getGroup() { return cGroup; }

		//identifier="IGNORE"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"IGNORE"
		public Keyword getIdentifierIGNOREKeyword_0_0() { return cIdentifierIGNOREKeyword_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"if"
		public Keyword getIfKeyword_2() { return cIfKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//expression=OrExpression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//OrExpression
		public RuleCall getExpressionOrExpressionParserRuleCall_4_0() { return cExpressionOrExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class AcceptListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AcceptList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierACCEPTKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cIfKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cExpressionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cExpressionAndExpressionParserRuleCall_4_0 = (RuleCall)cExpressionAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//AcceptList:
		//
		//	identifier="ACCEPT" "=" "if" "(" expression=AndExpression ")";
		public ParserRule getRule() { return rule; }

		//identifier="ACCEPT" "=" "if" "(" expression=AndExpression ")"
		public Group getGroup() { return cGroup; }

		//identifier="ACCEPT"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"ACCEPT"
		public Keyword getIdentifierACCEPTKeyword_0_0() { return cIdentifierACCEPTKeyword_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//"if"
		public Keyword getIfKeyword_2() { return cIfKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//expression=AndExpression
		public Assignment getExpressionAssignment_4() { return cExpressionAssignment_4; }

		//AndExpression
		public RuleCall getExpressionAndExpressionParserRuleCall_4_0() { return cExpressionAndExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class DropListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DropList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierDROPKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListSymbolListParserRuleCall_2_0 = (RuleCall)cListAssignment_2.eContents().get(0);
		
		//DropList:
		//
		//	identifier="DROP" "=" list=SymbolList;
		public ParserRule getRule() { return rule; }

		//identifier="DROP" "=" list=SymbolList
		public Group getGroup() { return cGroup; }

		//identifier="DROP"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"DROP"
		public Keyword getIdentifierDROPKeyword_0_0() { return cIdentifierDROPKeyword_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//list=SymbolList
		public Assignment getListAssignment_2() { return cListAssignment_2; }

		//SymbolList
		public RuleCall getListSymbolListParserRuleCall_2_0() { return cListSymbolListParserRuleCall_2_0; }
	}

	public class ModelBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierMODELKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsModelBlockStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ModelBlock:
		//
		//	identifier="MODEL" BEGIN statements+=ModelBlockStatement* END;
		public ParserRule getRule() { return rule; }

		//identifier="MODEL" BEGIN statements+=ModelBlockStatement* END
		public Group getGroup() { return cGroup; }

		//identifier="MODEL"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"MODEL"
		public Keyword getIdentifierMODELKeyword_0_0() { return cIdentifierMODELKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//statements+=ModelBlockStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//ModelBlockStatement
		public RuleCall getStatementsModelBlockStatementParserRuleCall_2_0() { return cStatementsModelBlockStatementParserRuleCall_2_0; }

		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class ModelBlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelBlockStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStatementAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStatementBlockStatementParserRuleCall_0_0 = (RuleCall)cStatementAssignment_0.eContents().get(0);
		private final Assignment cAddListAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cAddListAddListParserRuleCall_1_0 = (RuleCall)cAddListAssignment_1.eContents().get(0);
		private final Assignment cRemoveListAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cRemoveListRemoveListParserRuleCall_2_0 = (RuleCall)cRemoveListAssignment_2.eContents().get(0);
		
		//ModelBlockStatement:
		//
		//	statement=BlockStatement | addList=AddList | removeList=RemoveList;
		public ParserRule getRule() { return rule; }

		//statement=BlockStatement | addList=AddList | removeList=RemoveList
		public Alternatives getAlternatives() { return cAlternatives; }

		//statement=BlockStatement
		public Assignment getStatementAssignment_0() { return cStatementAssignment_0; }

		//BlockStatement
		public RuleCall getStatementBlockStatementParserRuleCall_0_0() { return cStatementBlockStatementParserRuleCall_0_0; }

		//addList=AddList
		public Assignment getAddListAssignment_1() { return cAddListAssignment_1; }

		//AddList
		public RuleCall getAddListAddListParserRuleCall_1_0() { return cAddListAddListParserRuleCall_1_0; }

		//removeList=RemoveList
		public Assignment getRemoveListAssignment_2() { return cRemoveListAssignment_2; }

		//RemoveList
		public RuleCall getRemoveListRemoveListParserRuleCall_2_0() { return cRemoveListRemoveListParserRuleCall_2_0; }
	}

	public class AddListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AddList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cADDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListSymbolListParserRuleCall_2_0 = (RuleCall)cListAssignment_2.eContents().get(0);
		
		//AddList:
		//
		//	"ADD" "=" list=SymbolList;
		public ParserRule getRule() { return rule; }

		//"ADD" "=" list=SymbolList
		public Group getGroup() { return cGroup; }

		//"ADD"
		public Keyword getADDKeyword_0() { return cADDKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//list=SymbolList
		public Assignment getListAssignment_2() { return cListAssignment_2; }

		//SymbolList
		public RuleCall getListSymbolListParserRuleCall_2_0() { return cListSymbolListParserRuleCall_2_0; }
	}

	public class RemoveListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RemoveList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cREMOVEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cListAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cListSymbolListParserRuleCall_2_0 = (RuleCall)cListAssignment_2.eContents().get(0);
		
		//RemoveList:
		//
		//	"REMOVE" "=" list=SymbolList;
		public ParserRule getRule() { return rule; }

		//"REMOVE" "=" list=SymbolList
		public Group getGroup() { return cGroup; }

		//"REMOVE"
		public Keyword getREMOVEKeyword_0() { return cREMOVEKeyword_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//list=SymbolList
		public Assignment getListAssignment_2() { return cListAssignment_2; }

		//SymbolList
		public RuleCall getListSymbolListParserRuleCall_2_0() { return cListSymbolListParserRuleCall_2_0; }
	}

	public class SymbolListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SymbolList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSymbolsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSymbolsFullyQualifiedSymbolNameParserRuleCall_2_0 = (RuleCall)cSymbolsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//SymbolList:
		//
		//	"list" "(" symbols+=FullyQualifiedSymbolName+ ")";
		public ParserRule getRule() { return rule; }

		//"list" "(" symbols+=FullyQualifiedSymbolName+ ")"
		public Group getGroup() { return cGroup; }

		//"list"
		public Keyword getListKeyword_0() { return cListKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//symbols+=FullyQualifiedSymbolName+
		public Assignment getSymbolsAssignment_2() { return cSymbolsAssignment_2; }

		//FullyQualifiedSymbolName
		public RuleCall getSymbolsFullyQualifiedSymbolNameParserRuleCall_2_0() { return cSymbolsFullyQualifiedSymbolNameParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ModelPredictionBlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ModelPredictionBlockStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStatementAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStatementBlockStatementParserRuleCall_0_0 = (RuleCall)cStatementAssignment_0.eContents().get(0);
		private final Assignment cOdeBlockAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cOdeBlockOdeBlockParserRuleCall_1_0 = (RuleCall)cOdeBlockAssignment_1.eContents().get(0);
		private final Assignment cLibraryBlockAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cLibraryBlockLibraryBlockParserRuleCall_2_0 = (RuleCall)cLibraryBlockAssignment_2.eContents().get(0);
		
		//ModelPredictionBlockStatement:
		//
		//	statement=BlockStatement //new Variable
		//
		//	| odeBlock=OdeBlock | libraryBlock=LibraryBlock;
		public ParserRule getRule() { return rule; }

		//statement=BlockStatement //new Variable
		//
		//| odeBlock=OdeBlock | libraryBlock=LibraryBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//statement=BlockStatement
		public Assignment getStatementAssignment_0() { return cStatementAssignment_0; }

		//BlockStatement
		public RuleCall getStatementBlockStatementParserRuleCall_0_0() { return cStatementBlockStatementParserRuleCall_0_0; }

		//odeBlock=OdeBlock
		public Assignment getOdeBlockAssignment_1() { return cOdeBlockAssignment_1; }

		//OdeBlock
		public RuleCall getOdeBlockOdeBlockParserRuleCall_1_0() { return cOdeBlockOdeBlockParserRuleCall_1_0; }

		//libraryBlock=LibraryBlock
		public Assignment getLibraryBlockAssignment_2() { return cLibraryBlockAssignment_2; }

		//LibraryBlock
		public RuleCall getLibraryBlockLibraryBlockParserRuleCall_2_0() { return cLibraryBlockLibraryBlockParserRuleCall_2_0; }
	}

	public class LibraryBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LibraryBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierLIBRARYKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsBlockStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//LibraryBlock:
		//
		//	identifier="LIBRARY" BEGIN statements+=BlockStatement* //Properties
		//
		//	END;
		public ParserRule getRule() { return rule; }

		//identifier="LIBRARY" BEGIN statements+=BlockStatement* //Properties
		//
		//END
		public Group getGroup() { return cGroup; }

		//identifier="LIBRARY"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"LIBRARY"
		public Keyword getIdentifierLIBRARYKeyword_0_0() { return cIdentifierLIBRARYKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//statements+=BlockStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//BlockStatement
		public RuleCall getStatementsBlockStatementParserRuleCall_2_0() { return cStatementsBlockStatementParserRuleCall_2_0; }

		////Properties
		//
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class OdeBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OdeBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierODEKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsBlockStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//OdeBlock:
		//
		//	identifier="ODE" BEGIN statements+=BlockStatement* //new Variable
		//
		//	END;
		public ParserRule getRule() { return rule; }

		//identifier="ODE" BEGIN statements+=BlockStatement* //new Variable
		//
		//END
		public Group getGroup() { return cGroup; }

		//identifier="ODE"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"ODE"
		public Keyword getIdentifierODEKeyword_0_0() { return cIdentifierODEKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//statements+=BlockStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//BlockStatement
		public RuleCall getStatementsBlockStatementParserRuleCall_2_0() { return cStatementsBlockStatementParserRuleCall_2_0; }

		////new Variable
		//
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class GroupVariablesBlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GroupVariablesBlockStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cStatementAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cStatementBlockStatementParserRuleCall_0_0 = (RuleCall)cStatementAssignment_0.eContents().get(0);
		private final Assignment cMixtureBlockAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cMixtureBlockMixtureBlockParserRuleCall_1_0 = (RuleCall)cMixtureBlockAssignment_1.eContents().get(0);
		
		//GroupVariablesBlockStatement:
		//
		//	statement=BlockStatement //new Variable
		//
		//	| mixtureBlock=MixtureBlock;
		public ParserRule getRule() { return rule; }

		//statement=BlockStatement //new Variable
		//
		//| mixtureBlock=MixtureBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//statement=BlockStatement
		public Assignment getStatementAssignment_0() { return cStatementAssignment_0; }

		//BlockStatement
		public RuleCall getStatementBlockStatementParserRuleCall_0_0() { return cStatementBlockStatementParserRuleCall_0_0; }

		//mixtureBlock=MixtureBlock
		public Assignment getMixtureBlockAssignment_1() { return cMixtureBlockAssignment_1; }

		//MixtureBlock
		public RuleCall getMixtureBlockMixtureBlockParserRuleCall_1_0() { return cMixtureBlockMixtureBlockParserRuleCall_1_0; }
	}

	public class MixtureBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MixtureBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierMIXTUREKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsBlockStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//MixtureBlock:
		//
		//	identifier="MIXTURE" BEGIN statements+=BlockStatement* //new Variable
		//
		//	END;
		public ParserRule getRule() { return rule; }

		//identifier="MIXTURE" BEGIN statements+=BlockStatement* //new Variable
		//
		//END
		public Group getGroup() { return cGroup; }

		//identifier="MIXTURE"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"MIXTURE"
		public Keyword getIdentifierMIXTUREKeyword_0_0() { return cIdentifierMIXTUREKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//statements+=BlockStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//BlockStatement
		public RuleCall getStatementsBlockStatementParserRuleCall_2_0() { return cStatementsBlockStatementParserRuleCall_2_0; }

		////new Variable
		//
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class VariabilityBlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariabilityBlockStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cParameterParameterDeclarationParserRuleCall_0_0 = (RuleCall)cParameterAssignment_0.eContents().get(0);
		private final Assignment cBlockBlockAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cBlockBlockBlockBlockParserRuleCall_1_0 = (RuleCall)cBlockBlockAssignment_1.eContents().get(0);
		private final Assignment cDiagBlockAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDiagBlockDiagBlockParserRuleCall_2_0 = (RuleCall)cDiagBlockAssignment_2.eContents().get(0);
		private final Assignment cSameBlockAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cSameBlockSameBlockParserRuleCall_3_0 = (RuleCall)cSameBlockAssignment_3.eContents().get(0);
		
		//VariabilityBlockStatement:
		//
		//	parameter=ParameterDeclaration | blockBlock=BlockBlock | diagBlock=DiagBlock | sameBlock=SameBlock;
		public ParserRule getRule() { return rule; }

		//parameter=ParameterDeclaration | blockBlock=BlockBlock | diagBlock=DiagBlock | sameBlock=SameBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//parameter=ParameterDeclaration
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }

		//ParameterDeclaration
		public RuleCall getParameterParameterDeclarationParserRuleCall_0_0() { return cParameterParameterDeclarationParserRuleCall_0_0; }

		//blockBlock=BlockBlock
		public Assignment getBlockBlockAssignment_1() { return cBlockBlockAssignment_1; }

		//BlockBlock
		public RuleCall getBlockBlockBlockBlockParserRuleCall_1_0() { return cBlockBlockBlockBlockParserRuleCall_1_0; }

		//diagBlock=DiagBlock
		public Assignment getDiagBlockAssignment_2() { return cDiagBlockAssignment_2; }

		//DiagBlock
		public RuleCall getDiagBlockDiagBlockParserRuleCall_2_0() { return cDiagBlockDiagBlockParserRuleCall_2_0; }

		//sameBlock=SameBlock
		public Assignment getSameBlockAssignment_3() { return cSameBlockAssignment_3; }

		//SameBlock
		public RuleCall getSameBlockSameBlockParserRuleCall_3_0() { return cSameBlockSameBlockParserRuleCall_3_0; }
	}

	public class BlockBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierBlockKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsArgumentsParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cBEGINTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParametersArgumentsParserRuleCall_4_1_0 = (RuleCall)cParametersAssignment_4_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		////Rename to Matrix!
		//
		//BlockBlock:
		//
		//	identifier="block" "(" arguments=Arguments ")" (BEGIN parameters=Arguments END)? //new Parameter
		//
		//;
		public ParserRule getRule() { return rule; }

		//identifier="block" "(" arguments=Arguments ")" (BEGIN parameters=Arguments END)? //new Parameter
		public Group getGroup() { return cGroup; }

		//identifier="block"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"block"
		public Keyword getIdentifierBlockKeyword_0_0() { return cIdentifierBlockKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arguments=Arguments
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }

		//Arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_2_0() { return cArgumentsArgumentsParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//(BEGIN parameters=Arguments END)?
		public Group getGroup_4() { return cGroup_4; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_4_0() { return cBEGINTerminalRuleCall_4_0; }

		//parameters=Arguments
		public Assignment getParametersAssignment_4_1() { return cParametersAssignment_4_1; }

		//Arguments
		public RuleCall getParametersArgumentsParserRuleCall_4_1_0() { return cParametersArgumentsParserRuleCall_4_1_0; }

		//END
		public RuleCall getENDTerminalRuleCall_4_2() { return cENDTerminalRuleCall_4_2; }
	}

	public class DiagBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DiagBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierDiagKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsArgumentsParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cBEGINTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParametersArgumentsParserRuleCall_4_1_0 = (RuleCall)cParametersAssignment_4_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//DiagBlock:
		//
		//	identifier="diag" "(" arguments=Arguments ")" (BEGIN parameters=Arguments END)? //new Parameter
		//
		//;
		public ParserRule getRule() { return rule; }

		//identifier="diag" "(" arguments=Arguments ")" (BEGIN parameters=Arguments END)? //new Parameter
		public Group getGroup() { return cGroup; }

		//identifier="diag"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"diag"
		public Keyword getIdentifierDiagKeyword_0_0() { return cIdentifierDiagKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arguments=Arguments
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }

		//Arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_2_0() { return cArgumentsArgumentsParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//(BEGIN parameters=Arguments END)?
		public Group getGroup_4() { return cGroup_4; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_4_0() { return cBEGINTerminalRuleCall_4_0; }

		//parameters=Arguments
		public Assignment getParametersAssignment_4_1() { return cParametersAssignment_4_1; }

		//Arguments
		public RuleCall getParametersArgumentsParserRuleCall_4_1_0() { return cParametersArgumentsParserRuleCall_4_1_0; }

		//END
		public RuleCall getENDTerminalRuleCall_4_2() { return cENDTerminalRuleCall_4_2; }
	}

	public class SameBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SameBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierSameKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsArgumentsParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final RuleCall cBEGINTerminalRuleCall_4_0 = (RuleCall)cGroup_4.eContents().get(0);
		private final Assignment cParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParametersArgumentsParserRuleCall_4_1_0 = (RuleCall)cParametersAssignment_4_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		
		//SameBlock:
		//
		//	identifier="same" "(" arguments=Arguments ")" (BEGIN parameters=Arguments END)? //new Parameter
		//
		//;
		public ParserRule getRule() { return rule; }

		//identifier="same" "(" arguments=Arguments ")" (BEGIN parameters=Arguments END)? //new Parameter
		public Group getGroup() { return cGroup; }

		//identifier="same"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"same"
		public Keyword getIdentifierSameKeyword_0_0() { return cIdentifierSameKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arguments=Arguments
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }

		//Arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_2_0() { return cArgumentsArgumentsParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//(BEGIN parameters=Arguments END)?
		public Group getGroup_4() { return cGroup_4; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_4_0() { return cBEGINTerminalRuleCall_4_0; }

		//parameters=Arguments
		public Assignment getParametersAssignment_4_1() { return cParametersAssignment_4_1; }

		//Arguments
		public RuleCall getParametersArgumentsParserRuleCall_4_1_0() { return cParametersArgumentsParserRuleCall_4_1_0; }

		//END
		public RuleCall getENDTerminalRuleCall_4_2() { return cENDTerminalRuleCall_4_2; }
	}

	public class FileBlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FileBlockStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cVariableAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cVariableSymbolDeclarationParserRuleCall_0_0 = (RuleCall)cVariableAssignment_0.eContents().get(0);
		private final Assignment cInlineBlockAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cInlineBlockInlineBlockParserRuleCall_1_0 = (RuleCall)cInlineBlockAssignment_1.eContents().get(0);
		private final Assignment cDesignBlockAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cDesignBlockDesignBlockParserRuleCall_2_0 = (RuleCall)cDesignBlockAssignment_2.eContents().get(0);
		private final Assignment cRscriptBlockAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cRscriptBlockRScriptBlockParserRuleCall_3_0 = (RuleCall)cRscriptBlockAssignment_3.eContents().get(0);
		
		////////////////////////////////////////////////////////////
		//
		////Data Object
		//
		////////////////////////////////////////////////////////////
		//
		//FileBlockStatement:
		//
		//	variable=SymbolDeclaration //new VariableName which can be only list
		//
		//	| inlineBlock=InlineBlock | designBlock=DesignBlock | rscriptBlock=RScriptBlock;
		public ParserRule getRule() { return rule; }

		//variable=SymbolDeclaration //new VariableName which can be only list
		//
		//| inlineBlock=InlineBlock | designBlock=DesignBlock | rscriptBlock=RScriptBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//variable=SymbolDeclaration
		public Assignment getVariableAssignment_0() { return cVariableAssignment_0; }

		//SymbolDeclaration
		public RuleCall getVariableSymbolDeclarationParserRuleCall_0_0() { return cVariableSymbolDeclarationParserRuleCall_0_0; }

		//inlineBlock=InlineBlock
		public Assignment getInlineBlockAssignment_1() { return cInlineBlockAssignment_1; }

		//InlineBlock
		public RuleCall getInlineBlockInlineBlockParserRuleCall_1_0() { return cInlineBlockInlineBlockParserRuleCall_1_0; }

		//designBlock=DesignBlock
		public Assignment getDesignBlockAssignment_2() { return cDesignBlockAssignment_2; }

		//DesignBlock
		public RuleCall getDesignBlockDesignBlockParserRuleCall_2_0() { return cDesignBlockDesignBlockParserRuleCall_2_0; }

		//rscriptBlock=RScriptBlock
		public Assignment getRscriptBlockAssignment_3() { return cRscriptBlockAssignment_3; }

		//RScriptBlock
		public RuleCall getRscriptBlockRScriptBlockParserRuleCall_3_0() { return cRscriptBlockRScriptBlockParserRuleCall_3_0; }
	}

	public class InlineBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InlineBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierINLINEKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablesFullyQualifiedSymbolNameParserRuleCall_2_0 = (RuleCall)cVariablesAssignment_2.eContents().get(0);
		private final Assignment cValuesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cValuesAlternatives_3_0 = (Alternatives)cValuesAssignment_3.eContents().get(0);
		private final RuleCall cValuesNUMBERParserRuleCall_3_0_0 = (RuleCall)cValuesAlternatives_3_0.eContents().get(0);
		private final Keyword cValuesFullStopKeyword_3_0_1 = (Keyword)cValuesAlternatives_3_0.eContents().get(1);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//InlineBlock:
		//
		//	identifier="INLINE" BEGIN variables+=FullyQualifiedSymbolName* values+=(NUMBER | ".")* //Ref to VaraibleName
		//
		//	END;
		public ParserRule getRule() { return rule; }

		//identifier="INLINE" BEGIN variables+=FullyQualifiedSymbolName* values+=(NUMBER | ".")* //Ref to VaraibleName
		//
		//END
		public Group getGroup() { return cGroup; }

		//identifier="INLINE"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"INLINE"
		public Keyword getIdentifierINLINEKeyword_0_0() { return cIdentifierINLINEKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//variables+=FullyQualifiedSymbolName*
		public Assignment getVariablesAssignment_2() { return cVariablesAssignment_2; }

		//FullyQualifiedSymbolName
		public RuleCall getVariablesFullyQualifiedSymbolNameParserRuleCall_2_0() { return cVariablesFullyQualifiedSymbolNameParserRuleCall_2_0; }

		//values+=(NUMBER | ".")*
		public Assignment getValuesAssignment_3() { return cValuesAssignment_3; }

		//NUMBER | "."
		public Alternatives getValuesAlternatives_3_0() { return cValuesAlternatives_3_0; }

		//NUMBER
		public RuleCall getValuesNUMBERParserRuleCall_3_0_0() { return cValuesNUMBERParserRuleCall_3_0_0; }

		//"."
		public Keyword getValuesFullStopKeyword_3_0_1() { return cValuesFullStopKeyword_3_0_1; }

		////Ref to VaraibleName
		//
		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
	}

	public class DesignBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DesignBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierDESIGNKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsDesignBlockStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//DesignBlock:
		//
		//	identifier="DESIGN" BEGIN statements+=DesignBlockStatement* END;
		public ParserRule getRule() { return rule; }

		//identifier="DESIGN" BEGIN statements+=DesignBlockStatement* END
		public Group getGroup() { return cGroup; }

		//identifier="DESIGN"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"DESIGN"
		public Keyword getIdentifierDESIGNKeyword_0_0() { return cIdentifierDESIGNKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//statements+=DesignBlockStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//DesignBlockStatement
		public RuleCall getStatementsDesignBlockStatementParserRuleCall_2_0() { return cStatementsDesignBlockStatementParserRuleCall_2_0; }

		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class DesignBlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DesignBlockStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierFullyQualifiedSymbolNameParserRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Assignment cArgumentsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgumentsVariableListParserRuleCall_1_0 = (RuleCall)cArgumentsAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionAnyExpressionParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		
		//DesignBlockStatement:
		//
		//	identifier=FullyQualifiedSymbolName arguments=VariableList? "=" expression= //Ref to VaraibleName
		//
		//	AnyExpression;
		public ParserRule getRule() { return rule; }

		//identifier=FullyQualifiedSymbolName arguments=VariableList? "=" expression= //Ref to VaraibleName
		//
		//AnyExpression
		public Group getGroup() { return cGroup; }

		//identifier=FullyQualifiedSymbolName
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//FullyQualifiedSymbolName
		public RuleCall getIdentifierFullyQualifiedSymbolNameParserRuleCall_0_0() { return cIdentifierFullyQualifiedSymbolNameParserRuleCall_0_0; }

		//arguments=VariableList?
		public Assignment getArgumentsAssignment_1() { return cArgumentsAssignment_1; }

		//VariableList
		public RuleCall getArgumentsVariableListParserRuleCall_1_0() { return cArgumentsVariableListParserRuleCall_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }

		//expression= //Ref to VaraibleName
		//
		//AnyExpression
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		////Ref to VaraibleName
		//
		//AnyExpression
		public RuleCall getExpressionAnyExpressionParserRuleCall_3_0() { return cExpressionAnyExpressionParserRuleCall_3_0; }
	}

	public class VariableListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VariableList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdentifiersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifiersFullyQualifiedSymbolNameParserRuleCall_1_0 = (RuleCall)cIdentifiersAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIdentifiersAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIdentifiersFullyQualifiedSymbolNameParserRuleCall_2_1_0 = (RuleCall)cIdentifiersAssignment_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//VariableList:
		//
		//	"[" identifiers+=FullyQualifiedSymbolName ("," identifiers+=FullyQualifiedSymbolName)* //Ref to VaraibleName
		//
		//	"]";
		public ParserRule getRule() { return rule; }

		//"[" identifiers+=FullyQualifiedSymbolName ("," identifiers+=FullyQualifiedSymbolName)* //Ref to VaraibleName
		//
		//"]"
		public Group getGroup() { return cGroup; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }

		//identifiers+=FullyQualifiedSymbolName
		public Assignment getIdentifiersAssignment_1() { return cIdentifiersAssignment_1; }

		//FullyQualifiedSymbolName
		public RuleCall getIdentifiersFullyQualifiedSymbolNameParserRuleCall_1_0() { return cIdentifiersFullyQualifiedSymbolNameParserRuleCall_1_0; }

		//(=> "," identifiers+=FullyQualifiedSymbolName)*
		public Group getGroup_2() { return cGroup_2; }

		//=> ","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//identifiers+=FullyQualifiedSymbolName
		public Assignment getIdentifiersAssignment_2_1() { return cIdentifiersAssignment_2_1; }

		//FullyQualifiedSymbolName
		public RuleCall getIdentifiersFullyQualifiedSymbolNameParserRuleCall_2_1_0() { return cIdentifiersFullyQualifiedSymbolNameParserRuleCall_2_1_0; }

		////Ref to VaraibleName
		//
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}

	public class RScriptBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RScriptBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierRSCRIPTKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cVariablesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVariablesRScriptBlockStatementParserRuleCall_2_0 = (RuleCall)cVariablesAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//RScriptBlock:
		//
		//	identifier="RSCRIPT" BEGIN variables+=RScriptBlockStatement* END;
		public ParserRule getRule() { return rule; }

		//identifier="RSCRIPT" BEGIN variables+=RScriptBlockStatement* END
		public Group getGroup() { return cGroup; }

		//identifier="RSCRIPT"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"RSCRIPT"
		public Keyword getIdentifierRSCRIPTKeyword_0_0() { return cIdentifierRSCRIPTKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//variables+=RScriptBlockStatement*
		public Assignment getVariablesAssignment_2() { return cVariablesAssignment_2; }

		//RScriptBlockStatement
		public RuleCall getVariablesRScriptBlockStatementParserRuleCall_2_0() { return cVariablesRScriptBlockStatementParserRuleCall_2_0; }

		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class RScriptBlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RScriptBlockStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_0_0 = (RuleCall)cValueAssignment_2_0.eContents().get(0);
		private final Assignment cObjectAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cObjectObjectNameParserRuleCall_2_1_0 = (RuleCall)cObjectAssignment_2_1.eContents().get(0);
		
		//RScriptBlockStatement:
		//
		//	identifier=ID "=" (value=STRING // new VariableName
		//
		//	| object=ObjectName);
		public ParserRule getRule() { return rule; }

		//identifier=ID "=" (value=STRING // new VariableName
		//
		//| object=ObjectName)
		public Group getGroup() { return cGroup; }

		//identifier=ID
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_0() { return cIdentifierIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//value=STRING // new VariableName
		//
		//| object=ObjectName
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//value=STRING
		public Assignment getValueAssignment_2_0() { return cValueAssignment_2_0; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_0_0() { return cValueSTRINGTerminalRuleCall_2_0_0; }

		//object=ObjectName
		public Assignment getObjectAssignment_2_1() { return cObjectAssignment_2_1; }

		//ObjectName
		public RuleCall getObjectObjectNameParserRuleCall_2_1_0() { return cObjectObjectNameParserRuleCall_2_1_0; }
	}

	public class TaskFunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TaskFunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFunctionKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFormalArgumentsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFormalArgumentsFormalArgumentsParserRuleCall_4_0 = (RuleCall)cFormalArgumentsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFunctionBodyAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFunctionBodyTaskFunctionBodyParserRuleCall_6_0 = (RuleCall)cFunctionBodyAssignment_6.eContents().get(0);
		
		//TaskFunctionDeclaration:
		//
		//	identifier=ID "=" //new FunctionName
		//
		//	"function" "(" formalArguments=FormalArguments ")" functionBody=TaskFunctionBody;
		public ParserRule getRule() { return rule; }

		//identifier=ID "=" //new FunctionName
		//
		//"function" "(" formalArguments=FormalArguments ")" functionBody=TaskFunctionBody
		public Group getGroup() { return cGroup; }

		//identifier=ID
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_0() { return cIdentifierIDTerminalRuleCall_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		////new FunctionName
		//
		//"function"
		public Keyword getFunctionKeyword_2() { return cFunctionKeyword_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }

		//formalArguments=FormalArguments
		public Assignment getFormalArgumentsAssignment_4() { return cFormalArgumentsAssignment_4; }

		//FormalArguments
		public RuleCall getFormalArgumentsFormalArgumentsParserRuleCall_4_0() { return cFormalArgumentsFormalArgumentsParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//functionBody=TaskFunctionBody
		public Assignment getFunctionBodyAssignment_6() { return cFunctionBodyAssignment_6; }

		//TaskFunctionBody
		public RuleCall getFunctionBodyTaskFunctionBodyParserRuleCall_6_0() { return cFunctionBodyTaskFunctionBodyParserRuleCall_6_0; }
	}

	public class TaskFunctionBodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TaskFunctionBody");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTaskFunctionBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cBlocksAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cBlocksTaskFunctionBlockParserRuleCall_2_0 = (RuleCall)cBlocksAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//TaskFunctionBody:
		//
		//	{TaskFunctionBody} BEGIN blocks+=TaskFunctionBlock* END;
		public ParserRule getRule() { return rule; }

		//{TaskFunctionBody} BEGIN blocks+=TaskFunctionBlock* END
		public Group getGroup() { return cGroup; }

		//{TaskFunctionBody}
		public Action getTaskFunctionBodyAction_0() { return cTaskFunctionBodyAction_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//blocks+=TaskFunctionBlock*
		public Assignment getBlocksAssignment_2() { return cBlocksAssignment_2; }

		//TaskFunctionBlock
		public RuleCall getBlocksTaskFunctionBlockParserRuleCall_2_0() { return cBlocksTaskFunctionBlockParserRuleCall_2_0; }

		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class TaskFunctionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TaskFunctionBlock");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cEstimateBlockAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cEstimateBlockEstimateTaskParserRuleCall_0_0 = (RuleCall)cEstimateBlockAssignment_0.eContents().get(0);
		private final Assignment cSimulateBlockAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cSimulateBlockSimulateTaskParserRuleCall_1_0 = (RuleCall)cSimulateBlockAssignment_1.eContents().get(0);
		private final Assignment cExecuteBlockAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cExecuteBlockExecuteTaskParserRuleCall_2_0 = (RuleCall)cExecuteBlockAssignment_2.eContents().get(0);
		
		//TaskFunctionBlock:
		//
		//	estimateBlock=EstimateTask | simulateBlock=SimulateTask | executeBlock=ExecuteTask;
		public ParserRule getRule() { return rule; }

		//estimateBlock=EstimateTask | simulateBlock=SimulateTask | executeBlock=ExecuteTask
		public Alternatives getAlternatives() { return cAlternatives; }

		//estimateBlock=EstimateTask
		public Assignment getEstimateBlockAssignment_0() { return cEstimateBlockAssignment_0; }

		//EstimateTask
		public RuleCall getEstimateBlockEstimateTaskParserRuleCall_0_0() { return cEstimateBlockEstimateTaskParserRuleCall_0_0; }

		//simulateBlock=SimulateTask
		public Assignment getSimulateBlockAssignment_1() { return cSimulateBlockAssignment_1; }

		//SimulateTask
		public RuleCall getSimulateBlockSimulateTaskParserRuleCall_1_0() { return cSimulateBlockSimulateTaskParserRuleCall_1_0; }

		//executeBlock=ExecuteTask
		public Assignment getExecuteBlockAssignment_2() { return cExecuteBlockAssignment_2; }

		//ExecuteTask
		public RuleCall getExecuteBlockExecuteTaskParserRuleCall_2_0() { return cExecuteBlockExecuteTaskParserRuleCall_2_0; }
	}

	public class EstimateTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EstimateTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierESTIMATEKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsBlockStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//EstimateTask:
		//
		//	identifier="ESTIMATE" BEGIN statements+=BlockStatement* //Properties
		//
		//	END;
		public ParserRule getRule() { return rule; }

		//identifier="ESTIMATE" BEGIN statements+=BlockStatement* //Properties
		//
		//END
		public Group getGroup() { return cGroup; }

		//identifier="ESTIMATE"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"ESTIMATE"
		public Keyword getIdentifierESTIMATEKeyword_0_0() { return cIdentifierESTIMATEKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//statements+=BlockStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//BlockStatement
		public RuleCall getStatementsBlockStatementParserRuleCall_2_0() { return cStatementsBlockStatementParserRuleCall_2_0; }

		////Properties
		//
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class SimulateTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimulateTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierSIMULATEKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsBlockStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//SimulateTask:
		//
		//	identifier="SIMULATE" BEGIN statements+=BlockStatement* //Properties
		//
		//	END;
		public ParserRule getRule() { return rule; }

		//identifier="SIMULATE" BEGIN statements+=BlockStatement* //Properties
		//
		//END
		public Group getGroup() { return cGroup; }

		//identifier="SIMULATE"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"SIMULATE"
		public Keyword getIdentifierSIMULATEKeyword_0_0() { return cIdentifierSIMULATEKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//statements+=BlockStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//BlockStatement
		public RuleCall getStatementsBlockStatementParserRuleCall_2_0() { return cStatementsBlockStatementParserRuleCall_2_0; }

		////Properties
		//
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class ExecuteTaskElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExecuteTask");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierEXECUTEKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsBlockStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//ExecuteTask:
		//
		//	identifier="EXECUTE" BEGIN statements+=BlockStatement* //Properties
		//
		//	END;
		public ParserRule getRule() { return rule; }

		//identifier="EXECUTE" BEGIN statements+=BlockStatement* //Properties
		//
		//END
		public Group getGroup() { return cGroup; }

		//identifier="EXECUTE"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"EXECUTE"
		public Keyword getIdentifierEXECUTEKeyword_0_0() { return cIdentifierEXECUTEKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//statements+=BlockStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//BlockStatement
		public RuleCall getStatementsBlockStatementParserRuleCall_2_0() { return cStatementsBlockStatementParserRuleCall_2_0; }

		////Properties
		//
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class FormalArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FormalArguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifiersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifiersIDTerminalRuleCall_0_0 = (RuleCall)cIdentifiersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdentifiersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdentifiersIDTerminalRuleCall_1_1_0 = (RuleCall)cIdentifiersAssignment_1_1.eContents().get(0);
		
		////////////////////////////////////////////////////////////
		//
		////Common
		//
		////////////////////////////////////////////////////////////
		//
		//FormalArguments:
		//
		//	identifiers+=ID ("," identifiers+=ID)*;
		public ParserRule getRule() { return rule; }

		//identifiers+=ID ("," identifiers+=ID)*
		public Group getGroup() { return cGroup; }

		//identifiers+=ID
		public Assignment getIdentifiersAssignment_0() { return cIdentifiersAssignment_0; }

		//ID
		public RuleCall getIdentifiersIDTerminalRuleCall_0_0() { return cIdentifiersIDTerminalRuleCall_0_0; }

		//(=> "," identifiers+=ID)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//identifiers+=ID
		public Assignment getIdentifiersAssignment_1_1() { return cIdentifiersAssignment_1_1; }

		//ID
		public RuleCall getIdentifiersIDTerminalRuleCall_1_1_0() { return cIdentifiersIDTerminalRuleCall_1_1_0; }
	}

	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierFullyQualifiedSymbolNameParserRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsArgumentsParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionCall:
		//
		//	identifier=FullyQualifiedSymbolName "(" arguments=Arguments ")";
		public ParserRule getRule() { return rule; }

		//identifier=FullyQualifiedSymbolName "(" arguments=Arguments ")"
		public Group getGroup() { return cGroup; }

		//identifier=FullyQualifiedSymbolName
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//FullyQualifiedSymbolName
		public RuleCall getIdentifierFullyQualifiedSymbolNameParserRuleCall_0_0() { return cIdentifierFullyQualifiedSymbolNameParserRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arguments=Arguments
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }

		//Arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_2_0() { return cArgumentsArgumentsParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class BlockStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BlockStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cSymbolAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cSymbolSymbolDeclarationParserRuleCall_0_0 = (RuleCall)cSymbolAssignment_0.eContents().get(0);
		private final Assignment cFunctionCallAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cFunctionCallFunctionCallParserRuleCall_1_0 = (RuleCall)cFunctionCallAssignment_1.eContents().get(0);
		private final Assignment cStatementAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cStatementConditionalStatementParserRuleCall_2_0 = (RuleCall)cStatementAssignment_2.eContents().get(0);
		private final Assignment cVerbatimBlockAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cVerbatimBlockVerbatimBlockParserRuleCall_3_0 = (RuleCall)cVerbatimBlockAssignment_3.eContents().get(0);
		
		//BlockStatement:
		//
		//	symbol=SymbolDeclaration //VariableName or PropertyName
		//
		//	| functionCall=FunctionCall | statement=ConditionalStatement | verbatimBlock=VerbatimBlock;
		public ParserRule getRule() { return rule; }

		//symbol=SymbolDeclaration //VariableName or PropertyName
		//
		//| functionCall=FunctionCall | statement=ConditionalStatement | verbatimBlock=VerbatimBlock
		public Alternatives getAlternatives() { return cAlternatives; }

		//symbol=SymbolDeclaration
		public Assignment getSymbolAssignment_0() { return cSymbolAssignment_0; }

		//SymbolDeclaration
		public RuleCall getSymbolSymbolDeclarationParserRuleCall_0_0() { return cSymbolSymbolDeclarationParserRuleCall_0_0; }

		//functionCall=FunctionCall
		public Assignment getFunctionCallAssignment_1() { return cFunctionCallAssignment_1; }

		//FunctionCall
		public RuleCall getFunctionCallFunctionCallParserRuleCall_1_0() { return cFunctionCallFunctionCallParserRuleCall_1_0; }

		//statement=ConditionalStatement
		public Assignment getStatementAssignment_2() { return cStatementAssignment_2; }

		//ConditionalStatement
		public RuleCall getStatementConditionalStatementParserRuleCall_2_0() { return cStatementConditionalStatementParserRuleCall_2_0; }

		//verbatimBlock=VerbatimBlock
		public Assignment getVerbatimBlockAssignment_3() { return cVerbatimBlockAssignment_3; }

		//VerbatimBlock
		public RuleCall getVerbatimBlockVerbatimBlockParserRuleCall_3_0() { return cVerbatimBlockVerbatimBlockParserRuleCall_3_0; }
	}

	public class VerbatimBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VerbatimBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierTARGET_CODEKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cBlockAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cBlockTargetBlockParserRuleCall_2_0_0 = (RuleCall)cBlockAssignment_2_0.eContents().get(0);
		private final Assignment cExternalCodeAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cExternalCodeEXTERNAL_CODETerminalRuleCall_2_1_0 = (RuleCall)cExternalCodeAssignment_2_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//VerbatimBlock:
		//
		//	identifier="TARGET_CODE" BEGIN (block=TargetBlock | externalCode=EXTERNAL_CODE) END;
		public ParserRule getRule() { return rule; }

		//identifier="TARGET_CODE" BEGIN (block=TargetBlock | externalCode=EXTERNAL_CODE) END
		public Group getGroup() { return cGroup; }

		//identifier="TARGET_CODE"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"TARGET_CODE"
		public Keyword getIdentifierTARGET_CODEKeyword_0_0() { return cIdentifierTARGET_CODEKeyword_0_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//block=TargetBlock | externalCode=EXTERNAL_CODE
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//block=TargetBlock
		public Assignment getBlockAssignment_2_0() { return cBlockAssignment_2_0; }

		//TargetBlock
		public RuleCall getBlockTargetBlockParserRuleCall_2_0_0() { return cBlockTargetBlockParserRuleCall_2_0_0; }

		//externalCode=EXTERNAL_CODE
		public Assignment getExternalCodeAssignment_2_1() { return cExternalCodeAssignment_2_1; }

		//EXTERNAL_CODE
		public RuleCall getExternalCodeEXTERNAL_CODETerminalRuleCall_2_1_0() { return cExternalCodeEXTERNAL_CODETerminalRuleCall_2_1_0; }

		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class TargetBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TargetBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierTargetLanguageParserRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsArgumentsParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Assignment cExternalCodeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExternalCodeEXTERNAL_CODETerminalRuleCall_3_0 = (RuleCall)cExternalCodeAssignment_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//TargetBlock:
		//
		//	identifier=TargetLanguage ("(" arguments=Arguments ")")? BEGIN externalCode=EXTERNAL_CODE END;
		public ParserRule getRule() { return rule; }

		//identifier=TargetLanguage ("(" arguments=Arguments ")")? BEGIN externalCode=EXTERNAL_CODE END
		public Group getGroup() { return cGroup; }

		//identifier=TargetLanguage
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//TargetLanguage
		public RuleCall getIdentifierTargetLanguageParserRuleCall_0_0() { return cIdentifierTargetLanguageParserRuleCall_0_0; }

		//("(" arguments=Arguments ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//arguments=Arguments
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }

		//Arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_1_1_0() { return cArgumentsArgumentsParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }

		//externalCode=EXTERNAL_CODE
		public Assignment getExternalCodeAssignment_3() { return cExternalCodeAssignment_3; }

		//EXTERNAL_CODE
		public RuleCall getExternalCodeEXTERNAL_CODETerminalRuleCall_3_0() { return cExternalCodeEXTERNAL_CODETerminalRuleCall_3_0; }

		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
	}

	public class TargetLanguageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TargetLanguage");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNMTRAN_CODEKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cMLXTRAN_CODEKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPML_CODEKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cBUGS_CODEKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cR_CODEKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cMATLAB_CODEKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//TargetLanguage:
		//
		//	"NMTRAN_CODE" | "MLXTRAN_CODE" | "PML_CODE" | "BUGS_CODE" | "R_CODE" | "MATLAB_CODE";
		public ParserRule getRule() { return rule; }

		//"NMTRAN_CODE" | "MLXTRAN_CODE" | "PML_CODE" | "BUGS_CODE" | "R_CODE" | "MATLAB_CODE"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"NMTRAN_CODE"
		public Keyword getNMTRAN_CODEKeyword_0() { return cNMTRAN_CODEKeyword_0; }

		//"MLXTRAN_CODE"
		public Keyword getMLXTRAN_CODEKeyword_1() { return cMLXTRAN_CODEKeyword_1; }

		//"PML_CODE"
		public Keyword getPML_CODEKeyword_2() { return cPML_CODEKeyword_2; }

		//"BUGS_CODE"
		public Keyword getBUGS_CODEKeyword_3() { return cBUGS_CODEKeyword_3; }

		//"R_CODE"
		public Keyword getR_CODEKeyword_4() { return cR_CODEKeyword_4; }

		//"MATLAB_CODE"
		public Keyword getMATLAB_CODEKeyword_5() { return cMATLAB_CODEKeyword_5; }
	}

	public class SymbolModificationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SymbolModification");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierFullyQualifiedSymbolNameParserRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cListListParserRuleCall_1_1_0 = (RuleCall)cListAssignment_1_1.eContents().get(0);
		
		//SymbolModification:
		//
		//	identifier=FullyQualifiedSymbolName ("=" list=List)? //Ref to ParameterName
		//
		//;
		public ParserRule getRule() { return rule; }

		//identifier=FullyQualifiedSymbolName ("=" list=List)? //Ref to ParameterName
		public Group getGroup() { return cGroup; }

		//identifier=FullyQualifiedSymbolName
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//FullyQualifiedSymbolName
		public RuleCall getIdentifierFullyQualifiedSymbolNameParserRuleCall_0_0() { return cIdentifierFullyQualifiedSymbolNameParserRuleCall_0_0; }

		//("=" list=List)?
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//list=List
		public Assignment getListAssignment_1_1() { return cListAssignment_1_1; }

		//List
		public RuleCall getListListParserRuleCall_1_1_0() { return cListListParserRuleCall_1_1_0; }
	}

	public class ParameterDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_0 = (RuleCall)cIdentifierAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cListAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cListListParserRuleCall_1_1_0 = (RuleCall)cListAssignment_1_1.eContents().get(0);
		
		//ParameterDeclaration:
		//
		//	identifier=ID ("=" list=List) //new ParameterName
		//
		//;
		public ParserRule getRule() { return rule; }

		//identifier=ID ("=" list=List) //new ParameterName
		public Group getGroup() { return cGroup; }

		//identifier=ID
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_0() { return cIdentifierIDTerminalRuleCall_0_0; }

		//"=" list=List
		public Group getGroup_1() { return cGroup_1; }

		//"="
		public Keyword getEqualsSignKeyword_1_0() { return cEqualsSignKeyword_1_0; }

		//list=List
		public Assignment getListAssignment_1_1() { return cListAssignment_1_1; }

		//List
		public RuleCall getListListParserRuleCall_1_1_0() { return cListListParserRuleCall_1_1_0; }
	}

	public class SymbolDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SymbolDeclaration");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIdentifierAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_0_0 = (RuleCall)cIdentifierAssignment_0_0.eContents().get(0);
		private final Alternatives cAlternatives_0_1 = (Alternatives)cGroup_0.eContents().get(1);
		private final Group cGroup_0_1_0 = (Group)cAlternatives_0_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1_0_0 = (Keyword)cGroup_0_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1_0_1 = (Assignment)cGroup_0_1_0.eContents().get(1);
		private final RuleCall cExpressionAnyExpressionParserRuleCall_0_1_0_1_0 = (RuleCall)cExpressionAssignment_0_1_0_1.eContents().get(0);
		private final Assignment cRandomListAssignment_0_1_1 = (Assignment)cAlternatives_0_1.eContents().get(1);
		private final RuleCall cRandomListRandomListParserRuleCall_0_1_1_0 = (RuleCall)cRandomListAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cFunctionAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cFunctionIDTerminalRuleCall_1_0_0 = (RuleCall)cFunctionAssignment_1_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cIdentifierAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_2_0 = (RuleCall)cIdentifierAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cRandomListAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cRandomListRandomListParserRuleCall_1_4_0 = (RuleCall)cRandomListAssignment_1_4.eContents().get(0);
		
		////new VariableName, new PropertyName
		//
		////special function, new VariableName
		//
		//SymbolDeclaration:
		//
		//	identifier=ID (("=" expression=AnyExpression)? | randomList=RandomList) | function=ID "(" identifier=ID ")"
		//
		//	randomList=RandomList;
		public ParserRule getRule() { return rule; }

		//identifier=ID (("=" expression=AnyExpression)? | randomList=RandomList) | function=ID "(" identifier=ID ")"
		//
		//randomList=RandomList
		public Alternatives getAlternatives() { return cAlternatives; }

		//identifier=ID (("=" expression=AnyExpression)? | randomList=RandomList)
		public Group getGroup_0() { return cGroup_0; }

		//identifier=ID
		public Assignment getIdentifierAssignment_0_0() { return cIdentifierAssignment_0_0; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_0_0() { return cIdentifierIDTerminalRuleCall_0_0_0; }

		//("=" expression=AnyExpression)? | randomList=RandomList
		public Alternatives getAlternatives_0_1() { return cAlternatives_0_1; }

		//("=" expression=AnyExpression)?
		public Group getGroup_0_1_0() { return cGroup_0_1_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1_0_0() { return cEqualsSignKeyword_0_1_0_0; }

		//expression=AnyExpression
		public Assignment getExpressionAssignment_0_1_0_1() { return cExpressionAssignment_0_1_0_1; }

		//AnyExpression
		public RuleCall getExpressionAnyExpressionParserRuleCall_0_1_0_1_0() { return cExpressionAnyExpressionParserRuleCall_0_1_0_1_0; }

		//randomList=RandomList
		public Assignment getRandomListAssignment_0_1_1() { return cRandomListAssignment_0_1_1; }

		//RandomList
		public RuleCall getRandomListRandomListParserRuleCall_0_1_1_0() { return cRandomListRandomListParserRuleCall_0_1_1_0; }

		//function=ID "(" identifier=ID ")" randomList=RandomList
		public Group getGroup_1() { return cGroup_1; }

		//function=ID
		public Assignment getFunctionAssignment_1_0() { return cFunctionAssignment_1_0; }

		//ID
		public RuleCall getFunctionIDTerminalRuleCall_1_0_0() { return cFunctionIDTerminalRuleCall_1_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }

		//identifier=ID
		public Assignment getIdentifierAssignment_1_2() { return cIdentifierAssignment_1_2; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_2_0() { return cIdentifierIDTerminalRuleCall_1_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }

		//randomList=RandomList
		public Assignment getRandomListAssignment_1_4() { return cRandomListAssignment_1_4; }

		//RandomList
		public RuleCall getRandomListRandomListParserRuleCall_1_4_0() { return cRandomListRandomListParserRuleCall_1_4_0; }
	}

	public class EnumTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCategoricalAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCategoricalCategoricalParserRuleCall_0_0 = (RuleCall)cCategoricalAssignment_0.eContents().get(0);
		private final Assignment cContinuousAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cContinuousContinuousParserRuleCall_1_0 = (RuleCall)cContinuousAssignment_1.eContents().get(0);
		private final Assignment cCovariateAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cCovariateCovariateParserRuleCall_2_0 = (RuleCall)cCovariateAssignment_2.eContents().get(0);
		private final Assignment cDistributionAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cDistributionDistributionParserRuleCall_3_0 = (RuleCall)cDistributionAssignment_3.eContents().get(0);
		private final Assignment cLevelAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cLevelLevelTypeParserRuleCall_4_0 = (RuleCall)cLevelAssignment_4.eContents().get(0);
		private final Assignment cLikelyhoodAssignment_5 = (Assignment)cAlternatives.eContents().get(5);
		private final RuleCall cLikelyhoodLikelyhoodParserRuleCall_5_0 = (RuleCall)cLikelyhoodAssignment_5.eContents().get(0);
		private final Assignment cMissingAssignment_6 = (Assignment)cAlternatives.eContents().get(6);
		private final RuleCall cMissingMissingParserRuleCall_6_0 = (RuleCall)cMissingAssignment_6.eContents().get(0);
		
		//EnumType:
		//
		//	categorical=Categorical | continuous=Continuous | covariate=Covariate | distribution=Distribution | level=LevelType |
		//
		//	likelyhood=Likelyhood | missing=Missing;
		public ParserRule getRule() { return rule; }

		//categorical=Categorical | continuous=Continuous | covariate=Covariate | distribution=Distribution | level=LevelType |
		//
		//likelyhood=Likelyhood | missing=Missing
		public Alternatives getAlternatives() { return cAlternatives; }

		//categorical=Categorical
		public Assignment getCategoricalAssignment_0() { return cCategoricalAssignment_0; }

		//Categorical
		public RuleCall getCategoricalCategoricalParserRuleCall_0_0() { return cCategoricalCategoricalParserRuleCall_0_0; }

		//continuous=Continuous
		public Assignment getContinuousAssignment_1() { return cContinuousAssignment_1; }

		//Continuous
		public RuleCall getContinuousContinuousParserRuleCall_1_0() { return cContinuousContinuousParserRuleCall_1_0; }

		//covariate=Covariate
		public Assignment getCovariateAssignment_2() { return cCovariateAssignment_2; }

		//Covariate
		public RuleCall getCovariateCovariateParserRuleCall_2_0() { return cCovariateCovariateParserRuleCall_2_0; }

		//distribution=Distribution
		public Assignment getDistributionAssignment_3() { return cDistributionAssignment_3; }

		//Distribution
		public RuleCall getDistributionDistributionParserRuleCall_3_0() { return cDistributionDistributionParserRuleCall_3_0; }

		//level=LevelType
		public Assignment getLevelAssignment_4() { return cLevelAssignment_4; }

		//LevelType
		public RuleCall getLevelLevelTypeParserRuleCall_4_0() { return cLevelLevelTypeParserRuleCall_4_0; }

		//likelyhood=Likelyhood
		public Assignment getLikelyhoodAssignment_5() { return cLikelyhoodAssignment_5; }

		//Likelyhood
		public RuleCall getLikelyhoodLikelyhoodParserRuleCall_5_0() { return cLikelyhoodLikelyhoodParserRuleCall_5_0; }

		//missing=Missing
		public Assignment getMissingAssignment_6() { return cMissingAssignment_6; }

		//Missing
		public RuleCall getMissingMissingParserRuleCall_6_0() { return cMissingMissingParserRuleCall_6_0; }
	}

	public class MissingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Missing");
		private final Assignment cIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIdentifierMISSINGKeyword_0 = (Keyword)cIdentifierAssignment.eContents().get(0);
		
		//Missing:
		//
		//	identifier="MISSING";
		public ParserRule getRule() { return rule; }

		//identifier="MISSING"
		public Assignment getIdentifierAssignment() { return cIdentifierAssignment; }

		//"MISSING"
		public Keyword getIdentifierMISSINGKeyword_0() { return cIdentifierMISSINGKeyword_0; }
	}

	public class LikelyhoodElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Likelyhood");
		private final Assignment cIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIdentifierLIKELIHOODKeyword_0 = (Keyword)cIdentifierAssignment.eContents().get(0);
		
		//Likelyhood:
		//
		//	identifier="LIKELIHOOD";
		public ParserRule getRule() { return rule; }

		//identifier="LIKELIHOOD"
		public Assignment getIdentifierAssignment() { return cIdentifierAssignment; }

		//"LIKELIHOOD"
		public Keyword getIdentifierLIKELIHOODKeyword_0() { return cIdentifierLIKELIHOODKeyword_0; }
	}

	public class LevelTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LevelType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cMdvAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cMdvMdvKeyword_0_0 = (Keyword)cMdvAssignment_0.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cIdIdKeyword_1_0 = (Keyword)cIdAssignment_1.eContents().get(0);
		private final Assignment cDvAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cDvDvKeyword_2_0 = (Keyword)cDvAssignment_2.eContents().get(0);
		private final Assignment cIdvAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cIdvIdvKeyword_3_0 = (Keyword)cIdvAssignment_3.eContents().get(0);
		
		//LevelType:
		//
		//	mdv="mdv" | id="id" | dv="dv" | idv= //Independent Variable
		//
		//	"idv";
		public ParserRule getRule() { return rule; }

		//mdv="mdv" | id="id" | dv="dv" | idv= //Independent Variable
		//
		//"idv"
		public Alternatives getAlternatives() { return cAlternatives; }

		//mdv="mdv"
		public Assignment getMdvAssignment_0() { return cMdvAssignment_0; }

		//"mdv"
		public Keyword getMdvMdvKeyword_0_0() { return cMdvMdvKeyword_0_0; }

		//id="id"
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }

		//"id"
		public Keyword getIdIdKeyword_1_0() { return cIdIdKeyword_1_0; }

		//dv="dv"
		public Assignment getDvAssignment_2() { return cDvAssignment_2; }

		//"dv"
		public Keyword getDvDvKeyword_2_0() { return cDvDvKeyword_2_0; }

		//idv= //Independent Variable
		//
		//"idv"
		public Assignment getIdvAssignment_3() { return cIdvAssignment_3; }

		////Independent Variable
		//
		//"idv"
		public Keyword getIdvIdvKeyword_3_0() { return cIdvIdvKeyword_3_0; }
	}

	public class CategoricalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Categorical");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierCategoricalKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsArgumentsParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Categorical:
		//
		//	identifier="categorical" ("(" arguments=Arguments ")")?;
		public ParserRule getRule() { return rule; }

		//identifier="categorical" ("(" arguments=Arguments ")")?
		public Group getGroup() { return cGroup; }

		//identifier="categorical"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"categorical"
		public Keyword getIdentifierCategoricalKeyword_0_0() { return cIdentifierCategoricalKeyword_0_0; }

		//("(" arguments=Arguments ")")?
		public Group getGroup_1() { return cGroup_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }

		//arguments=Arguments
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }

		//Arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_1_1_0() { return cArgumentsArgumentsParserRuleCall_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}

	public class ContinuousElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Continuous");
		private final Assignment cIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIdentifierContinuousKeyword_0 = (Keyword)cIdentifierAssignment.eContents().get(0);
		
		//Continuous:
		//
		//	identifier="continuous";
		public ParserRule getRule() { return rule; }

		//identifier="continuous"
		public Assignment getIdentifierAssignment() { return cIdentifierAssignment; }

		//"continuous"
		public Keyword getIdentifierContinuousKeyword_0() { return cIdentifierContinuousKeyword_0; }
	}

	public class CovariateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Covariate");
		private final Assignment cIdentifierAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cIdentifierCovariateKeyword_0 = (Keyword)cIdentifierAssignment.eContents().get(0);
		
		//Covariate:
		//
		//	identifier="covariate";
		public ParserRule getRule() { return rule; }

		//identifier="covariate"
		public Assignment getIdentifierAssignment() { return cIdentifierAssignment; }

		//"covariate"
		public Keyword getIdentifierCovariateKeyword_0() { return cIdentifierCovariateKeyword_0; }
	}

	public class DistributionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Distribution");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cDistributionAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cNormalAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cNormalNormalKeyword_0_1_0 = (Keyword)cNormalAssignment_0_1.eContents().get(0);
		private final Assignment cBinomialAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cBinomialBinomialKeyword_1_0 = (Keyword)cBinomialAssignment_1.eContents().get(0);
		private final Assignment cPoissonAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final Keyword cPoissonPoissonKeyword_2_0 = (Keyword)cPoissonAssignment_2.eContents().get(0);
		private final Assignment cStudent_tAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final Keyword cStudent_tStudent_TKeyword_3_0 = (Keyword)cStudent_tAssignment_3.eContents().get(0);
		private final Assignment cMvnormalAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final Keyword cMvnormalMVNormalKeyword_4_0 = (Keyword)cMvnormalAssignment_4.eContents().get(0);
		
		//Distribution:
		//
		//	{Distribution} normal="Normal" | binomial="Binomial" | poisson="Poisson" | student_t="Student_T" |
		//
		//	mvnormal="MVNormal";
		public ParserRule getRule() { return rule; }

		//{Distribution} normal="Normal" | binomial="Binomial" | poisson="Poisson" | student_t="Student_T" | mvnormal="MVNormal"
		public Alternatives getAlternatives() { return cAlternatives; }

		//{Distribution} normal="Normal"
		public Group getGroup_0() { return cGroup_0; }

		//{Distribution}
		public Action getDistributionAction_0_0() { return cDistributionAction_0_0; }

		//normal="Normal"
		public Assignment getNormalAssignment_0_1() { return cNormalAssignment_0_1; }

		//"Normal"
		public Keyword getNormalNormalKeyword_0_1_0() { return cNormalNormalKeyword_0_1_0; }

		//binomial="Binomial"
		public Assignment getBinomialAssignment_1() { return cBinomialAssignment_1; }

		//"Binomial"
		public Keyword getBinomialBinomialKeyword_1_0() { return cBinomialBinomialKeyword_1_0; }

		//poisson="Poisson"
		public Assignment getPoissonAssignment_2() { return cPoissonAssignment_2; }

		//"Poisson"
		public Keyword getPoissonPoissonKeyword_2_0() { return cPoissonPoissonKeyword_2_0; }

		//student_t="Student_T"
		public Assignment getStudent_tAssignment_3() { return cStudent_tAssignment_3; }

		//"Student_T"
		public Keyword getStudent_tStudent_TKeyword_3_0() { return cStudent_tStudent_TKeyword_3_0; }

		//mvnormal="MVNormal"
		public Assignment getMvnormalAssignment_4() { return cMvnormalAssignment_4; }

		//"MVNormal"
		public Keyword getMvnormalMVNormalKeyword_4_0() { return cMvnormalMVNormalKeyword_4_0; }
	}

	public class AnyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnyExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Assignment cListAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cListListParserRuleCall_1_0 = (RuleCall)cListAssignment_1.eContents().get(0);
		private final Assignment cOdeListAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cOdeListOdeListParserRuleCall_2_0 = (RuleCall)cOdeListAssignment_2.eContents().get(0);
		private final Assignment cTypeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cTypeEnumTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//AnyExpression:
		//
		//	expression=Expression | list=List | odeList=OdeList | type=EnumType;
		public ParserRule getRule() { return rule; }

		//expression=Expression | list=List | odeList=OdeList | type=EnumType
		public Alternatives getAlternatives() { return cAlternatives; }

		//expression=Expression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_0_0() { return cExpressionExpressionParserRuleCall_0_0; }

		//list=List
		public Assignment getListAssignment_1() { return cListAssignment_1; }

		//List
		public RuleCall getListListParserRuleCall_1_0() { return cListListParserRuleCall_1_0; }

		//odeList=OdeList
		public Assignment getOdeListAssignment_2() { return cOdeListAssignment_2; }

		//OdeList
		public RuleCall getOdeListOdeListParserRuleCall_2_0() { return cOdeListOdeListParserRuleCall_2_0; }

		//type=EnumType
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//EnumType
		public RuleCall getTypeEnumTypeParserRuleCall_3_0() { return cTypeEnumTypeParserRuleCall_3_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Assignment cConditionalExpressionAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cConditionalExpressionConditionalExpressionParserRuleCall_0 = (RuleCall)cConditionalExpressionAssignment.eContents().get(0);
		
		//Expression:
		//
		//	conditionalExpression=ConditionalExpression;
		public ParserRule getRule() { return rule; }

		//conditionalExpression=ConditionalExpression
		public Assignment getConditionalExpressionAssignment() { return cConditionalExpressionAssignment; }

		//ConditionalExpression
		public RuleCall getConditionalExpressionConditionalExpressionParserRuleCall_0() { return cConditionalExpressionConditionalExpressionParserRuleCall_0; }
	}

	public class ListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "List");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsArgumentsParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//List:
		//
		//	"list" "(" arguments=Arguments ")";
		public ParserRule getRule() { return rule; }

		//"list" "(" arguments=Arguments ")"
		public Group getGroup() { return cGroup; }

		//"list"
		public Keyword getListKeyword_0() { return cListKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arguments=Arguments
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }

		//Arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_2_0() { return cArgumentsArgumentsParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class OdeListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OdeList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOdeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsArgumentsParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OdeList:
		//
		//	"ode" "(" arguments=Arguments ")";
		public ParserRule getRule() { return rule; }

		//"ode" "(" arguments=Arguments ")"
		public Group getGroup() { return cGroup; }

		//"ode"
		public Keyword getOdeKeyword_0() { return cOdeKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arguments=Arguments
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }

		//Arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_2_0() { return cArgumentsArgumentsParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class RandomListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RandomList");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTildeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cArgumentsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cArgumentsArgumentsParserRuleCall_2_0 = (RuleCall)cArgumentsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RandomList:
		//
		//	"~" "(" arguments=Arguments ")";
		public ParserRule getRule() { return rule; }

		//"~" "(" arguments=Arguments ")"
		public Group getGroup() { return cGroup; }

		//"~"
		public Keyword getTildeKeyword_0() { return cTildeKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//arguments=Arguments
		public Assignment getArgumentsAssignment_2() { return cArgumentsAssignment_2; }

		//Arguments
		public RuleCall getArgumentsArgumentsParserRuleCall_2_0() { return cArgumentsArgumentsParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class ArgumentsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Arguments");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cArgumentsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cArgumentsArgumentParserRuleCall_0_0 = (RuleCall)cArgumentsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArgumentsArgumentParserRuleCall_1_1_0 = (RuleCall)cArgumentsAssignment_1_1.eContents().get(0);
		
		//Arguments:
		//
		//	arguments+=Argument ("," arguments+=Argument)*;
		public ParserRule getRule() { return rule; }

		//arguments+=Argument ("," arguments+=Argument)*
		public Group getGroup() { return cGroup; }

		//arguments+=Argument
		public Assignment getArgumentsAssignment_0() { return cArgumentsAssignment_0; }

		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_0_0() { return cArgumentsArgumentParserRuleCall_0_0; }

		//(=> "," arguments+=Argument)*
		public Group getGroup_1() { return cGroup_1; }

		//=> ","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//arguments+=Argument
		public Assignment getArgumentsAssignment_1_1() { return cArgumentsAssignment_1_1; }

		//Argument
		public RuleCall getArgumentsArgumentParserRuleCall_1_1_0() { return cArgumentsArgumentParserRuleCall_1_1_0; }
	}

	public class ArgumentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Argument");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cIdentifierAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cIdentifierIDTerminalRuleCall_0_0_0 = (RuleCall)cIdentifierAssignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cExpressionAnyExpressionParserRuleCall_0_2_0 = (RuleCall)cExpressionAssignment_0_2.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cExpressionAnyExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//Argument:
		//
		//	identifier=ID "=" expression=AnyExpression | expression=AnyExpression;
		public ParserRule getRule() { return rule; }

		//identifier=ID "=" expression=AnyExpression | expression=AnyExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//identifier=ID "=" expression=AnyExpression
		public Group getGroup_0() { return cGroup_0; }

		//identifier=ID
		public Assignment getIdentifierAssignment_0_0() { return cIdentifierAssignment_0_0; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_0_0_0() { return cIdentifierIDTerminalRuleCall_0_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//expression=AnyExpression
		public Assignment getExpressionAssignment_0_2() { return cExpressionAssignment_0_2; }

		//AnyExpression
		public RuleCall getExpressionAnyExpressionParserRuleCall_0_2_0() { return cExpressionAnyExpressionParserRuleCall_0_2_0; }

		//expression=AnyExpression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//AnyExpression
		public RuleCall getExpressionAnyExpressionParserRuleCall_1_0() { return cExpressionAnyExpressionParserRuleCall_1_0; }
	}

	public class ConditionalStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cParExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cParExpressionParExpressionParserRuleCall_1_0 = (RuleCall)cParExpressionAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cIfStatementAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cIfStatementBlockStatementParserRuleCall_2_0_0 = (RuleCall)cIfStatementAssignment_2_0.eContents().get(0);
		private final Assignment cIfBlockAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cIfBlockBlockParserRuleCall_2_1_0 = (RuleCall)cIfBlockAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cElseKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cElseStatementAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cElseStatementBlockStatementParserRuleCall_3_1_0_0 = (RuleCall)cElseStatementAssignment_3_1_0.eContents().get(0);
		private final Assignment cElseBlockAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cElseBlockBlockParserRuleCall_3_1_1_0 = (RuleCall)cElseBlockAssignment_3_1_1.eContents().get(0);
		
		//ConditionalStatement:
		//
		//	"if" parExpression=ParExpression (ifStatement=BlockStatement | ifBlock=Block) ("else" (elseStatement=BlockStatement |
		//
		//	elseBlock=Block))?;
		public ParserRule getRule() { return rule; }

		//"if" parExpression=ParExpression (ifStatement=BlockStatement | ifBlock=Block) ("else" (elseStatement=BlockStatement |
		//
		//elseBlock=Block))?
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//parExpression=ParExpression
		public Assignment getParExpressionAssignment_1() { return cParExpressionAssignment_1; }

		//ParExpression
		public RuleCall getParExpressionParExpressionParserRuleCall_1_0() { return cParExpressionParExpressionParserRuleCall_1_0; }

		//ifStatement=BlockStatement | ifBlock=Block
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//ifStatement=BlockStatement
		public Assignment getIfStatementAssignment_2_0() { return cIfStatementAssignment_2_0; }

		//BlockStatement
		public RuleCall getIfStatementBlockStatementParserRuleCall_2_0_0() { return cIfStatementBlockStatementParserRuleCall_2_0_0; }

		//ifBlock=Block
		public Assignment getIfBlockAssignment_2_1() { return cIfBlockAssignment_2_1; }

		//Block
		public RuleCall getIfBlockBlockParserRuleCall_2_1_0() { return cIfBlockBlockParserRuleCall_2_1_0; }

		//(=> "else" (elseStatement=BlockStatement | elseBlock=Block))?
		public Group getGroup_3() { return cGroup_3; }

		//=> "else"
		public Keyword getElseKeyword_3_0() { return cElseKeyword_3_0; }

		//elseStatement=BlockStatement | elseBlock=Block
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//elseStatement=BlockStatement
		public Assignment getElseStatementAssignment_3_1_0() { return cElseStatementAssignment_3_1_0; }

		//BlockStatement
		public RuleCall getElseStatementBlockStatementParserRuleCall_3_1_0_0() { return cElseStatementBlockStatementParserRuleCall_3_1_0_0; }

		//elseBlock=Block
		public Assignment getElseBlockAssignment_3_1_1() { return cElseBlockAssignment_3_1_1; }

		//Block
		public RuleCall getElseBlockBlockParserRuleCall_3_1_1_0() { return cElseBlockBlockParserRuleCall_3_1_1_0; }
	}

	public class BlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Block");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBlockAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Assignment cStatementsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStatementsBlockStatementParserRuleCall_2_0 = (RuleCall)cStatementsAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Block:
		//
		//	{Block} BEGIN statements+=BlockStatement* END;
		public ParserRule getRule() { return rule; }

		//{Block} BEGIN statements+=BlockStatement* END
		public Group getGroup() { return cGroup; }

		//{Block}
		public Action getBlockAction_0() { return cBlockAction_0; }

		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }

		//statements+=BlockStatement*
		public Assignment getStatementsAssignment_2() { return cStatementsAssignment_2; }

		//BlockStatement
		public RuleCall getStatementsBlockStatementParserRuleCall_2_0() { return cStatementsBlockStatementParserRuleCall_2_0; }

		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}

	public class ParExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParExpression:
		//
		//	"(" expression=Expression ")";
		public ParserRule getRule() { return rule; }

		//"(" expression=Expression ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class ConditionalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConditionalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionOrExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cExpression1Assignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpression1ExpressionParserRuleCall_1_1_0 = (RuleCall)cExpression1Assignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cExpression2Assignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cExpression2ExpressionParserRuleCall_1_3_0 = (RuleCall)cExpression2Assignment_1_3.eContents().get(0);
		
		//ConditionalExpression:
		//
		//	expression=OrExpression ("?" expression1=Expression ":" expression2=Expression)?;
		public ParserRule getRule() { return rule; }

		//expression=OrExpression ("?" expression1=Expression ":" expression2=Expression)?
		public Group getGroup() { return cGroup; }

		//expression=OrExpression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//OrExpression
		public RuleCall getExpressionOrExpressionParserRuleCall_0_0() { return cExpressionOrExpressionParserRuleCall_0_0; }

		//("?" expression1=Expression ":" expression2=Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_0() { return cQuestionMarkKeyword_1_0; }

		//expression1=Expression
		public Assignment getExpression1Assignment_1_1() { return cExpression1Assignment_1_1; }

		//Expression
		public RuleCall getExpression1ExpressionParserRuleCall_1_1_0() { return cExpression1ExpressionParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_1_2() { return cColonKeyword_1_2; }

		//expression2=Expression
		public Assignment getExpression2Assignment_1_3() { return cExpression2Assignment_1_3; }

		//Expression
		public RuleCall getExpression2ExpressionParserRuleCall_1_3_0() { return cExpression2ExpressionParserRuleCall_1_3_0; }
	}

	public class OrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionAndExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorLogicalOrOperatorParserRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionAndExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//OrExpression:
		//
		//	expression+=AndExpression (operator+=LogicalOrOperator expression+=AndExpression)*;
		public ParserRule getRule() { return rule; }

		//expression+=AndExpression (operator+=LogicalOrOperator expression+=AndExpression)*
		public Group getGroup() { return cGroup; }

		//expression+=AndExpression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//AndExpression
		public RuleCall getExpressionAndExpressionParserRuleCall_0_0() { return cExpressionAndExpressionParserRuleCall_0_0; }

		//(operator+=LogicalOrOperator expression+=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//operator+=LogicalOrOperator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }

		//LogicalOrOperator
		public RuleCall getOperatorLogicalOrOperatorParserRuleCall_1_0_0() { return cOperatorLogicalOrOperatorParserRuleCall_1_0_0; }

		//expression+=AndExpression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//AndExpression
		public RuleCall getExpressionAndExpressionParserRuleCall_1_1_0() { return cExpressionAndExpressionParserRuleCall_1_1_0; }
	}

	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionLogicalExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorLogicalAndOperatorParserRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionLogicalExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//AndExpression:
		//
		//	expression+=LogicalExpression (operator+=LogicalAndOperator expression+=LogicalExpression)*;
		public ParserRule getRule() { return rule; }

		//expression+=LogicalExpression (operator+=LogicalAndOperator expression+=LogicalExpression)*
		public Group getGroup() { return cGroup; }

		//expression+=LogicalExpression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//LogicalExpression
		public RuleCall getExpressionLogicalExpressionParserRuleCall_0_0() { return cExpressionLogicalExpressionParserRuleCall_0_0; }

		//(operator+=LogicalAndOperator expression+=LogicalExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//operator+=LogicalAndOperator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }

		//LogicalAndOperator
		public RuleCall getOperatorLogicalAndOperatorParserRuleCall_1_0_0() { return cOperatorLogicalAndOperatorParserRuleCall_1_0_0; }

		//expression+=LogicalExpression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//LogicalExpression
		public RuleCall getExpressionLogicalExpressionParserRuleCall_1_1_0() { return cExpressionLogicalExpressionParserRuleCall_1_1_0; }
	}

	public class LogicalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNegationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cNegationExclamationMarkKeyword_0_0 = (Keyword)cNegationAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cBooleanAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cBooleanBOOLEANTerminalRuleCall_1_0_0 = (RuleCall)cBooleanAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cExpressionAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cExpressionAdditiveExpressionParserRuleCall_1_1_0_0 = (RuleCall)cExpressionAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_1_0 = (Assignment)cGroup_1_1_1.eContents().get(0);
		private final RuleCall cOperatorLogicalOperatorParserRuleCall_1_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cExpressionAdditiveExpressionParserRuleCall_1_1_1_1_0 = (RuleCall)cExpressionAssignment_1_1_1_1.eContents().get(0);
		
		//LogicalExpression:
		//
		//	negation="!"? (boolean=BOOLEAN | expression+=AdditiveExpression (operator+=LogicalOperator
		//
		//	expression+=AdditiveExpression)*);
		public ParserRule getRule() { return rule; }

		//negation="!"? (boolean=BOOLEAN | expression+=AdditiveExpression (operator+=LogicalOperator
		//
		//expression+=AdditiveExpression)*)
		public Group getGroup() { return cGroup; }

		//negation="!"?
		public Assignment getNegationAssignment_0() { return cNegationAssignment_0; }

		//"!"
		public Keyword getNegationExclamationMarkKeyword_0_0() { return cNegationExclamationMarkKeyword_0_0; }

		//boolean=BOOLEAN | expression+=AdditiveExpression (operator+=LogicalOperator expression+=AdditiveExpression)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//boolean=BOOLEAN
		public Assignment getBooleanAssignment_1_0() { return cBooleanAssignment_1_0; }

		//BOOLEAN
		public RuleCall getBooleanBOOLEANTerminalRuleCall_1_0_0() { return cBooleanBOOLEANTerminalRuleCall_1_0_0; }

		//expression+=AdditiveExpression (operator+=LogicalOperator expression+=AdditiveExpression)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//expression+=AdditiveExpression
		public Assignment getExpressionAssignment_1_1_0() { return cExpressionAssignment_1_1_0; }

		//AdditiveExpression
		public RuleCall getExpressionAdditiveExpressionParserRuleCall_1_1_0_0() { return cExpressionAdditiveExpressionParserRuleCall_1_1_0_0; }

		//(operator+=LogicalOperator expression+=AdditiveExpression)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//operator+=LogicalOperator
		public Assignment getOperatorAssignment_1_1_1_0() { return cOperatorAssignment_1_1_1_0; }

		//LogicalOperator
		public RuleCall getOperatorLogicalOperatorParserRuleCall_1_1_1_0_0() { return cOperatorLogicalOperatorParserRuleCall_1_1_1_0_0; }

		//expression+=AdditiveExpression
		public Assignment getExpressionAssignment_1_1_1_1() { return cExpressionAssignment_1_1_1_1; }

		//AdditiveExpression
		public RuleCall getExpressionAdditiveExpressionParserRuleCall_1_1_1_1_0() { return cExpressionAdditiveExpressionParserRuleCall_1_1_1_1_0; }
	}

	public class AdditiveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cExpressionAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionMultiplicativeExpressionParserRuleCall_0_0_0 = (RuleCall)cExpressionAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cOperatorAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cOperatorAdditiveOperatorParserRuleCall_0_1_0_0 = (RuleCall)cOperatorAssignment_0_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cExpressionMultiplicativeExpressionParserRuleCall_0_1_1_0 = (RuleCall)cExpressionAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cStringAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cStringSTRINGTerminalRuleCall_1_0_0 = (RuleCall)cStringAssignment_1_0.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cOperatorAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cOperatorAdditiveOperatorParserRuleCall_1_1_0_0 = (RuleCall)cOperatorAssignment_1_1_0.eContents().get(0);
		private final Assignment cStringAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_1_1_1_0 = (RuleCall)cStringAssignment_1_1_1.eContents().get(0);
		
		//AdditiveExpression:
		//
		//	expression+=MultiplicativeExpression (operator+=AdditiveOperator expression+=MultiplicativeExpression)* |
		//
		//	string+=STRING (operator+=AdditiveOperator string+=STRING)*;
		public ParserRule getRule() { return rule; }

		//expression+=MultiplicativeExpression (operator+=AdditiveOperator expression+=MultiplicativeExpression)* | string+=STRING
		//
		//(operator+=AdditiveOperator string+=STRING)*
		public Alternatives getAlternatives() { return cAlternatives; }

		//expression+=MultiplicativeExpression (operator+=AdditiveOperator expression+=MultiplicativeExpression)*
		public Group getGroup_0() { return cGroup_0; }

		//expression+=MultiplicativeExpression
		public Assignment getExpressionAssignment_0_0() { return cExpressionAssignment_0_0; }

		//MultiplicativeExpression
		public RuleCall getExpressionMultiplicativeExpressionParserRuleCall_0_0_0() { return cExpressionMultiplicativeExpressionParserRuleCall_0_0_0; }

		//(operator+=AdditiveOperator expression+=MultiplicativeExpression)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//operator+=AdditiveOperator
		public Assignment getOperatorAssignment_0_1_0() { return cOperatorAssignment_0_1_0; }

		//AdditiveOperator
		public RuleCall getOperatorAdditiveOperatorParserRuleCall_0_1_0_0() { return cOperatorAdditiveOperatorParserRuleCall_0_1_0_0; }

		//expression+=MultiplicativeExpression
		public Assignment getExpressionAssignment_0_1_1() { return cExpressionAssignment_0_1_1; }

		//MultiplicativeExpression
		public RuleCall getExpressionMultiplicativeExpressionParserRuleCall_0_1_1_0() { return cExpressionMultiplicativeExpressionParserRuleCall_0_1_1_0; }

		//string+=STRING (operator+=AdditiveOperator string+=STRING)*
		public Group getGroup_1() { return cGroup_1; }

		//string+=STRING
		public Assignment getStringAssignment_1_0() { return cStringAssignment_1_0; }

		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_1_0_0() { return cStringSTRINGTerminalRuleCall_1_0_0; }

		//(operator+=AdditiveOperator string+=STRING)*
		public Group getGroup_1_1() { return cGroup_1_1; }

		//operator+=AdditiveOperator
		public Assignment getOperatorAssignment_1_1_0() { return cOperatorAssignment_1_1_0; }

		//AdditiveOperator
		public RuleCall getOperatorAdditiveOperatorParserRuleCall_1_1_0_0() { return cOperatorAdditiveOperatorParserRuleCall_1_1_0_0; }

		//string+=STRING
		public Assignment getStringAssignment_1_1_1() { return cStringAssignment_1_1_1; }

		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_1_1_1_0() { return cStringSTRINGTerminalRuleCall_1_1_1_0; }
	}

	public class MultiplicativeExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionPowerExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorMultiplicativeOperatorParserRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionPowerExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//MultiplicativeExpression:
		//
		//	expression+=PowerExpression (operator+=MultiplicativeOperator expression+=PowerExpression)*;
		public ParserRule getRule() { return rule; }

		//expression+=PowerExpression (operator+=MultiplicativeOperator expression+=PowerExpression)*
		public Group getGroup() { return cGroup; }

		//expression+=PowerExpression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//PowerExpression
		public RuleCall getExpressionPowerExpressionParserRuleCall_0_0() { return cExpressionPowerExpressionParserRuleCall_0_0; }

		//(operator+=MultiplicativeOperator expression+=PowerExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//operator+=MultiplicativeOperator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }

		//MultiplicativeOperator
		public RuleCall getOperatorMultiplicativeOperatorParserRuleCall_1_0_0() { return cOperatorMultiplicativeOperatorParserRuleCall_1_0_0; }

		//expression+=PowerExpression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//PowerExpression
		public RuleCall getExpressionPowerExpressionParserRuleCall_1_1_0() { return cExpressionPowerExpressionParserRuleCall_1_1_0; }
	}

	public class PowerExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PowerExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cExpressionUnaryExpressionParserRuleCall_0_0 = (RuleCall)cExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cOperatorPowerOperatorParserRuleCall_1_0_0 = (RuleCall)cOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cExpressionUnaryExpressionParserRuleCall_1_1_0 = (RuleCall)cExpressionAssignment_1_1.eContents().get(0);
		
		//PowerExpression:
		//
		//	expression+=UnaryExpression (operator+=PowerOperator expression+=UnaryExpression)*;
		public ParserRule getRule() { return rule; }

		//expression+=UnaryExpression (operator+=PowerOperator expression+=UnaryExpression)*
		public Group getGroup() { return cGroup; }

		//expression+=UnaryExpression
		public Assignment getExpressionAssignment_0() { return cExpressionAssignment_0; }

		//UnaryExpression
		public RuleCall getExpressionUnaryExpressionParserRuleCall_0_0() { return cExpressionUnaryExpressionParserRuleCall_0_0; }

		//(operator+=PowerOperator expression+=UnaryExpression)*
		public Group getGroup_1() { return cGroup_1; }

		//operator+=PowerOperator
		public Assignment getOperatorAssignment_1_0() { return cOperatorAssignment_1_0; }

		//PowerOperator
		public RuleCall getOperatorPowerOperatorParserRuleCall_1_0_0() { return cOperatorPowerOperatorParserRuleCall_1_0_0; }

		//expression+=UnaryExpression
		public Assignment getExpressionAssignment_1_1() { return cExpressionAssignment_1_1; }

		//UnaryExpression
		public RuleCall getExpressionUnaryExpressionParserRuleCall_1_1_0() { return cExpressionUnaryExpressionParserRuleCall_1_1_0; }
	}

	public class UnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOperatorAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOperatorUnaryOperatorParserRuleCall_0_0_0 = (RuleCall)cOperatorAssignment_0_0.eContents().get(0);
		private final Assignment cExpressionAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cExpressionUnaryExpressionParserRuleCall_0_1_0 = (RuleCall)cExpressionAssignment_0_1.eContents().get(0);
		private final Assignment cParExpressionAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cParExpressionParExpressionParserRuleCall_1_0 = (RuleCall)cParExpressionAssignment_1.eContents().get(0);
		private final Assignment cPrimaryAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cPrimaryPrimaryParserRuleCall_2_0 = (RuleCall)cPrimaryAssignment_2.eContents().get(0);
		
		//UnaryExpression:
		//
		//	operator=UnaryOperator expression=UnaryExpression | parExpression=ParExpression | primary=Primary;
		public ParserRule getRule() { return rule; }

		//operator=UnaryOperator expression=UnaryExpression | parExpression=ParExpression | primary=Primary
		public Alternatives getAlternatives() { return cAlternatives; }

		//operator=UnaryOperator expression=UnaryExpression
		public Group getGroup_0() { return cGroup_0; }

		//operator=UnaryOperator
		public Assignment getOperatorAssignment_0_0() { return cOperatorAssignment_0_0; }

		//UnaryOperator
		public RuleCall getOperatorUnaryOperatorParserRuleCall_0_0_0() { return cOperatorUnaryOperatorParserRuleCall_0_0_0; }

		//expression=UnaryExpression
		public Assignment getExpressionAssignment_0_1() { return cExpressionAssignment_0_1; }

		//UnaryExpression
		public RuleCall getExpressionUnaryExpressionParserRuleCall_0_1_0() { return cExpressionUnaryExpressionParserRuleCall_0_1_0; }

		//parExpression=ParExpression
		public Assignment getParExpressionAssignment_1() { return cParExpressionAssignment_1; }

		//ParExpression
		public RuleCall getParExpressionParExpressionParserRuleCall_1_0() { return cParExpressionParExpressionParserRuleCall_1_0; }

		//primary=Primary
		public Assignment getPrimaryAssignment_2() { return cPrimaryAssignment_2; }

		//Primary
		public RuleCall getPrimaryPrimaryParserRuleCall_2_0() { return cPrimaryPrimaryParserRuleCall_2_0; }
	}

	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cFunctionCallAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cFunctionCallFunctionCallParserRuleCall_0_0 = (RuleCall)cFunctionCallAssignment_0.eContents().get(0);
		private final Assignment cNumberAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cNumberNUMBERParserRuleCall_1_0 = (RuleCall)cNumberAssignment_1.eContents().get(0);
		private final Assignment cSymbolAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cSymbolFullyQualifiedSymbolNameParserRuleCall_2_0 = (RuleCall)cSymbolAssignment_2.eContents().get(0);
		private final Assignment cAttributeAssignment_3 = (Assignment)cAlternatives.eContents().get(3);
		private final RuleCall cAttributeFullyQualifiedArgumentNameParserRuleCall_3_0 = (RuleCall)cAttributeAssignment_3.eContents().get(0);
		private final Assignment cVectorAssignment_4 = (Assignment)cAlternatives.eContents().get(4);
		private final RuleCall cVectorVectorParserRuleCall_4_0 = (RuleCall)cVectorAssignment_4.eContents().get(0);
		
		//Primary:
		//
		//	functionCall=FunctionCall | number=NUMBER | symbol=FullyQualifiedSymbolName | attribute=FullyQualifiedArgumentName |
		//
		//	vector=Vector;
		public ParserRule getRule() { return rule; }

		//functionCall=FunctionCall | number=NUMBER | symbol=FullyQualifiedSymbolName | attribute=FullyQualifiedArgumentName |
		//
		//vector=Vector
		public Alternatives getAlternatives() { return cAlternatives; }

		//functionCall=FunctionCall
		public Assignment getFunctionCallAssignment_0() { return cFunctionCallAssignment_0; }

		//FunctionCall
		public RuleCall getFunctionCallFunctionCallParserRuleCall_0_0() { return cFunctionCallFunctionCallParserRuleCall_0_0; }

		//number=NUMBER
		public Assignment getNumberAssignment_1() { return cNumberAssignment_1; }

		//NUMBER
		public RuleCall getNumberNUMBERParserRuleCall_1_0() { return cNumberNUMBERParserRuleCall_1_0; }

		//symbol=FullyQualifiedSymbolName
		public Assignment getSymbolAssignment_2() { return cSymbolAssignment_2; }

		//FullyQualifiedSymbolName
		public RuleCall getSymbolFullyQualifiedSymbolNameParserRuleCall_2_0() { return cSymbolFullyQualifiedSymbolNameParserRuleCall_2_0; }

		//attribute=FullyQualifiedArgumentName
		public Assignment getAttributeAssignment_3() { return cAttributeAssignment_3; }

		//FullyQualifiedArgumentName
		public RuleCall getAttributeFullyQualifiedArgumentNameParserRuleCall_3_0() { return cAttributeFullyQualifiedArgumentNameParserRuleCall_3_0; }

		//vector=Vector
		public Assignment getVectorAssignment_4() { return cVectorAssignment_4; }

		//Vector
		public RuleCall getVectorVectorParserRuleCall_4_0() { return cVectorVectorParserRuleCall_4_0; }
	}

	public class VectorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Vector");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdentifierAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdentifierCKeyword_0_0 = (Keyword)cIdentifierAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValuesAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValuesExpressionParserRuleCall_2_0 = (RuleCall)cValuesAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValuesAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValuesExpressionParserRuleCall_3_1_0 = (RuleCall)cValuesAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Vector:
		//
		//	identifier="c" "(" values+=Expression ("," values+=Expression)* ")";
		public ParserRule getRule() { return rule; }

		//identifier="c" "(" values+=Expression ("," values+=Expression)* ")"
		public Group getGroup() { return cGroup; }

		//identifier="c"
		public Assignment getIdentifierAssignment_0() { return cIdentifierAssignment_0; }

		//"c"
		public Keyword getIdentifierCKeyword_0_0() { return cIdentifierCKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//values+=Expression
		public Assignment getValuesAssignment_2() { return cValuesAssignment_2; }

		//Expression
		public RuleCall getValuesExpressionParserRuleCall_2_0() { return cValuesExpressionParserRuleCall_2_0; }

		//(=> "," values+=Expression)*
		public Group getGroup_3() { return cGroup_3; }

		//=> ","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//values+=Expression
		public Assignment getValuesAssignment_3_1() { return cValuesAssignment_3_1; }

		//Expression
		public RuleCall getValuesExpressionParserRuleCall_3_1_0() { return cValuesExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class FullyQualifiedSymbolNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FullyQualifiedSymbolName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cObjectAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final CrossReference cObjectObjectNameCrossReference_0_0_0 = (CrossReference)cObjectAssignment_0_0.eContents().get(0);
		private final RuleCall cObjectObjectNameIDTerminalRuleCall_0_0_0_1 = (RuleCall)cObjectObjectNameCrossReference_0_0_0.eContents().get(1);
		private final Keyword cDollarSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cIdentifierAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_0 = (RuleCall)cIdentifierAssignment_1.eContents().get(0);
		
		//FullyQualifiedSymbolName:
		//
		//	(object=[ObjectName] "$")? identifier= //ref VariableName, ParameterName or FunctionName
		//
		//	ID;
		public ParserRule getRule() { return rule; }

		//(object=[ObjectName] "$")? identifier= //ref VariableName, ParameterName or FunctionName
		//
		//ID
		public Group getGroup() { return cGroup; }

		//(object=[ObjectName] "$")?
		public Group getGroup_0() { return cGroup_0; }

		//object=[ObjectName]
		public Assignment getObjectAssignment_0_0() { return cObjectAssignment_0_0; }

		//[ObjectName]
		public CrossReference getObjectObjectNameCrossReference_0_0_0() { return cObjectObjectNameCrossReference_0_0_0; }

		//ID
		public RuleCall getObjectObjectNameIDTerminalRuleCall_0_0_0_1() { return cObjectObjectNameIDTerminalRuleCall_0_0_0_1; }

		//"$"
		public Keyword getDollarSignKeyword_0_1() { return cDollarSignKeyword_0_1; }

		//identifier= //ref VariableName, ParameterName or FunctionName
		//
		//ID
		public Assignment getIdentifierAssignment_1() { return cIdentifierAssignment_1; }

		////ref VariableName, ParameterName or FunctionName
		//
		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_0() { return cIdentifierIDTerminalRuleCall_1_0; }
	}

	public class FullyQualifiedArgumentNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FullyQualifiedArgumentName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParentAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParentFullyQualifiedSymbolNameParserRuleCall_0_0 = (RuleCall)cParentAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdentifierAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdentifierIDTerminalRuleCall_1_1_0 = (RuleCall)cIdentifierAssignment_1_1.eContents().get(0);
		
		//FullyQualifiedArgumentName:
		//
		//	parent=FullyQualifiedSymbolName ("." identifier+=ID)+ //ref ArgumentName
		//
		//;
		public ParserRule getRule() { return rule; }

		//parent=FullyQualifiedSymbolName ("." identifier+=ID)+ //ref ArgumentName
		public Group getGroup() { return cGroup; }

		//parent=FullyQualifiedSymbolName
		public Assignment getParentAssignment_0() { return cParentAssignment_0; }

		//FullyQualifiedSymbolName
		public RuleCall getParentFullyQualifiedSymbolNameParserRuleCall_0_0() { return cParentFullyQualifiedSymbolNameParserRuleCall_0_0; }

		//("." identifier+=ID)+
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//identifier+=ID
		public Assignment getIdentifierAssignment_1_1() { return cIdentifierAssignment_1_1; }

		//ID
		public RuleCall getIdentifierIDTerminalRuleCall_1_1_0() { return cIdentifierIDTerminalRuleCall_1_1_0; }
	}

	public class ObjectNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ObjectName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ObjectName:
		//
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class LogicalAndOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalAndOperator");
		private final Keyword cAmpersandAmpersandKeyword = (Keyword)rule.eContents().get(1);
		
		//LogicalAndOperator:
		//
		//	"&&";
		public ParserRule getRule() { return rule; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword() { return cAmpersandAmpersandKeyword; }
	}

	public class LogicalOrOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalOrOperator");
		private final Keyword cVerticalLineVerticalLineKeyword = (Keyword)rule.eContents().get(1);
		
		//LogicalOrOperator:
		//
		//	"||";
		public ParserRule getRule() { return rule; }

		//"||"
		public Keyword getVerticalLineVerticalLineKeyword() { return cVerticalLineVerticalLineKeyword; }
	}

	public class LogicalOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cLessThanSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignEqualsSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cGreaterThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cEqualsSignEqualsSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cExclamationMarkEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//LogicalOperator:
		//
		//	"<" | ">" | "<=" | ">=" | "==" | "!=";
		public ParserRule getRule() { return rule; }

		//"<" | ">" | "<=" | ">=" | "==" | "!="
		public Alternatives getAlternatives() { return cAlternatives; }

		//"<"
		public Keyword getLessThanSignKeyword_0() { return cLessThanSignKeyword_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_1() { return cGreaterThanSignKeyword_1; }

		//"<="
		public Keyword getLessThanSignEqualsSignKeyword_2() { return cLessThanSignEqualsSignKeyword_2; }

		//">="
		public Keyword getGreaterThanSignEqualsSignKeyword_3() { return cGreaterThanSignEqualsSignKeyword_3; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_4() { return cEqualsSignEqualsSignKeyword_4; }

		//"!="
		public Keyword getExclamationMarkEqualsSignKeyword_5() { return cExclamationMarkEqualsSignKeyword_5; }
	}

	public class PowerOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PowerOperator");
		private final Keyword cCircumflexAccentKeyword = (Keyword)rule.eContents().get(1);
		
		//PowerOperator:
		//
		//	"^";
		public ParserRule getRule() { return rule; }

		//"^"
		public Keyword getCircumflexAccentKeyword() { return cCircumflexAccentKeyword; }
	}

	public class MultiplicativeOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplicativeOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cAsteriskKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cSolidusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		
		//MultiplicativeOperator:
		//
		//	"*" | "/" | "%";
		public ParserRule getRule() { return rule; }

		//"*" | "/" | "%"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"*"
		public Keyword getAsteriskKeyword_0() { return cAsteriskKeyword_0; }

		//"/"
		public Keyword getSolidusKeyword_1() { return cSolidusKeyword_1; }

		//"%"
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
	}

	public class AdditiveOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AdditiveOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//AdditiveOperator:
		//
		//	"+" | "-";
		public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class UnaryOperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cPlusSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//UnaryOperator:
		//
		//	"+" | "-";
		public ParserRule getRule() { return rule; }

		//"+" | "-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"+"
		public Keyword getPlusSignKeyword_0() { return cPlusSignKeyword_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
	}

	public class NUMBERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NUMBER");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTEGERTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFLOATTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//NUMBER:
		//
		//	INTEGER | FLOAT;
		public ParserRule getRule() { return rule; }

		//INTEGER | FLOAT
		public Alternatives getAlternatives() { return cAlternatives; }

		//INTEGER
		public RuleCall getINTEGERTerminalRuleCall_0() { return cINTEGERTerminalRuleCall_0; }

		//FLOAT
		public RuleCall getFLOATTerminalRuleCall_1() { return cFLOATTerminalRuleCall_1; }
	}
	
	
	private MclElements pMcl;
	private MclObjectElements pMclObject;
	private ModelObjectElements pModelObject;
	private ParameterObjectElements pParameterObject;
	private DataObjectElements pDataObject;
	private TaskObjectElements pTaskObject;
	private TELObjectElements pTELObject;
	private ModelObjectBlockElements pModelObjectBlock;
	private IndividualVariablesBlockElements pIndividualVariablesBlock;
	private ModelPredictionBlockElements pModelPredictionBlock;
	private RandomVariableDefinitionBlockElements pRandomVariableDefinitionBlock;
	private InputVariablesBlockElements pInputVariablesBlock;
	private StructuralParametersBlockElements pStructuralParametersBlock;
	private VariabilityParametersBlockElements pVariabilityParametersBlock;
	private OutputVariablesBlockElements pOutputVariablesBlock;
	private GroupVariablesBlockElements pGroupVariablesBlock;
	private ObservationBlockElements pObservationBlock;
	private EstimationBlockElements pEstimationBlock;
	private SimulationBlockElements pSimulationBlock;
	private ParameterObjectBlockElements pParameterObjectBlock;
	private StructuralBlockElements pStructuralBlock;
	private VariabilityBlockElements pVariabilityBlock;
	private PriorParametersBlockElements pPriorParametersBlock;
	private DataObjectBlockElements pDataObjectBlock;
	private HeaderBlockElements pHeaderBlock;
	private FileBlockElements pFileBlock;
	private TaskObjectBlockElements pTaskObjectBlock;
	private ParameterBlockElements pParameterBlock;
	private DataBlockElements pDataBlock;
	private DataBlockStatementElements pDataBlockStatement;
	private IgnoreListElements pIgnoreList;
	private AcceptListElements pAcceptList;
	private DropListElements pDropList;
	private ModelBlockElements pModelBlock;
	private ModelBlockStatementElements pModelBlockStatement;
	private AddListElements pAddList;
	private RemoveListElements pRemoveList;
	private SymbolListElements pSymbolList;
	private ModelPredictionBlockStatementElements pModelPredictionBlockStatement;
	private LibraryBlockElements pLibraryBlock;
	private OdeBlockElements pOdeBlock;
	private GroupVariablesBlockStatementElements pGroupVariablesBlockStatement;
	private MixtureBlockElements pMixtureBlock;
	private VariabilityBlockStatementElements pVariabilityBlockStatement;
	private BlockBlockElements pBlockBlock;
	private DiagBlockElements pDiagBlock;
	private SameBlockElements pSameBlock;
	private FileBlockStatementElements pFileBlockStatement;
	private InlineBlockElements pInlineBlock;
	private DesignBlockElements pDesignBlock;
	private DesignBlockStatementElements pDesignBlockStatement;
	private VariableListElements pVariableList;
	private RScriptBlockElements pRScriptBlock;
	private RScriptBlockStatementElements pRScriptBlockStatement;
	private TaskFunctionDeclarationElements pTaskFunctionDeclaration;
	private TaskFunctionBodyElements pTaskFunctionBody;
	private TaskFunctionBlockElements pTaskFunctionBlock;
	private EstimateTaskElements pEstimateTask;
	private SimulateTaskElements pSimulateTask;
	private ExecuteTaskElements pExecuteTask;
	private FormalArgumentsElements pFormalArguments;
	private FunctionCallElements pFunctionCall;
	private BlockStatementElements pBlockStatement;
	private VerbatimBlockElements pVerbatimBlock;
	private TargetBlockElements pTargetBlock;
	private TargetLanguageElements pTargetLanguage;
	private TerminalRule tEXTERNAL_CODE;
	private SymbolModificationElements pSymbolModification;
	private ParameterDeclarationElements pParameterDeclaration;
	private SymbolDeclarationElements pSymbolDeclaration;
	private EnumTypeElements pEnumType;
	private MissingElements pMissing;
	private LikelyhoodElements pLikelyhood;
	private LevelTypeElements pLevelType;
	private CategoricalElements pCategorical;
	private ContinuousElements pContinuous;
	private CovariateElements pCovariate;
	private DistributionElements pDistribution;
	private AnyExpressionElements pAnyExpression;
	private ExpressionElements pExpression;
	private ListElements pList;
	private OdeListElements pOdeList;
	private RandomListElements pRandomList;
	private ArgumentsElements pArguments;
	private ArgumentElements pArgument;
	private ConditionalStatementElements pConditionalStatement;
	private BlockElements pBlock;
	private ParExpressionElements pParExpression;
	private ConditionalExpressionElements pConditionalExpression;
	private OrExpressionElements pOrExpression;
	private AndExpressionElements pAndExpression;
	private LogicalExpressionElements pLogicalExpression;
	private AdditiveExpressionElements pAdditiveExpression;
	private MultiplicativeExpressionElements pMultiplicativeExpression;
	private PowerExpressionElements pPowerExpression;
	private UnaryExpressionElements pUnaryExpression;
	private PrimaryElements pPrimary;
	private VectorElements pVector;
	private FullyQualifiedSymbolNameElements pFullyQualifiedSymbolName;
	private FullyQualifiedArgumentNameElements pFullyQualifiedArgumentName;
	private ObjectNameElements pObjectName;
	private LogicalAndOperatorElements pLogicalAndOperator;
	private LogicalOrOperatorElements pLogicalOrOperator;
	private LogicalOperatorElements pLogicalOperator;
	private PowerOperatorElements pPowerOperator;
	private MultiplicativeOperatorElements pMultiplicativeOperator;
	private AdditiveOperatorElements pAdditiveOperator;
	private UnaryOperatorElements pUnaryOperator;
	private NUMBERElements pNUMBER;
	private TerminalRule tSTRING;
	private TerminalRule tESCAPE_SEQUENCE;
	private TerminalRule tOCTAL_ESCAPE;
	private TerminalRule tUNICODE_ESCAPE;
	private TerminalRule tHEXDIGIT;
	private TerminalRule tBOOLEAN;
	private TerminalRule tINTEGER;
	private TerminalRule tFLOAT;
	private TerminalRule tEXPONENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tML_COMMENT;
	private TerminalRule tBEGIN;
	private TerminalRule tEND;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public MdlGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.ddmore.mdl.Mdl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Mcl hidden(WS, ML_COMMENT, SL_COMMENT):
	//
	//	objects+=MclObject*;
	public MclElements getMclAccess() {
		return (pMcl != null) ? pMcl : (pMcl = new MclElements());
	}
	
	public ParserRule getMclRule() {
		return getMclAccess().getRule();
	}

	//MclObject:
	//
	//	modelObject=ModelObject | parameterObject=ParameterObject | dataObject=DataObject | taskObject=TaskObject |
	//
	//	telObject=TELObject;
	public MclObjectElements getMclObjectAccess() {
		return (pMclObject != null) ? pMclObject : (pMclObject = new MclObjectElements());
	}
	
	public ParserRule getMclObjectRule() {
		return getMclObjectAccess().getRule();
	}

	//ModelObject:
	//
	//	identifier=ObjectName "=" "mdlobj" BEGIN blocks+=ModelObjectBlock* END;
	public ModelObjectElements getModelObjectAccess() {
		return (pModelObject != null) ? pModelObject : (pModelObject = new ModelObjectElements());
	}
	
	public ParserRule getModelObjectRule() {
		return getModelObjectAccess().getRule();
	}

	//ParameterObject:
	//
	//	identifier=ObjectName "=" "parobj" BEGIN blocks+=ParameterObjectBlock* END;
	public ParameterObjectElements getParameterObjectAccess() {
		return (pParameterObject != null) ? pParameterObject : (pParameterObject = new ParameterObjectElements());
	}
	
	public ParserRule getParameterObjectRule() {
		return getParameterObjectAccess().getRule();
	}

	//DataObject:
	//
	//	identifier=ObjectName "=" "dataobj" BEGIN blocks+=DataObjectBlock* END;
	public DataObjectElements getDataObjectAccess() {
		return (pDataObject != null) ? pDataObject : (pDataObject = new DataObjectElements());
	}
	
	public ParserRule getDataObjectRule() {
		return getDataObjectAccess().getRule();
	}

	//TaskObject:
	//
	//	identifier=ObjectName "=" "taskobj" BEGIN blocks+=TaskObjectBlock* END;
	public TaskObjectElements getTaskObjectAccess() {
		return (pTaskObject != null) ? pTaskObject : (pTaskObject = new TaskObjectElements());
	}
	
	public ParserRule getTaskObjectRule() {
		return getTaskObjectAccess().getRule();
	}

	//TELObject:
	//
	//	identifier=ObjectName "=" "telobj" BEGIN statements+=BlockStatement* END;
	public TELObjectElements getTELObjectAccess() {
		return (pTELObject != null) ? pTELObject : (pTELObject = new TELObjectElements());
	}
	
	public ParserRule getTELObjectRule() {
		return getTELObjectAccess().getRule();
	}

	////////////////////////////////////////////////////////////
	//
	////Model Object
	//
	////////////////////////////////////////////////////////////
	//
	//ModelObjectBlock:
	//
	//	individualVariablesBlock=IndividualVariablesBlock | modelPredictionBlock=ModelPredictionBlock |
	//
	//	randomVariableDefinitionBlock=RandomVariableDefinitionBlock | inputVariablesBlock=InputVariablesBlock |
	//
	//	structuralParametersBlock=StructuralParametersBlock | variabilityParametersBlock=VariabilityParametersBlock |
	//
	//	outputVariablesBlock=OutputVariablesBlock | groupVariablesBlock=GroupVariablesBlock |
	//
	//	observationBlock=ObservationBlock | estimationBlock=EstimationBlock | simulationBlock=SimulationBlock |
	//
	//	verbatimBlock=VerbatimBlock;
	public ModelObjectBlockElements getModelObjectBlockAccess() {
		return (pModelObjectBlock != null) ? pModelObjectBlock : (pModelObjectBlock = new ModelObjectBlockElements());
	}
	
	public ParserRule getModelObjectBlockRule() {
		return getModelObjectBlockAccess().getRule();
	}

	//IndividualVariablesBlock:
	//
	//	identifier="INDIVIDUAL_VARIABLES" BEGIN statements+=BlockStatement* //new Variable +
	//
	//	END;
	public IndividualVariablesBlockElements getIndividualVariablesBlockAccess() {
		return (pIndividualVariablesBlock != null) ? pIndividualVariablesBlock : (pIndividualVariablesBlock = new IndividualVariablesBlockElements());
	}
	
	public ParserRule getIndividualVariablesBlockRule() {
		return getIndividualVariablesBlockAccess().getRule();
	}

	//ModelPredictionBlock:
	//
	//	identifier="MODEL_PREDICTION" BEGIN statements+=ModelPredictionBlockStatement* END;
	public ModelPredictionBlockElements getModelPredictionBlockAccess() {
		return (pModelPredictionBlock != null) ? pModelPredictionBlock : (pModelPredictionBlock = new ModelPredictionBlockElements());
	}
	
	public ParserRule getModelPredictionBlockRule() {
		return getModelPredictionBlockAccess().getRule();
	}

	//RandomVariableDefinitionBlock:
	//
	//	identifier="RANDOM_VARIABLE_DEFINITION" BEGIN variables+=SymbolDeclaration* //new Variable +
	//
	//	END;
	public RandomVariableDefinitionBlockElements getRandomVariableDefinitionBlockAccess() {
		return (pRandomVariableDefinitionBlock != null) ? pRandomVariableDefinitionBlock : (pRandomVariableDefinitionBlock = new RandomVariableDefinitionBlockElements());
	}
	
	public ParserRule getRandomVariableDefinitionBlockRule() {
		return getRandomVariableDefinitionBlockAccess().getRule();
	}

	//InputVariablesBlock:
	//
	//	indentifier="INPUT_VARIABLES" BEGIN variables+=SymbolDeclaration* //new Variable +
	//
	//	END;
	public InputVariablesBlockElements getInputVariablesBlockAccess() {
		return (pInputVariablesBlock != null) ? pInputVariablesBlock : (pInputVariablesBlock = new InputVariablesBlockElements());
	}
	
	public ParserRule getInputVariablesBlockRule() {
		return getInputVariablesBlockAccess().getRule();
	}

	//StructuralParametersBlock:
	//
	//	identifier="STRUCTURAL_PARAMETERS" BEGIN parameters+=FullyQualifiedSymbolName* //Ref to Parameter +
	//
	//	END;
	public StructuralParametersBlockElements getStructuralParametersBlockAccess() {
		return (pStructuralParametersBlock != null) ? pStructuralParametersBlock : (pStructuralParametersBlock = new StructuralParametersBlockElements());
	}
	
	public ParserRule getStructuralParametersBlockRule() {
		return getStructuralParametersBlockAccess().getRule();
	}

	//VariabilityParametersBlock:
	//
	//	identifier="VARIABILITY_PARAMETERS" BEGIN parameters+=FullyQualifiedSymbolName* //Ref to Parameter +
	//
	//	END;
	public VariabilityParametersBlockElements getVariabilityParametersBlockAccess() {
		return (pVariabilityParametersBlock != null) ? pVariabilityParametersBlock : (pVariabilityParametersBlock = new VariabilityParametersBlockElements());
	}
	
	public ParserRule getVariabilityParametersBlockRule() {
		return getVariabilityParametersBlockAccess().getRule();
	}

	//OutputVariablesBlock:
	//
	//	identifier="OUTPUT_VARIABLES" BEGIN variables+=FullyQualifiedSymbolName* //Ref to VariableName +
	//
	//	END;
	public OutputVariablesBlockElements getOutputVariablesBlockAccess() {
		return (pOutputVariablesBlock != null) ? pOutputVariablesBlock : (pOutputVariablesBlock = new OutputVariablesBlockElements());
	}
	
	public ParserRule getOutputVariablesBlockRule() {
		return getOutputVariablesBlockAccess().getRule();
	}

	//GroupVariablesBlock:
	//
	//	identifier="GROUP_VARIABLES" BEGIN statements+=GroupVariablesBlockStatement* END;
	public GroupVariablesBlockElements getGroupVariablesBlockAccess() {
		return (pGroupVariablesBlock != null) ? pGroupVariablesBlock : (pGroupVariablesBlock = new GroupVariablesBlockElements());
	}
	
	public ParserRule getGroupVariablesBlockRule() {
		return getGroupVariablesBlockAccess().getRule();
	}

	//ObservationBlock:
	//
	//	identifier="OBSERVATION" BEGIN statements+=BlockStatement* //new Variable +
	//
	//	END;
	public ObservationBlockElements getObservationBlockAccess() {
		return (pObservationBlock != null) ? pObservationBlock : (pObservationBlock = new ObservationBlockElements());
	}
	
	public ParserRule getObservationBlockRule() {
		return getObservationBlockAccess().getRule();
	}

	//EstimationBlock:
	//
	//	identifier="ESTIMATION" BEGIN statements+=BlockStatement* //new Variable +
	//
	//	END;
	public EstimationBlockElements getEstimationBlockAccess() {
		return (pEstimationBlock != null) ? pEstimationBlock : (pEstimationBlock = new EstimationBlockElements());
	}
	
	public ParserRule getEstimationBlockRule() {
		return getEstimationBlockAccess().getRule();
	}

	//SimulationBlock:
	//
	//	identifier="SIMULATION" BEGIN statements+=BlockStatement* //new Variable +
	//
	//	END;
	public SimulationBlockElements getSimulationBlockAccess() {
		return (pSimulationBlock != null) ? pSimulationBlock : (pSimulationBlock = new SimulationBlockElements());
	}
	
	public ParserRule getSimulationBlockRule() {
		return getSimulationBlockAccess().getRule();
	}

	////////////////////////////////////////////////////////////
	//
	////Parameter Object
	//
	////////////////////////////////////////////////////////////
	//
	//ParameterObjectBlock:
	//
	//	structuralBlock=StructuralBlock | variabilityBlock=VariabilityBlock | priorBlock=PriorParametersBlock |
	//
	//	verbatimBlock=VerbatimBlock;
	public ParameterObjectBlockElements getParameterObjectBlockAccess() {
		return (pParameterObjectBlock != null) ? pParameterObjectBlock : (pParameterObjectBlock = new ParameterObjectBlockElements());
	}
	
	public ParserRule getParameterObjectBlockRule() {
		return getParameterObjectBlockAccess().getRule();
	}

	//StructuralBlock:
	//
	//	identifier="STRUCTURAL" BEGIN parameters+=ParameterDeclaration* //new Parameter +
	//
	//	END;
	public StructuralBlockElements getStructuralBlockAccess() {
		return (pStructuralBlock != null) ? pStructuralBlock : (pStructuralBlock = new StructuralBlockElements());
	}
	
	public ParserRule getStructuralBlockRule() {
		return getStructuralBlockAccess().getRule();
	}

	//VariabilityBlock:
	//
	//	identifier="VARIABILITY" BEGIN statements+=VariabilityBlockStatement* END;
	public VariabilityBlockElements getVariabilityBlockAccess() {
		return (pVariabilityBlock != null) ? pVariabilityBlock : (pVariabilityBlock = new VariabilityBlockElements());
	}
	
	public ParserRule getVariabilityBlockRule() {
		return getVariabilityBlockAccess().getRule();
	}

	//PriorParametersBlock:
	//
	//	identifier="PRIOR_PARAMETERS" BEGIN statements+=BlockStatement* //new Parameter +
	//
	//	END;
	public PriorParametersBlockElements getPriorParametersBlockAccess() {
		return (pPriorParametersBlock != null) ? pPriorParametersBlock : (pPriorParametersBlock = new PriorParametersBlockElements());
	}
	
	public ParserRule getPriorParametersBlockRule() {
		return getPriorParametersBlockAccess().getRule();
	}

	//DataObjectBlock:
	//
	//	headerBlock=HeaderBlock | fileBlock=FileBlock | verbatimBlock=VerbatimBlock;
	public DataObjectBlockElements getDataObjectBlockAccess() {
		return (pDataObjectBlock != null) ? pDataObjectBlock : (pDataObjectBlock = new DataObjectBlockElements());
	}
	
	public ParserRule getDataObjectBlockRule() {
		return getDataObjectBlockAccess().getRule();
	}

	//HeaderBlock:
	//
	//	identifier="HEADER" BEGIN variables+=SymbolModification* //ref to Variable
	//
	//	END;
	public HeaderBlockElements getHeaderBlockAccess() {
		return (pHeaderBlock != null) ? pHeaderBlock : (pHeaderBlock = new HeaderBlockElements());
	}
	
	public ParserRule getHeaderBlockRule() {
		return getHeaderBlockAccess().getRule();
	}

	//FileBlock:
	//
	//	identifier="FILE" BEGIN statements+=FileBlockStatement* END;
	public FileBlockElements getFileBlockAccess() {
		return (pFileBlock != null) ? pFileBlock : (pFileBlock = new FileBlockElements());
	}
	
	public ParserRule getFileBlockRule() {
		return getFileBlockAccess().getRule();
	}

	//TaskObjectBlock:
	//
	//	functionDeclaration=TaskFunctionDeclaration | parameterBlock=ParameterBlock | dataBlock=DataBlock |
	//
	//	modelBlock=ModelBlock | verbatimBlock=VerbatimBlock;
	public TaskObjectBlockElements getTaskObjectBlockAccess() {
		return (pTaskObjectBlock != null) ? pTaskObjectBlock : (pTaskObjectBlock = new TaskObjectBlockElements());
	}
	
	public ParserRule getTaskObjectBlockRule() {
		return getTaskObjectBlockAccess().getRule();
	}

	//ParameterBlock:
	//
	//	identifier="PARAMETER" BEGIN parameters+=SymbolModification* //Ref to parameter
	//
	//	END;
	public ParameterBlockElements getParameterBlockAccess() {
		return (pParameterBlock != null) ? pParameterBlock : (pParameterBlock = new ParameterBlockElements());
	}
	
	public ParserRule getParameterBlockRule() {
		return getParameterBlockAccess().getRule();
	}

	//DataBlock:
	//
	//	identifier="DATA" BEGIN statements+=DataBlockStatement* END;
	public DataBlockElements getDataBlockAccess() {
		return (pDataBlock != null) ? pDataBlock : (pDataBlock = new DataBlockElements());
	}
	
	public ParserRule getDataBlockRule() {
		return getDataBlockAccess().getRule();
	}

	//DataBlockStatement:
	//
	//	ignoreList=IgnoreList | acceptList=AcceptList | dropList=DropList;
	public DataBlockStatementElements getDataBlockStatementAccess() {
		return (pDataBlockStatement != null) ? pDataBlockStatement : (pDataBlockStatement = new DataBlockStatementElements());
	}
	
	public ParserRule getDataBlockStatementRule() {
		return getDataBlockStatementAccess().getRule();
	}

	//IgnoreList:
	//
	//	identifier="IGNORE" "=" "if" "(" expression=OrExpression ")";
	public IgnoreListElements getIgnoreListAccess() {
		return (pIgnoreList != null) ? pIgnoreList : (pIgnoreList = new IgnoreListElements());
	}
	
	public ParserRule getIgnoreListRule() {
		return getIgnoreListAccess().getRule();
	}

	//AcceptList:
	//
	//	identifier="ACCEPT" "=" "if" "(" expression=AndExpression ")";
	public AcceptListElements getAcceptListAccess() {
		return (pAcceptList != null) ? pAcceptList : (pAcceptList = new AcceptListElements());
	}
	
	public ParserRule getAcceptListRule() {
		return getAcceptListAccess().getRule();
	}

	//DropList:
	//
	//	identifier="DROP" "=" list=SymbolList;
	public DropListElements getDropListAccess() {
		return (pDropList != null) ? pDropList : (pDropList = new DropListElements());
	}
	
	public ParserRule getDropListRule() {
		return getDropListAccess().getRule();
	}

	//ModelBlock:
	//
	//	identifier="MODEL" BEGIN statements+=ModelBlockStatement* END;
	public ModelBlockElements getModelBlockAccess() {
		return (pModelBlock != null) ? pModelBlock : (pModelBlock = new ModelBlockElements());
	}
	
	public ParserRule getModelBlockRule() {
		return getModelBlockAccess().getRule();
	}

	//ModelBlockStatement:
	//
	//	statement=BlockStatement | addList=AddList | removeList=RemoveList;
	public ModelBlockStatementElements getModelBlockStatementAccess() {
		return (pModelBlockStatement != null) ? pModelBlockStatement : (pModelBlockStatement = new ModelBlockStatementElements());
	}
	
	public ParserRule getModelBlockStatementRule() {
		return getModelBlockStatementAccess().getRule();
	}

	//AddList:
	//
	//	"ADD" "=" list=SymbolList;
	public AddListElements getAddListAccess() {
		return (pAddList != null) ? pAddList : (pAddList = new AddListElements());
	}
	
	public ParserRule getAddListRule() {
		return getAddListAccess().getRule();
	}

	//RemoveList:
	//
	//	"REMOVE" "=" list=SymbolList;
	public RemoveListElements getRemoveListAccess() {
		return (pRemoveList != null) ? pRemoveList : (pRemoveList = new RemoveListElements());
	}
	
	public ParserRule getRemoveListRule() {
		return getRemoveListAccess().getRule();
	}

	//SymbolList:
	//
	//	"list" "(" symbols+=FullyQualifiedSymbolName+ ")";
	public SymbolListElements getSymbolListAccess() {
		return (pSymbolList != null) ? pSymbolList : (pSymbolList = new SymbolListElements());
	}
	
	public ParserRule getSymbolListRule() {
		return getSymbolListAccess().getRule();
	}

	//ModelPredictionBlockStatement:
	//
	//	statement=BlockStatement //new Variable
	//
	//	| odeBlock=OdeBlock | libraryBlock=LibraryBlock;
	public ModelPredictionBlockStatementElements getModelPredictionBlockStatementAccess() {
		return (pModelPredictionBlockStatement != null) ? pModelPredictionBlockStatement : (pModelPredictionBlockStatement = new ModelPredictionBlockStatementElements());
	}
	
	public ParserRule getModelPredictionBlockStatementRule() {
		return getModelPredictionBlockStatementAccess().getRule();
	}

	//LibraryBlock:
	//
	//	identifier="LIBRARY" BEGIN statements+=BlockStatement* //Properties
	//
	//	END;
	public LibraryBlockElements getLibraryBlockAccess() {
		return (pLibraryBlock != null) ? pLibraryBlock : (pLibraryBlock = new LibraryBlockElements());
	}
	
	public ParserRule getLibraryBlockRule() {
		return getLibraryBlockAccess().getRule();
	}

	//OdeBlock:
	//
	//	identifier="ODE" BEGIN statements+=BlockStatement* //new Variable
	//
	//	END;
	public OdeBlockElements getOdeBlockAccess() {
		return (pOdeBlock != null) ? pOdeBlock : (pOdeBlock = new OdeBlockElements());
	}
	
	public ParserRule getOdeBlockRule() {
		return getOdeBlockAccess().getRule();
	}

	//GroupVariablesBlockStatement:
	//
	//	statement=BlockStatement //new Variable
	//
	//	| mixtureBlock=MixtureBlock;
	public GroupVariablesBlockStatementElements getGroupVariablesBlockStatementAccess() {
		return (pGroupVariablesBlockStatement != null) ? pGroupVariablesBlockStatement : (pGroupVariablesBlockStatement = new GroupVariablesBlockStatementElements());
	}
	
	public ParserRule getGroupVariablesBlockStatementRule() {
		return getGroupVariablesBlockStatementAccess().getRule();
	}

	//MixtureBlock:
	//
	//	identifier="MIXTURE" BEGIN statements+=BlockStatement* //new Variable
	//
	//	END;
	public MixtureBlockElements getMixtureBlockAccess() {
		return (pMixtureBlock != null) ? pMixtureBlock : (pMixtureBlock = new MixtureBlockElements());
	}
	
	public ParserRule getMixtureBlockRule() {
		return getMixtureBlockAccess().getRule();
	}

	//VariabilityBlockStatement:
	//
	//	parameter=ParameterDeclaration | blockBlock=BlockBlock | diagBlock=DiagBlock | sameBlock=SameBlock;
	public VariabilityBlockStatementElements getVariabilityBlockStatementAccess() {
		return (pVariabilityBlockStatement != null) ? pVariabilityBlockStatement : (pVariabilityBlockStatement = new VariabilityBlockStatementElements());
	}
	
	public ParserRule getVariabilityBlockStatementRule() {
		return getVariabilityBlockStatementAccess().getRule();
	}

	////Rename to Matrix!
	//
	//BlockBlock:
	//
	//	identifier="block" "(" arguments=Arguments ")" (BEGIN parameters=Arguments END)? //new Parameter
	//
	//;
	public BlockBlockElements getBlockBlockAccess() {
		return (pBlockBlock != null) ? pBlockBlock : (pBlockBlock = new BlockBlockElements());
	}
	
	public ParserRule getBlockBlockRule() {
		return getBlockBlockAccess().getRule();
	}

	//DiagBlock:
	//
	//	identifier="diag" "(" arguments=Arguments ")" (BEGIN parameters=Arguments END)? //new Parameter
	//
	//;
	public DiagBlockElements getDiagBlockAccess() {
		return (pDiagBlock != null) ? pDiagBlock : (pDiagBlock = new DiagBlockElements());
	}
	
	public ParserRule getDiagBlockRule() {
		return getDiagBlockAccess().getRule();
	}

	//SameBlock:
	//
	//	identifier="same" "(" arguments=Arguments ")" (BEGIN parameters=Arguments END)? //new Parameter
	//
	//;
	public SameBlockElements getSameBlockAccess() {
		return (pSameBlock != null) ? pSameBlock : (pSameBlock = new SameBlockElements());
	}
	
	public ParserRule getSameBlockRule() {
		return getSameBlockAccess().getRule();
	}

	////////////////////////////////////////////////////////////
	//
	////Data Object
	//
	////////////////////////////////////////////////////////////
	//
	//FileBlockStatement:
	//
	//	variable=SymbolDeclaration //new VariableName which can be only list
	//
	//	| inlineBlock=InlineBlock | designBlock=DesignBlock | rscriptBlock=RScriptBlock;
	public FileBlockStatementElements getFileBlockStatementAccess() {
		return (pFileBlockStatement != null) ? pFileBlockStatement : (pFileBlockStatement = new FileBlockStatementElements());
	}
	
	public ParserRule getFileBlockStatementRule() {
		return getFileBlockStatementAccess().getRule();
	}

	//InlineBlock:
	//
	//	identifier="INLINE" BEGIN variables+=FullyQualifiedSymbolName* values+=(NUMBER | ".")* //Ref to VaraibleName
	//
	//	END;
	public InlineBlockElements getInlineBlockAccess() {
		return (pInlineBlock != null) ? pInlineBlock : (pInlineBlock = new InlineBlockElements());
	}
	
	public ParserRule getInlineBlockRule() {
		return getInlineBlockAccess().getRule();
	}

	//DesignBlock:
	//
	//	identifier="DESIGN" BEGIN statements+=DesignBlockStatement* END;
	public DesignBlockElements getDesignBlockAccess() {
		return (pDesignBlock != null) ? pDesignBlock : (pDesignBlock = new DesignBlockElements());
	}
	
	public ParserRule getDesignBlockRule() {
		return getDesignBlockAccess().getRule();
	}

	//DesignBlockStatement:
	//
	//	identifier=FullyQualifiedSymbolName arguments=VariableList? "=" expression= //Ref to VaraibleName
	//
	//	AnyExpression;
	public DesignBlockStatementElements getDesignBlockStatementAccess() {
		return (pDesignBlockStatement != null) ? pDesignBlockStatement : (pDesignBlockStatement = new DesignBlockStatementElements());
	}
	
	public ParserRule getDesignBlockStatementRule() {
		return getDesignBlockStatementAccess().getRule();
	}

	//VariableList:
	//
	//	"[" identifiers+=FullyQualifiedSymbolName ("," identifiers+=FullyQualifiedSymbolName)* //Ref to VaraibleName
	//
	//	"]";
	public VariableListElements getVariableListAccess() {
		return (pVariableList != null) ? pVariableList : (pVariableList = new VariableListElements());
	}
	
	public ParserRule getVariableListRule() {
		return getVariableListAccess().getRule();
	}

	//RScriptBlock:
	//
	//	identifier="RSCRIPT" BEGIN variables+=RScriptBlockStatement* END;
	public RScriptBlockElements getRScriptBlockAccess() {
		return (pRScriptBlock != null) ? pRScriptBlock : (pRScriptBlock = new RScriptBlockElements());
	}
	
	public ParserRule getRScriptBlockRule() {
		return getRScriptBlockAccess().getRule();
	}

	//RScriptBlockStatement:
	//
	//	identifier=ID "=" (value=STRING // new VariableName
	//
	//	| object=ObjectName);
	public RScriptBlockStatementElements getRScriptBlockStatementAccess() {
		return (pRScriptBlockStatement != null) ? pRScriptBlockStatement : (pRScriptBlockStatement = new RScriptBlockStatementElements());
	}
	
	public ParserRule getRScriptBlockStatementRule() {
		return getRScriptBlockStatementAccess().getRule();
	}

	//TaskFunctionDeclaration:
	//
	//	identifier=ID "=" //new FunctionName
	//
	//	"function" "(" formalArguments=FormalArguments ")" functionBody=TaskFunctionBody;
	public TaskFunctionDeclarationElements getTaskFunctionDeclarationAccess() {
		return (pTaskFunctionDeclaration != null) ? pTaskFunctionDeclaration : (pTaskFunctionDeclaration = new TaskFunctionDeclarationElements());
	}
	
	public ParserRule getTaskFunctionDeclarationRule() {
		return getTaskFunctionDeclarationAccess().getRule();
	}

	//TaskFunctionBody:
	//
	//	{TaskFunctionBody} BEGIN blocks+=TaskFunctionBlock* END;
	public TaskFunctionBodyElements getTaskFunctionBodyAccess() {
		return (pTaskFunctionBody != null) ? pTaskFunctionBody : (pTaskFunctionBody = new TaskFunctionBodyElements());
	}
	
	public ParserRule getTaskFunctionBodyRule() {
		return getTaskFunctionBodyAccess().getRule();
	}

	//TaskFunctionBlock:
	//
	//	estimateBlock=EstimateTask | simulateBlock=SimulateTask | executeBlock=ExecuteTask;
	public TaskFunctionBlockElements getTaskFunctionBlockAccess() {
		return (pTaskFunctionBlock != null) ? pTaskFunctionBlock : (pTaskFunctionBlock = new TaskFunctionBlockElements());
	}
	
	public ParserRule getTaskFunctionBlockRule() {
		return getTaskFunctionBlockAccess().getRule();
	}

	//EstimateTask:
	//
	//	identifier="ESTIMATE" BEGIN statements+=BlockStatement* //Properties
	//
	//	END;
	public EstimateTaskElements getEstimateTaskAccess() {
		return (pEstimateTask != null) ? pEstimateTask : (pEstimateTask = new EstimateTaskElements());
	}
	
	public ParserRule getEstimateTaskRule() {
		return getEstimateTaskAccess().getRule();
	}

	//SimulateTask:
	//
	//	identifier="SIMULATE" BEGIN statements+=BlockStatement* //Properties
	//
	//	END;
	public SimulateTaskElements getSimulateTaskAccess() {
		return (pSimulateTask != null) ? pSimulateTask : (pSimulateTask = new SimulateTaskElements());
	}
	
	public ParserRule getSimulateTaskRule() {
		return getSimulateTaskAccess().getRule();
	}

	//ExecuteTask:
	//
	//	identifier="EXECUTE" BEGIN statements+=BlockStatement* //Properties
	//
	//	END;
	public ExecuteTaskElements getExecuteTaskAccess() {
		return (pExecuteTask != null) ? pExecuteTask : (pExecuteTask = new ExecuteTaskElements());
	}
	
	public ParserRule getExecuteTaskRule() {
		return getExecuteTaskAccess().getRule();
	}

	////////////////////////////////////////////////////////////
	//
	////Common
	//
	////////////////////////////////////////////////////////////
	//
	//FormalArguments:
	//
	//	identifiers+=ID ("," identifiers+=ID)*;
	public FormalArgumentsElements getFormalArgumentsAccess() {
		return (pFormalArguments != null) ? pFormalArguments : (pFormalArguments = new FormalArgumentsElements());
	}
	
	public ParserRule getFormalArgumentsRule() {
		return getFormalArgumentsAccess().getRule();
	}

	//FunctionCall:
	//
	//	identifier=FullyQualifiedSymbolName "(" arguments=Arguments ")";
	public FunctionCallElements getFunctionCallAccess() {
		return (pFunctionCall != null) ? pFunctionCall : (pFunctionCall = new FunctionCallElements());
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//BlockStatement:
	//
	//	symbol=SymbolDeclaration //VariableName or PropertyName
	//
	//	| functionCall=FunctionCall | statement=ConditionalStatement | verbatimBlock=VerbatimBlock;
	public BlockStatementElements getBlockStatementAccess() {
		return (pBlockStatement != null) ? pBlockStatement : (pBlockStatement = new BlockStatementElements());
	}
	
	public ParserRule getBlockStatementRule() {
		return getBlockStatementAccess().getRule();
	}

	//VerbatimBlock:
	//
	//	identifier="TARGET_CODE" BEGIN (block=TargetBlock | externalCode=EXTERNAL_CODE) END;
	public VerbatimBlockElements getVerbatimBlockAccess() {
		return (pVerbatimBlock != null) ? pVerbatimBlock : (pVerbatimBlock = new VerbatimBlockElements());
	}
	
	public ParserRule getVerbatimBlockRule() {
		return getVerbatimBlockAccess().getRule();
	}

	//TargetBlock:
	//
	//	identifier=TargetLanguage ("(" arguments=Arguments ")")? BEGIN externalCode=EXTERNAL_CODE END;
	public TargetBlockElements getTargetBlockAccess() {
		return (pTargetBlock != null) ? pTargetBlock : (pTargetBlock = new TargetBlockElements());
	}
	
	public ParserRule getTargetBlockRule() {
		return getTargetBlockAccess().getRule();
	}

	//TargetLanguage:
	//
	//	"NMTRAN_CODE" | "MLXTRAN_CODE" | "PML_CODE" | "BUGS_CODE" | "R_CODE" | "MATLAB_CODE";
	public TargetLanguageElements getTargetLanguageAccess() {
		return (pTargetLanguage != null) ? pTargetLanguage : (pTargetLanguage = new TargetLanguageElements());
	}
	
	public ParserRule getTargetLanguageRule() {
		return getTargetLanguageAccess().getRule();
	}

	//terminal EXTERNAL_CODE:
	//
	//	"***"->"***";
	public TerminalRule getEXTERNAL_CODERule() {
		return (tEXTERNAL_CODE != null) ? tEXTERNAL_CODE : (tEXTERNAL_CODE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXTERNAL_CODE"));
	} 

	//SymbolModification:
	//
	//	identifier=FullyQualifiedSymbolName ("=" list=List)? //Ref to ParameterName
	//
	//;
	public SymbolModificationElements getSymbolModificationAccess() {
		return (pSymbolModification != null) ? pSymbolModification : (pSymbolModification = new SymbolModificationElements());
	}
	
	public ParserRule getSymbolModificationRule() {
		return getSymbolModificationAccess().getRule();
	}

	//ParameterDeclaration:
	//
	//	identifier=ID ("=" list=List) //new ParameterName
	//
	//;
	public ParameterDeclarationElements getParameterDeclarationAccess() {
		return (pParameterDeclaration != null) ? pParameterDeclaration : (pParameterDeclaration = new ParameterDeclarationElements());
	}
	
	public ParserRule getParameterDeclarationRule() {
		return getParameterDeclarationAccess().getRule();
	}

	////new VariableName, new PropertyName
	//
	////special function, new VariableName
	//
	//SymbolDeclaration:
	//
	//	identifier=ID (("=" expression=AnyExpression)? | randomList=RandomList) | function=ID "(" identifier=ID ")"
	//
	//	randomList=RandomList;
	public SymbolDeclarationElements getSymbolDeclarationAccess() {
		return (pSymbolDeclaration != null) ? pSymbolDeclaration : (pSymbolDeclaration = new SymbolDeclarationElements());
	}
	
	public ParserRule getSymbolDeclarationRule() {
		return getSymbolDeclarationAccess().getRule();
	}

	//EnumType:
	//
	//	categorical=Categorical | continuous=Continuous | covariate=Covariate | distribution=Distribution | level=LevelType |
	//
	//	likelyhood=Likelyhood | missing=Missing;
	public EnumTypeElements getEnumTypeAccess() {
		return (pEnumType != null) ? pEnumType : (pEnumType = new EnumTypeElements());
	}
	
	public ParserRule getEnumTypeRule() {
		return getEnumTypeAccess().getRule();
	}

	//Missing:
	//
	//	identifier="MISSING";
	public MissingElements getMissingAccess() {
		return (pMissing != null) ? pMissing : (pMissing = new MissingElements());
	}
	
	public ParserRule getMissingRule() {
		return getMissingAccess().getRule();
	}

	//Likelyhood:
	//
	//	identifier="LIKELIHOOD";
	public LikelyhoodElements getLikelyhoodAccess() {
		return (pLikelyhood != null) ? pLikelyhood : (pLikelyhood = new LikelyhoodElements());
	}
	
	public ParserRule getLikelyhoodRule() {
		return getLikelyhoodAccess().getRule();
	}

	//LevelType:
	//
	//	mdv="mdv" | id="id" | dv="dv" | idv= //Independent Variable
	//
	//	"idv";
	public LevelTypeElements getLevelTypeAccess() {
		return (pLevelType != null) ? pLevelType : (pLevelType = new LevelTypeElements());
	}
	
	public ParserRule getLevelTypeRule() {
		return getLevelTypeAccess().getRule();
	}

	//Categorical:
	//
	//	identifier="categorical" ("(" arguments=Arguments ")")?;
	public CategoricalElements getCategoricalAccess() {
		return (pCategorical != null) ? pCategorical : (pCategorical = new CategoricalElements());
	}
	
	public ParserRule getCategoricalRule() {
		return getCategoricalAccess().getRule();
	}

	//Continuous:
	//
	//	identifier="continuous";
	public ContinuousElements getContinuousAccess() {
		return (pContinuous != null) ? pContinuous : (pContinuous = new ContinuousElements());
	}
	
	public ParserRule getContinuousRule() {
		return getContinuousAccess().getRule();
	}

	//Covariate:
	//
	//	identifier="covariate";
	public CovariateElements getCovariateAccess() {
		return (pCovariate != null) ? pCovariate : (pCovariate = new CovariateElements());
	}
	
	public ParserRule getCovariateRule() {
		return getCovariateAccess().getRule();
	}

	//Distribution:
	//
	//	{Distribution} normal="Normal" | binomial="Binomial" | poisson="Poisson" | student_t="Student_T" |
	//
	//	mvnormal="MVNormal";
	public DistributionElements getDistributionAccess() {
		return (pDistribution != null) ? pDistribution : (pDistribution = new DistributionElements());
	}
	
	public ParserRule getDistributionRule() {
		return getDistributionAccess().getRule();
	}

	//AnyExpression:
	//
	//	expression=Expression | list=List | odeList=OdeList | type=EnumType;
	public AnyExpressionElements getAnyExpressionAccess() {
		return (pAnyExpression != null) ? pAnyExpression : (pAnyExpression = new AnyExpressionElements());
	}
	
	public ParserRule getAnyExpressionRule() {
		return getAnyExpressionAccess().getRule();
	}

	//Expression:
	//
	//	conditionalExpression=ConditionalExpression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//List:
	//
	//	"list" "(" arguments=Arguments ")";
	public ListElements getListAccess() {
		return (pList != null) ? pList : (pList = new ListElements());
	}
	
	public ParserRule getListRule() {
		return getListAccess().getRule();
	}

	//OdeList:
	//
	//	"ode" "(" arguments=Arguments ")";
	public OdeListElements getOdeListAccess() {
		return (pOdeList != null) ? pOdeList : (pOdeList = new OdeListElements());
	}
	
	public ParserRule getOdeListRule() {
		return getOdeListAccess().getRule();
	}

	//RandomList:
	//
	//	"~" "(" arguments=Arguments ")";
	public RandomListElements getRandomListAccess() {
		return (pRandomList != null) ? pRandomList : (pRandomList = new RandomListElements());
	}
	
	public ParserRule getRandomListRule() {
		return getRandomListAccess().getRule();
	}

	//Arguments:
	//
	//	arguments+=Argument ("," arguments+=Argument)*;
	public ArgumentsElements getArgumentsAccess() {
		return (pArguments != null) ? pArguments : (pArguments = new ArgumentsElements());
	}
	
	public ParserRule getArgumentsRule() {
		return getArgumentsAccess().getRule();
	}

	//Argument:
	//
	//	identifier=ID "=" expression=AnyExpression | expression=AnyExpression;
	public ArgumentElements getArgumentAccess() {
		return (pArgument != null) ? pArgument : (pArgument = new ArgumentElements());
	}
	
	public ParserRule getArgumentRule() {
		return getArgumentAccess().getRule();
	}

	//ConditionalStatement:
	//
	//	"if" parExpression=ParExpression (ifStatement=BlockStatement | ifBlock=Block) ("else" (elseStatement=BlockStatement |
	//
	//	elseBlock=Block))?;
	public ConditionalStatementElements getConditionalStatementAccess() {
		return (pConditionalStatement != null) ? pConditionalStatement : (pConditionalStatement = new ConditionalStatementElements());
	}
	
	public ParserRule getConditionalStatementRule() {
		return getConditionalStatementAccess().getRule();
	}

	//Block:
	//
	//	{Block} BEGIN statements+=BlockStatement* END;
	public BlockElements getBlockAccess() {
		return (pBlock != null) ? pBlock : (pBlock = new BlockElements());
	}
	
	public ParserRule getBlockRule() {
		return getBlockAccess().getRule();
	}

	//ParExpression:
	//
	//	"(" expression=Expression ")";
	public ParExpressionElements getParExpressionAccess() {
		return (pParExpression != null) ? pParExpression : (pParExpression = new ParExpressionElements());
	}
	
	public ParserRule getParExpressionRule() {
		return getParExpressionAccess().getRule();
	}

	//ConditionalExpression:
	//
	//	expression=OrExpression ("?" expression1=Expression ":" expression2=Expression)?;
	public ConditionalExpressionElements getConditionalExpressionAccess() {
		return (pConditionalExpression != null) ? pConditionalExpression : (pConditionalExpression = new ConditionalExpressionElements());
	}
	
	public ParserRule getConditionalExpressionRule() {
		return getConditionalExpressionAccess().getRule();
	}

	//OrExpression:
	//
	//	expression+=AndExpression (operator+=LogicalOrOperator expression+=AndExpression)*;
	public OrExpressionElements getOrExpressionAccess() {
		return (pOrExpression != null) ? pOrExpression : (pOrExpression = new OrExpressionElements());
	}
	
	public ParserRule getOrExpressionRule() {
		return getOrExpressionAccess().getRule();
	}

	//AndExpression:
	//
	//	expression+=LogicalExpression (operator+=LogicalAndOperator expression+=LogicalExpression)*;
	public AndExpressionElements getAndExpressionAccess() {
		return (pAndExpression != null) ? pAndExpression : (pAndExpression = new AndExpressionElements());
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}

	//LogicalExpression:
	//
	//	negation="!"? (boolean=BOOLEAN | expression+=AdditiveExpression (operator+=LogicalOperator
	//
	//	expression+=AdditiveExpression)*);
	public LogicalExpressionElements getLogicalExpressionAccess() {
		return (pLogicalExpression != null) ? pLogicalExpression : (pLogicalExpression = new LogicalExpressionElements());
	}
	
	public ParserRule getLogicalExpressionRule() {
		return getLogicalExpressionAccess().getRule();
	}

	//AdditiveExpression:
	//
	//	expression+=MultiplicativeExpression (operator+=AdditiveOperator expression+=MultiplicativeExpression)* |
	//
	//	string+=STRING (operator+=AdditiveOperator string+=STRING)*;
	public AdditiveExpressionElements getAdditiveExpressionAccess() {
		return (pAdditiveExpression != null) ? pAdditiveExpression : (pAdditiveExpression = new AdditiveExpressionElements());
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//MultiplicativeExpression:
	//
	//	expression+=PowerExpression (operator+=MultiplicativeOperator expression+=PowerExpression)*;
	public MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return (pMultiplicativeExpression != null) ? pMultiplicativeExpression : (pMultiplicativeExpression = new MultiplicativeExpressionElements());
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//PowerExpression:
	//
	//	expression+=UnaryExpression (operator+=PowerOperator expression+=UnaryExpression)*;
	public PowerExpressionElements getPowerExpressionAccess() {
		return (pPowerExpression != null) ? pPowerExpression : (pPowerExpression = new PowerExpressionElements());
	}
	
	public ParserRule getPowerExpressionRule() {
		return getPowerExpressionAccess().getRule();
	}

	//UnaryExpression:
	//
	//	operator=UnaryOperator expression=UnaryExpression | parExpression=ParExpression | primary=Primary;
	public UnaryExpressionElements getUnaryExpressionAccess() {
		return (pUnaryExpression != null) ? pUnaryExpression : (pUnaryExpression = new UnaryExpressionElements());
	}
	
	public ParserRule getUnaryExpressionRule() {
		return getUnaryExpressionAccess().getRule();
	}

	//Primary:
	//
	//	functionCall=FunctionCall | number=NUMBER | symbol=FullyQualifiedSymbolName | attribute=FullyQualifiedArgumentName |
	//
	//	vector=Vector;
	public PrimaryElements getPrimaryAccess() {
		return (pPrimary != null) ? pPrimary : (pPrimary = new PrimaryElements());
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}

	//Vector:
	//
	//	identifier="c" "(" values+=Expression ("," values+=Expression)* ")";
	public VectorElements getVectorAccess() {
		return (pVector != null) ? pVector : (pVector = new VectorElements());
	}
	
	public ParserRule getVectorRule() {
		return getVectorAccess().getRule();
	}

	//FullyQualifiedSymbolName:
	//
	//	(object=[ObjectName] "$")? identifier= //ref VariableName, ParameterName or FunctionName
	//
	//	ID;
	public FullyQualifiedSymbolNameElements getFullyQualifiedSymbolNameAccess() {
		return (pFullyQualifiedSymbolName != null) ? pFullyQualifiedSymbolName : (pFullyQualifiedSymbolName = new FullyQualifiedSymbolNameElements());
	}
	
	public ParserRule getFullyQualifiedSymbolNameRule() {
		return getFullyQualifiedSymbolNameAccess().getRule();
	}

	//FullyQualifiedArgumentName:
	//
	//	parent=FullyQualifiedSymbolName ("." identifier+=ID)+ //ref ArgumentName
	//
	//;
	public FullyQualifiedArgumentNameElements getFullyQualifiedArgumentNameAccess() {
		return (pFullyQualifiedArgumentName != null) ? pFullyQualifiedArgumentName : (pFullyQualifiedArgumentName = new FullyQualifiedArgumentNameElements());
	}
	
	public ParserRule getFullyQualifiedArgumentNameRule() {
		return getFullyQualifiedArgumentNameAccess().getRule();
	}

	//ObjectName:
	//
	//	name=ID;
	public ObjectNameElements getObjectNameAccess() {
		return (pObjectName != null) ? pObjectName : (pObjectName = new ObjectNameElements());
	}
	
	public ParserRule getObjectNameRule() {
		return getObjectNameAccess().getRule();
	}

	//LogicalAndOperator:
	//
	//	"&&";
	public LogicalAndOperatorElements getLogicalAndOperatorAccess() {
		return (pLogicalAndOperator != null) ? pLogicalAndOperator : (pLogicalAndOperator = new LogicalAndOperatorElements());
	}
	
	public ParserRule getLogicalAndOperatorRule() {
		return getLogicalAndOperatorAccess().getRule();
	}

	//LogicalOrOperator:
	//
	//	"||";
	public LogicalOrOperatorElements getLogicalOrOperatorAccess() {
		return (pLogicalOrOperator != null) ? pLogicalOrOperator : (pLogicalOrOperator = new LogicalOrOperatorElements());
	}
	
	public ParserRule getLogicalOrOperatorRule() {
		return getLogicalOrOperatorAccess().getRule();
	}

	//LogicalOperator:
	//
	//	"<" | ">" | "<=" | ">=" | "==" | "!=";
	public LogicalOperatorElements getLogicalOperatorAccess() {
		return (pLogicalOperator != null) ? pLogicalOperator : (pLogicalOperator = new LogicalOperatorElements());
	}
	
	public ParserRule getLogicalOperatorRule() {
		return getLogicalOperatorAccess().getRule();
	}

	//PowerOperator:
	//
	//	"^";
	public PowerOperatorElements getPowerOperatorAccess() {
		return (pPowerOperator != null) ? pPowerOperator : (pPowerOperator = new PowerOperatorElements());
	}
	
	public ParserRule getPowerOperatorRule() {
		return getPowerOperatorAccess().getRule();
	}

	//MultiplicativeOperator:
	//
	//	"*" | "/" | "%";
	public MultiplicativeOperatorElements getMultiplicativeOperatorAccess() {
		return (pMultiplicativeOperator != null) ? pMultiplicativeOperator : (pMultiplicativeOperator = new MultiplicativeOperatorElements());
	}
	
	public ParserRule getMultiplicativeOperatorRule() {
		return getMultiplicativeOperatorAccess().getRule();
	}

	//AdditiveOperator:
	//
	//	"+" | "-";
	public AdditiveOperatorElements getAdditiveOperatorAccess() {
		return (pAdditiveOperator != null) ? pAdditiveOperator : (pAdditiveOperator = new AdditiveOperatorElements());
	}
	
	public ParserRule getAdditiveOperatorRule() {
		return getAdditiveOperatorAccess().getRule();
	}

	//UnaryOperator:
	//
	//	"+" | "-";
	public UnaryOperatorElements getUnaryOperatorAccess() {
		return (pUnaryOperator != null) ? pUnaryOperator : (pUnaryOperator = new UnaryOperatorElements());
	}
	
	public ParserRule getUnaryOperatorRule() {
		return getUnaryOperatorAccess().getRule();
	}

	//NUMBER:
	//
	//	INTEGER | FLOAT;
	public NUMBERElements getNUMBERAccess() {
		return (pNUMBER != null) ? pNUMBER : (pNUMBER = new NUMBERElements());
	}
	
	public ParserRule getNUMBERRule() {
		return getNUMBERAccess().getRule();
	}

	//terminal STRING:
	//
	//	"\"" (ESCAPE_SEQUENCE | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal fragment ESCAPE_SEQUENCE:
	//
	//	"\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | UNICODE_ESCAPE | OCTAL_ESCAPE;
	public TerminalRule getESCAPE_SEQUENCERule() {
		return (tESCAPE_SEQUENCE != null) ? tESCAPE_SEQUENCE : (tESCAPE_SEQUENCE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ESCAPE_SEQUENCE"));
	} 

	//terminal fragment OCTAL_ESCAPE:
	//
	//	"\\" "0".."3" "0".."7" "0".."7" | "\\" "0".."7" "0".."7" | "\\" "0".."7";
	public TerminalRule getOCTAL_ESCAPERule() {
		return (tOCTAL_ESCAPE != null) ? tOCTAL_ESCAPE : (tOCTAL_ESCAPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OCTAL_ESCAPE"));
	} 

	//terminal fragment UNICODE_ESCAPE:
	//
	//	"\\" "u" HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT;
	public TerminalRule getUNICODE_ESCAPERule() {
		return (tUNICODE_ESCAPE != null) ? tUNICODE_ESCAPE : (tUNICODE_ESCAPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "UNICODE_ESCAPE"));
	} 

	//terminal fragment HEXDIGIT:
	//
	//	"0".."9" | "a".."f" | "A".."F";
	public TerminalRule getHEXDIGITRule() {
		return (tHEXDIGIT != null) ? tHEXDIGIT : (tHEXDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "HEXDIGIT"));
	} 

	//terminal BOOLEAN:
	//
	//	"true" | "false";
	public TerminalRule getBOOLEANRule() {
		return (tBOOLEAN != null) ? tBOOLEAN : (tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BOOLEAN"));
	} 

	//terminal INTEGER:
	//
	//	"0" | "1".."9" "0".."9"*;
	public TerminalRule getINTEGERRule() {
		return (tINTEGER != null) ? tINTEGER : (tINTEGER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INTEGER"));
	} 

	//terminal FLOAT:
	//
	//	"0".."9"+ "." "0".."9"* EXPONENT? | "." "0".."9"+ EXPONENT? | "0".."9"+ EXPONENT | "0".."9";
	public TerminalRule getFLOATRule() {
		return (tFLOAT != null) ? tFLOAT : (tFLOAT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "FLOAT"));
	} 

	//terminal fragment EXPONENT:
	//
	//	("e" | "E") ("+" | "-")? "0".."9"+;
	public TerminalRule getEXPONENTRule() {
		return (tEXPONENT != null) ? tEXPONENT : (tEXPONENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EXPONENT"));
	} 

	//terminal SL_COMMENT:
	//
	//	"#" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal ML_COMMENT:
	//
	//	"/#"->"#/";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal BEGIN:
	//
	//	"{";
	public TerminalRule getBEGINRule() {
		return (tBEGIN != null) ? tBEGIN : (tBEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "BEGIN"));
	} 

	//terminal END:
	//
	//	"}";
	public TerminalRule getENDRule() {
		return (tEND != null) ? tEND : (tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "END"));
	} 

	//terminal ID:
	//
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal WS:
	//
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
