grammar org.ddmore.mdl.Mdl with org.eclipse.xtext.common.Terminals
generate mdl "http://www.ddmore.org/mdl/Mdl"


Mcl hidden(WS, ML_COMMENT, SL_COMMENT):
	objects+=MclObject*;

MclObject:
	objectName=ObjectName '=' 
	(modelObject=ModelObject | 
	parameterObject=ParameterObject | 
	dataObject=DataObject | 
	taskObject=TaskObject |
	telObject=TELObject);
	
ModelObject: 
	identifier = 'mdlobj' BEGIN blocks += ModelObjectBlock* END;

ParameterObject:
	identifier = 'parobj' BEGIN blocks += ParameterObjectBlock* END;
	
DataObject:
	identifier = 'dataobj' BEGIN blocks += DataObjectBlock* END;

TaskObject:
	identifier = 'taskobj' BEGIN blocks += TaskObjectBlock* END;
	
TELObject:
	identifier = 'telobj' BEGIN statements += BlockStatement* END;
	
//////////////////////////////////////////////////////////
//Model Object
//////////////////////////////////////////////////////////

ModelObjectBlock: 
	individualVariablesBlock = IndividualVariablesBlock | 
	modelPredictionBlock = ModelPredictionBlock |
	randomVariableDefinitionBlock = RandomVariableDefinitionBlock |
	inputVariablesBlock = InputVariablesBlock |
	structuralParametersBlock = StructuralParametersBlock |
	variabilityParametersBlock = VariabilityParametersBlock |
	outputVariablesBlock = OutputVariablesBlock |
	groupVariablesBlock = GroupVariablesBlock | 
	observationBlock = ObservationBlock |
	estimationBlock = EstimationBlock |
	simulationBlock = SimulationBlock |
	targetBlock = TargetBlock |
	importBlock = ImportBlock
;

IndividualVariablesBlock:
	identifier = 'INDIVIDUAL_VARIABLES' 
	BEGIN statements += BlockStatement* END  //new Variable +
;

ModelPredictionBlock:
	identifier = 'MODEL_PREDICTION' 
	BEGIN statements += ModelPredictionBlockStatement* END
;

RandomVariableDefinitionBlock:
	identifier = 'RANDOM_VARIABLE_DEFINITION' 
	BEGIN variables += RandomVariable* END //new Variable +
;

InputVariablesBlock:
  	indentifier = 'MODEL_INPUT_VARIABLES' 
  	BEGIN variables += SymbolDeclaration* END //new Variable +
;

StructuralParametersBlock:
  identifier = 'STRUCTURAL_PARAMETERS' 
  BEGIN parameters += FullyQualifiedSymbolName* END  //Ref to Parameter +
; 

VariabilityParametersBlock:
  identifier = 'VARIABILITY_PARAMETERS' 
  BEGIN parameters += FullyQualifiedSymbolName* END //Ref to Parameter +
;

OutputVariablesBlock:
	identifier = 'MODEL_OUTPUT_VARIABLES' 
	BEGIN variables += FullyQualifiedSymbolName* END //Ref to VariableName +
; 

GroupVariablesBlock:
	identifier = 'GROUP_VARIABLES' 
	BEGIN statements += GroupVariablesBlockStatement* END
;

ObservationBlock:
	identifier = 'OBSERVATION'
	BEGIN statements += BlockStatement* END  //new Variable +
;

EstimationBlock:
	identifier = 'ESTIMATION' 
	BEGIN statements += BlockStatement* END  //new Variable +
;

SimulationBlock:
	identifier = 'SIMULATION' 
	BEGIN statements += BlockStatement* END  //new Variable +
;

//////////////////////////////////////////////////////////
//Parameter Object
//////////////////////////////////////////////////////////

ParameterObjectBlock:
	structuralBlock = StructuralBlock |
	variabilityBlock = VariabilityBlock |
	priorBlock = PriorParametersBlock |
	targetBlock = TargetBlock |
	importBlock = ImportBlock
;

StructuralBlock:
	identifier='STRUCTURAL'   
	BEGIN parameters += ParameterDeclaration* END //new Parameter +
;

VariabilityBlock:
	identifier='VARIABILITY' 
	BEGIN statements += VariabilityBlockStatement* END
;

PriorParametersBlock:
	identifier='PRIOR_PARAMETERS' 
	BEGIN statements += BlockStatement* END  //new Parameter +
;

//////////////////////////////////////////////////////////
//Data Object
//////////////////////////////////////////////////////////

DataObjectBlock:
	headerBlock = HeaderBlock |
	fileBlock = FileBlock |
	targetBlock = TargetBlock | 
	importBlock = ImportBlock;
 
HeaderBlock:
 	identifier='DATA_INPUT_VARIABLES' 
 	BEGIN variables += SymbolDeclaration* END  //new Variable -
 ;
 
 FileBlock:
	identifier='FILE' 	
	BEGIN statements += FileBlockStatement* END
 ;
 
//////////////////////////////////////////////////////////
//Task Object
//////////////////////////////////////////////////////////
 
TaskObjectBlock: 
	functionDeclaration = TaskFunctionDeclaration | 
	parameterBlock = ParameterBlock |
	dataBlock = DataBlock |
	modelBlock = ModelBlock | 
	targetBlock = TargetBlock |
	importBlock = ImportBlock	
	;

ParameterBlock:
	identifier = 'PARAMETER' 
	BEGIN parameters += SymbolModification* END  //Ref to parameter +
;

DataBlock:
	identifier = 'DATA' 
	BEGIN statements += DataBlockStatement* END
;

DataBlockStatement:
	ignoreList = IgnoreList | acceptList = AcceptList | dropList = DropList
;

IgnoreList:
	identifier = 'IGNORE' "=" 'if' '(' expression = OrExpression ')'
;

AcceptList:
	identifier = 'ACCEPT' "=" 'if' '(' expression = AndExpression ')'
; 

DropList:
	identifier = 'DROP' "=" list = SymbolList
;

AddList:
	identifier = 'ADD' '=' list = SymbolList
;

RemoveList:
	identifier = 'REMOVE' '=' list = SymbolList
;

ModelBlock:
	identifier = 'MODEL' 
	BEGIN statements += ModelBlockStatement* END
;

ModelBlockStatement:
	statement = BlockStatement |
	addList = AddList |
	removeList = RemoveList
;

SymbolList: 
	identifier = 'list' '(' symbols += FullyQualifiedSymbolName (=> ',' symbols += FullyQualifiedSymbolName)* ')'
	//Ref to VariableName +
;

ModelPredictionBlockStatement: 
	statement = BlockStatement | //new Variable +
	odeBlock = OdeBlock | 
	libraryBlock = LibraryBlock
;

LibraryBlock: 
	identifier = 'LIBRARY' 
	BEGIN statements += FunctionCallStatement* END //Properties: format restricted to a "variable = function call"
;

FunctionCallStatement:
	functionName = SymbolName "=" expression = FunctionCall
;


OdeBlock:
	identifier = 'ODE' 
	BEGIN statements += BlockStatement* END  //new Variable + 
;

GroupVariablesBlockStatement:
	statement = BlockStatement |  //new Variable + 
	mixtureBlock = MixtureBlock 
;

MixtureBlock:
	identifier = 'MIXTURE' 
	BEGIN statements += BlockStatement* END //new Variable +
;


VariabilityBlockStatement:
	parameter = ParameterDeclaration | 
	matrixBlock = MatrixBlock | 
	diagBlock = DiagBlock	|
	sameBlock = SameBlock
;

//Renamed to Matrix!
MatrixBlock:
	 identifier = 'matrix' '(' arguments = Arguments ')'
	 (BEGIN parameters = Arguments END)?  //new Parameter +
;

DiagBlock:	  
	 identifier = 'diag' '(' arguments = Arguments ')'
	 (BEGIN parameters = Arguments END)?  //new Parameter +
;

SameBlock:	  
	 identifier = 'same' '(' arguments = Arguments ')'
	 (BEGIN parameters = FormalArguments END)?  //new Parameter +
;

//////////////////////////////////////////////////////////
//Data Object
//////////////////////////////////////////////////////////

FileBlockStatement:
	variable = SymbolDeclaration |  //new VariableName which can be only list +
	inlineBlock = InlineBlock | 
	designBlock = DesignBlock | 
	rscriptBlock = RScriptBlock 
;

InlineBlock:
	identifier = 'INLINE' 
	BEGIN (variables += FullyQualifiedSymbolName)* (values += NumericValue | '.')* END //Ref to VariableName + 
;

DesignBlock:
	identifier = 'DESIGN' 
	BEGIN statements += DesignBlockStatement* END
;

DesignBlockStatement:
	identifier = FullyQualifiedSymbolName (arguments = VariableList)? '=' expression = AnyExpression  //Ref to VariableName +
;

VariableList:
	'[' identifiers += FullyQualifiedSymbolName (=> ',' identifiers += FullyQualifiedSymbolName)* ']' //Ref to VaraibleName +
;
	
RScriptBlock:	
	identifier = 'RSCRIPT' 
	BEGIN variables += RScriptBlockStatement* END	  			
;

RScriptBlockStatement:
	symbolName = SymbolName "=" (value = STRING | object = ObjectName) // new VariableName +
;

TaskFunctionDeclaration:
	functionName = SymbolName "=" 'function'   //new FunctionName +
	'(' formalArguments = FormalArguments ')'
	functionBody = TaskFunctionBody
;

TaskFunctionBody: {TaskFunctionBody}	
	BEGIN (blocks += TaskFunctionBlock)* END
;

TaskFunctionBlock:
	estimateBlock = EstimateTask |
	simulateBlock = SimulateTask |
	executeBlock = ExecuteTask
;

EstimateTask: 
	identifier = 'ESTIMATE' 
	BEGIN statements += BlockStatement* END //Properties
;

SimulateTask:
	identifier = 'SIMULATE' 
	BEGIN statements += BlockStatement* END  //Properties
;

ExecuteTask:
	identifier = "EXECUTE"
	BEGIN statements += BlockStatement* END  //Properties
;

//////////////////////////////////////////////////////////
//Common
//////////////////////////////////////////////////////////

FormalArguments:
	arguments += ArgumentName (=> ',' arguments += ArgumentName)*
;

ArgumentName:
	name=ID
;

FunctionCall:
	identifier = FullyQualifiedSymbolName '(' arguments = Arguments ')' 
	//Ref to ImportedFunction, TaskFunctionDeclaration or standard +
;

BlockStatement:
	symbol = SymbolDeclaration | //Variable, Parameter? or Property
	functionCall = FunctionCall |
	statement = ConditionalStatement |
	targetBlock = TargetBlock
;

TargetBlock: 
	identifier = 'TARGET_CODE' ('(' arguments = Arguments ')' )? 
	BEGIN  externalCode = EXTERNAL_CODE END
;

TargetLanguage:
	identifier = ('NMTRAN_CODE' | 
	'MLXTRAN_CODE' | 
	'PML_CODE' | 
	'BUGS_CODE' | 
	'R_CODE' | 
	'MATLAB_CODE') 	
;

terminal EXTERNAL_CODE:
	'***' -> '***'
; 

ImportBlock:
	identifier = 'IMPORT' BEGIN 
		functions += ImportedFunction*
	END //rename to functions
;

ImportedFunction:
	functionName = SymbolName ("=" list = List) 
;

SymbolModification:
	identifier = FullyQualifiedSymbolName ("=" list = List)?  
	//Ref to ParameterName or VariableName (depending on the container) +
;

ParameterDeclaration:
	symbolName = SymbolName ("=" list = List) //new ParameterName
;

SymbolName:
	name = ID
;

//new VariableName, new PropertyName, new ParameterName? (PRIOR_PARAMETERS)
SymbolDeclaration:
	symbolName = SymbolName (("=" expression = AnyExpression) | (randomList = RandomList))?
;

RandomVariable:
	((symbolName = SymbolName) | (functionName = SymbolName '(' symbolName = SymbolName ')')) 
	randomList = RandomList
;

EnumType:
	categorical = Categorical | 
	continuous = Continuous | 
	use = UseType |       
	likelyhood = Likelyhood |
	target = TargetLanguage
;

Likelyhood:
	identifier = 'LIKELIHOOD'	
;

UseType:
	identifier = (
		'id'| 'idv' |'amt' | 'dv' | 'dvid' | 'ytype' | 'itype' |
		'covariate' | 'reg' | 'time' | 'dose'| 
		'cat' | 'occ' | 'occasion' | 'adm' | 'cens' | 'limit' | 'rate' | 'tinf' | 
		'ss' | 'addl' | 'ii' | 'tau' | 'mdv' | 'evid')
;

Categorical:
	identifier = 'categorical' ('(' arguments = FormalArguments ')')?
;

Continuous:
	identifier = 'continuous'
;

Distribution: 
	identifier = (
	'Bernoulli' |
	'Beta' |
	'Binomial' |
	'Categorical' | 
	'Cauchy' | 	
	'ChiSquare' |
	'Dirichlet' | 	
	'Exponential' | 	
	'FDistribution' |
	'Gamma' | 
	'Geometric' | 
	'Hypergeometric' |
	'InverseGamma' |	
	'Laplace' |	
	'Logistic' |
	'LogNormal'	|
	'MixtureModel' | 	
	'Multinomial' |
	'MultivariateNormal' | 	
	'MultivariateStudentT' | 	
	'NegativeBinomial' |
	'Normal' |
	'NormalInverseGamma' |
	'Pareto' |
	'Poisson' |
	'StudentT' |
	'Uniform' |
	'Weibull' |
	'Wishart') 
;

AnyExpression:
	expression = Expression |
	list = List | 
	odeList = OdeList |
	vector = Vector |
	type = EnumType 
;

List:
	identifier = 'list' '(' arguments = Arguments ')'
;

OdeList:
	 identifier = 'ode' '(' arguments = Arguments ')' 
;

RandomList:
	identifier = '~' '(' arguments = DistributionArguments ')'
;

DistributionArguments:
	arguments += DistributionArgument (=> ',' arguments += DistributionArgument)*
;

DistributionArgument: 
	(argumentName = ArgumentName "=")? (distribution = Distribution | value = Primary | component = RandomList)
; 

Arguments: 
	arguments += Argument (=> ',' arguments += Argument)*
;

Argument:
	argumentName = ArgumentName "=" expression = AnyExpression |
	expression = AnyExpression
;

ConditionalStatement:
	'if' '('expression=OrExpression')' 
		(ifStatement = BlockStatement | ifBlock = Block)
	(=> 'else' 
		(elseStatement = BlockStatement | elseBlock = Block)
	)? 
;

Block: {Block}
	BEGIN statements += BlockStatement* END
;

ParExpression:
	'(' expression = Expression')';
	
Expression:
	conditionalExpression = ConditionalExpression 
;	
	
ConditionalExpression:
	expression = OrExpression ('?' expression1 = Expression ':' expression2 = Expression)?;

OrExpression:
	expression += AndExpression (operator += LogicalOrOperator expression += AndExpression)*;

AndExpression:
	expression += LogicalExpression (operator += LogicalAndOperator expression += LogicalExpression)*;	

LogicalExpression:
	(negation = "!")? (
		(boolean = BOOLEAN) | 
		(expression1 = AdditiveExpression (operator = LogicalOperator expression2 = AdditiveExpression)?)
	)
;

AdditiveExpression:
	expression += MultiplicativeExpression (operator += AdditiveOperator expression+=MultiplicativeExpression)* |
	string = STRING	 
;

MultiplicativeExpression:
	expression += PowerExpression (operator += MultiplicativeOperator expression += PowerExpression)*;

PowerExpression:
	expression += UnaryExpression (operator += PowerOperator expression += UnaryExpression)*;

UnaryExpression:
	operator = UnaryOperator expression = UnaryExpression |  
	parExpression = ParExpression |
	number = NumericValue |
	symbol = FullyQualifiedSymbolName | //Ref to VariableName +, ParameterName +, ObjectName or formal argument 
	attribute = FullyQualifiedArgumentName | 
	functionCall = FunctionCall 
;


Primary:
	number = NumericValue |
	symbol = FullyQualifiedSymbolName | //Ref to VariableName +, ParameterName +, ObjectName or formal argument 
	vector = Vector 
;

Vector:
	identifier = 'c' '(' values += Primary (=> ',' values += Primary)* ')'
;	

FullyQualifiedSymbolName: 	//ref VariableName or ParameterName (depending on the container)
	(object = [ObjectName] '$')? symbol = SymbolName
;

FullyQualifiedArgumentName:
	parent = FullyQualifiedSymbolName selectors += Selector+  //ref VariableName or ParameterName +
;

Selector:
	('.' argumentName = ArgumentName ) | ('[' selector = INTEGER ']')
;

ObjectName:
	name = ID
;

LogicalAndOperator: '&&'
;		

LogicalOrOperator: '||'
;

LogicalOperator:
	'<' | 
	'>' | 
	"<=" | 
	">=" | 
	'==' | 
	'!=';

PowerOperator:
	'^'
;

MultiplicativeOperator:
	'*' | '/' | '%'  
;	

AdditiveOperator:
	'+' | '-'
;

UnaryOperator:
	'+' | '-' 
;

NumericValue:	
	INTEGER | FLOAT
; 
	
terminal STRING:
	'"' (ESCAPE_SEQUENCE | !('\\' | '"'))* '"';

terminal fragment ESCAPE_SEQUENCE:
	'\\' ('b' | 't' | 'n' | 'f' | 'r' | '\"' | '\'' | '\\')
	| UNICODE_ESCAPE
	| OCTAL_ESCAPE;

terminal fragment OCTAL_ESCAPE:
	  '\\' ('0'..'3') ('0'..'7') ('0'..'7')
	| '\\' ('0'..'7') ('0'..'7')
	| '\\' ('0'..'7');

terminal fragment UNICODE_ESCAPE:
	'\\' 'u' HEXDIGIT HEXDIGIT HEXDIGIT HEXDIGIT;

terminal fragment HEXDIGIT:
	('0'..'9' | 'a'..'f' | 'A'..'F');
	
terminal BOOLEAN:
    'true' | 'false';		
	
terminal INTEGER:
	('0' | '1'..'9' '0'..'9'*);
	
terminal FLOAT
    : '0'..'9' + '.' '0'..'9'* EXPONENT?
    | '.' '0'..'9'+ EXPONENT?
    | '0'..'9'+ EXPONENT
    | ('0'..'9')
    ;

terminal fragment EXPONENT
	: ('e'|'E'|'d'|'D') ('+'|'-')?('0'..'9')+;

terminal SL_COMMENT : ('#') !('\n'|'\r')* ('\r'? '\n')? ;

terminal ML_COMMENT : '/#' -> '#/';

terminal BEGIN: '{';

terminal END: '}' ;

terminal ID: ('a'..'z'|'A'..'Z'|'_')('a'..'z'|'A'..'Z'|'_'| '0'..'9')*;



